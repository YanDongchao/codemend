<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document
  PUBLIC '+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML'
  'http://docutils.sourceforge.net/docs/ref/docutils.dtd'>
<!-- Generated by Docutils 0.12 -->
<document source="/Users/ronxin/Dropbox/ProjectS/data/matplotlib/doc/api/axes_api.rst">
    <section ids="axes" names="axes">
        <title>axes</title>
        <section ids="matplotlib-axes" names="matplotlib.axes">
            <title>
                <literal classes="xref py py-mod">matplotlib.axes</literal>
            </title>
            <index entries="['single',\ u'Axes\ (class\ in\ matplotlib.axes)',\ u'matplotlib.axes.Axes',\ '']"/>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="Axes" ids="matplotlib.axes.Axes" module="matplotlib.axes" names="matplotlib.axes.Axes">
                    <desc_annotation>class </desc_annotation>
                    <desc_addname>matplotlib.axes.</desc_addname>
                    <desc_name>Axes</desc_name>
                    <desc_parameterlist>
                        <desc_parameter>fig</desc_parameter>
                        <desc_parameter>rect</desc_parameter>
                        <desc_parameter>axisbg=None</desc_parameter>
                        <desc_parameter>frameon=True</desc_parameter>
                        <desc_parameter>sharex=None</desc_parameter>
                        <desc_parameter>sharey=None</desc_parameter>
                        <desc_parameter>label=u''</desc_parameter>
                        <desc_parameter>xscale=None</desc_parameter>
                        <desc_parameter>yscale=None</desc_parameter>
                        <desc_parameter>**kwargs</desc_parameter>
                    </desc_parameterlist>
                </desc_signature>
                <desc_content>
                    <paragraph>The 
                        <literal classes="xref py py-class">Axes</literal>
                        contains most of the figure elements:

                        <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                            <literal classes="xref py py-class">Axis</literal></reference>, 
                        <reference internal="True" reftitle="matplotlib.axis.Tick" refuri="axis_api#matplotlib.axis.Tick">
                            <literal classes="xref py py-class">Tick</literal></reference>,

                        <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                            <literal classes="xref py py-class">Line2D</literal></reference>, 
                        <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                            <literal classes="xref py py-class">Text</literal></reference>,

                        <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                            <literal classes="xref py py-class">Polygon</literal></reference>, etc., and sets the
coordinate system.</paragraph>
                    <paragraph>The 
                        <literal classes="xref py py-class">Axes</literal>
                        instance supports callbacks through a callbacks
attribute which is a 
                        <reference internal="True" reftitle="matplotlib.cbook.CallbackRegistry" refuri="cbook_api#matplotlib.cbook.CallbackRegistry">
                            <literal classes="xref py py-class">CallbackRegistry</literal></reference>instance.  The events you can connect to are 'xlim_changed' and
'ylim_changed' and the callback will be called with func(
                        <emphasis>ax</emphasis>
                        )
where 
                        <emphasis>ax</emphasis>
                        is the 
                        <literal classes="xref py py-class">Axes</literal>
                        instance.</paragraph>
                    <index entries="['single',\ u'acorr()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.acorr',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.acorr" ids="matplotlib.axes.Axes.acorr" module="matplotlib.axes" names="matplotlib.axes.Axes.acorr">
                            <desc_name>acorr</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the autocorrelation of 
                                <literal classes="xref py py-obj">x</literal>
                                .</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: sequence of scalar</paragraph>
                                        <paragraph>
                                            <strong>hold</strong>: boolean, optional, default: True</paragraph>
                                        <paragraph>
                                            <strong>detrend</strong>: callable, optional, default: 
                                            <literal classes="xref py py-obj">mlab.detrend_none</literal></paragraph>
                                        <block_quote>
                                            <paragraph>x is detrended by the 
                                                <literal classes="xref py py-obj">detrend</literal>
                                                callable. Default is no
normalization.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>normed</strong>: boolean, optional, default: True</paragraph>
                                        <block_quote>
                                            <paragraph>if True, normalize the data by the autocorrelation at the 0-th
lag.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>usevlines</strong>: boolean, optional, default: True</paragraph>
                                        <block_quote>
                                            <paragraph>if True, Axes.vlines is used to plot the vertical lines from the
origin to the acorr. Otherwise, Axes.plot is used.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>maxlags</strong>: integer, optional, default: 10</paragraph>
                                        <block_quote>
                                            <paragraph>number of lags to show. If None, will return all 2 * len(x) - 1
lags.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>(lags, c, line, b)</strong>: where:</paragraph>
                                        <block_quote>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">lags</literal>are a length 2`maxlags+1 lag vector.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">c</literal>is the 2`maxlags+1 auto correlation vectorI</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">line</literal>is a 
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                            <literal classes="xref py py-obj">Line2D</literal></reference>instance returned by

                                                        <literal classes="xref py py-obj">plot</literal>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">b</literal>is the x-axis.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>linestyle</strong>: 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-obj">Line2D</literal></reference>prop, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>Only used if usevlines is False.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>marker</strong>: string, optional, default: 'o'</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.xcorr" refuri="pyplot_api#matplotlib.pyplot.xcorr">
                                    <literal classes="xref py py-obj">xcorr</literal>
                                </reference>is top graph, and

                                <reference internal="True" reftitle="matplotlib.pyplot.acorr" refuri="pyplot_api#matplotlib.pyplot.acorr">
                                    <literal classes="xref py py-obj">acorr</literal></reference>is bottom graph.</paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_artist()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_artist',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_artist" ids="matplotlib.axes.Axes.add_artist" module="matplotlib.axes" names="matplotlib.axes.Axes.add_artist">
                            <desc_name>add_artist</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>a</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add any 
                                <reference internal="True" reftitle="matplotlib.artist.Artist" refuri="artist_api#matplotlib.artist.Artist">
                                    <literal classes="xref py py-class">Artist</literal></reference>to the axes.</paragraph>
                            <paragraph>Use 
                                <literal classes="xref py py-obj">add_artist</literal>
                                only for artists for which there is no dedicated
&quot;add&quot; method; and if necessary, use a method such as

                                <literal classes="xref py py-obj">update_datalim</literal>
                                or 
                                <literal classes="xref py py-obj">update_datalim_numerix</literal>
                                to manually update the
dataLim if the artist is to be included in autoscaling.</paragraph>
                            <paragraph>Returns the artist.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_callback()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_callback',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_callback" ids="matplotlib.axes.Axes.add_callback" module="matplotlib.axes" names="matplotlib.axes.Axes.add_callback">
                            <desc_name>add_callback</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>func</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Adds a callback function that will be called whenever one of
the 
                                <literal classes="xref py py-class">Artist</literal>
                                's properties changes.</paragraph>
                            <paragraph>Returns an 
                                <emphasis>id</emphasis>
                                that is useful for removing the callback with

                                <literal classes="xref py py-meth">remove_callback()</literal>
                                later.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_collection()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_collection',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_collection" ids="matplotlib.axes.Axes.add_collection" module="matplotlib.axes" names="matplotlib.axes.Axes.add_collection">
                            <desc_name>add_collection</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>collection</desc_parameter>
                                <desc_parameter>autolim=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <reference internal="True" reftitle="matplotlib.collections.Collection" refuri="collections_api#matplotlib.collections.Collection">
                                    <literal classes="xref py py-class">Collection</literal></reference>instance
to the axes.</paragraph>
                            <paragraph>Returns the collection.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_container()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_container',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_container" ids="matplotlib.axes.Axes.add_container" module="matplotlib.axes" names="matplotlib.axes.Axes.add_container">
                            <desc_name>add_container</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>container</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <literal classes="xref py py-class">Container</literal>
                                instance
to the axes.</paragraph>
                            <paragraph>Returns the collection.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_image()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_image',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_image" ids="matplotlib.axes.Axes.add_image" module="matplotlib.axes" names="matplotlib.axes.Axes.add_image">
                            <desc_name>add_image</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>image</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <reference internal="True" reftitle="matplotlib.image.AxesImage" refuri="image_api#matplotlib.image.AxesImage">
                                    <literal classes="xref py py-class">AxesImage</literal></reference>to the axes.</paragraph>
                            <paragraph>Returns the image.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_line()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_line',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_line" ids="matplotlib.axes.Axes.add_line" module="matplotlib.axes" names="matplotlib.axes.Axes.add_line">
                            <desc_name>add_line</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>line</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>to the list of plot
lines</paragraph>
                            <paragraph>Returns the line.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_patch()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_patch',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_patch" ids="matplotlib.axes.Axes.add_patch" module="matplotlib.axes" names="matplotlib.axes.Axes.add_patch">
                            <desc_name>add_patch</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>p</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                    <literal classes="xref py py-class">Patch</literal></reference>
                                <emphasis>p</emphasis>to the list of
axes patches; the clipbox will be set to the Axes clipping
box.  If the transform is not set, it will be set to

                                <literal classes="xref py py-attr">transData</literal>
                                .</paragraph>
                            <paragraph>Returns the patch.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'add_table()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.add_table',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.add_table" ids="matplotlib.axes.Axes.add_table" module="matplotlib.axes" names="matplotlib.axes.Axes.add_table">
                            <desc_name>add_table</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>tab</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a 
                                <literal classes="xref py py-class">Table</literal>
                                instance to the
list of axes tables</paragraph>
                            <paragraph>Returns the table.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'aname\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.aname',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.aname" ids="matplotlib.axes.Axes.aname" module="matplotlib.axes" names="matplotlib.axes.Axes.aname">
                            <desc_name>aname</desc_name>
                            <desc_annotation>= u'Artist'</desc_annotation>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'angle_spectrum()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.angle_spectrum',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.angle_spectrum" ids="matplotlib.axes.Axes.angle_spectrum" module="matplotlib.axes" names="matplotlib.axes.Axes.angle_spectrum">
                            <desc_name>angle_spectrum</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the angle spectrum.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">angle_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,
               pad_to=None, sides='default', **kwargs)</literal_block>
                            <paragraph>Compute the angle spectrum (wrapped phase spectrum) of 
                                <emphasis>x</emphasis>
                                .
Data is padded to a length of 
                                <emphasis>pad_to</emphasis>
                                and the windowing function

                                <emphasis>window</emphasis>
                                is applied to the signal.</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>x</emphasis>: 1-D array or sequence</term>
                                        <definition>
                                            <paragraph>Array or sequence containing the data</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>The number of points to which the data segment is padded when
performing the FFT.  While not increasing the actual resolution of
the spectrum (the minimum distance between resolvable peaks),
this can give more points in the plot, allowing for more
detail. This corresponds to the 
                                                <emphasis>n</emphasis>
                                                parameter in the call to fft().
The default is None, which sets 
                                                <emphasis>pad_to</emphasis>
                                                equal to the length of the
input signal (i.e. no padding).</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns the tuple (
                                <emphasis>spectrum</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                , 
                                <emphasis>line</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>spectrum</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The values for the angle spectrum in radians (real valued)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the elements in 
                                                <emphasis>spectrum</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>line</emphasis>: a 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>The line created by this function</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">magnitude_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">angle_spectrum()</literal>plots the magnitudes of the
corresponding frequencies.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">phase_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">phase_spectrum()</literal>plots the unwrapped version of this
function.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">specgram()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">specgram()</literal>can plot the angle spectrum of segments
within the signal in a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'annotate()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.annotate',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.annotate" ids="matplotlib.axes.Axes.annotate" module="matplotlib.axes" names="matplotlib.axes.Axes.annotate">
                            <desc_name>annotate</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Create an annotation: a piece of text referring to a data
point.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>s</strong>: string</paragraph>
                                        <block_quote>
                                            <paragraph>label</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xy</strong>: (x, y)</paragraph>
                                        <block_quote>
                                            <paragraph>position of element to annotate. See 
                                                <emphasis>xycoords</emphasis>
                                                to control what
coordinate system this value is interpretated in.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xytext</strong>: (x, y) , optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>position of the label 
                                                <literal classes="xref py py-obj">s</literal>
                                                . See 
                                                <emphasis>textcoords</emphasis>
                                                to control what
coordinate system this value is interpreted in.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xycoords</strong>: string, optional, default: &quot;data&quot;</paragraph>
                                        <block_quote>
                                            <paragraph>string that indicates what type of coordinates 
                                                <literal classes="xref py py-obj">xy</literal>
                                                is. Examples:
&quot;figure points&quot;, &quot;figure pixels&quot;, &quot;figure fraction&quot;, &quot;axes
points&quot;, .... See 
                                                <reference internal="True" reftitle="matplotlib.text.Annotation" refuri="text_api#matplotlib.text.Annotation">
                                                    <literal classes="xref py py-obj">matplotlib.text.Annotation</literal></reference>for more details.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>textcoords</strong>: string, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>string that indicates what type of coordinates 
                                                <literal classes="xref py py-obj">text</literal>
                                                is. Examples:
&quot;figure points&quot;, &quot;figure pixels&quot;, &quot;figure fraction&quot;, &quot;axes
points&quot;, .... See 
                                                <reference internal="True" reftitle="matplotlib.text.Annotation" refuri="text_api#matplotlib.text.Annotation">
                                                    <literal classes="xref py py-obj">matplotlib.text.Annotation</literal></reference>for more details.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>arrowprops</strong>: 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-obj">matplotlib.lines.Line2D</literal></reference>properties, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Dictionary of line properties for the arrow that connects
the annotation to the point. If the dictionnary has a key

                                                <literal classes="xref py py-obj">arrowstyle</literal>
                                                , a 
                                                <reference internal="True" reftitle="matplotlib.patches.FancyArrowPatch" refuri="patches_api#matplotlib.patches.FancyArrowPatch">
                                                    <literal classes="xref py py-obj">FancyArrowPatch</literal></reference>instance is created and drawn.  See

                                                <reference internal="True" reftitle="matplotlib.text.Annotation" refuri="text_api#matplotlib.text.Annotation">
                                                    <literal classes="xref py py-obj">matplotlib.text.Annotation</literal></reference>for more details on valid
options. Default is None.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>a</strong>: 
                                            <reference internal="True" reftitle="matplotlib.text.Annotation" refuri="text_api#matplotlib.text.Annotation">
                                                <literal classes="xref py py-obj">Annotation</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>
                                <emphasis>arrowprops</emphasis>, if not 
                                <emphasis>None</emphasis>
                                , is a dictionary of line properties
(see 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">matplotlib.lines.Line2D</literal></reference>) for the arrow that connects
annotation to the point.</paragraph>
                            <paragraph>If the dictionary has a key 
                                <emphasis>arrowstyle</emphasis>
                                , a

                                <reference internal="True" reftitle="matplotlib.patches.FancyArrowPatch" refuri="patches_api#matplotlib.patches.FancyArrowPatch">
                                    <literal classes="xref py py-obj">FancyArrowPatch</literal></reference>instance is created with
the given dictionary and is drawn. Otherwise, a

                                <reference internal="True" reftitle="matplotlib.patches.YAArrow" refuri="patches_api#matplotlib.patches.YAArrow">
                                    <literal classes="xref py py-obj">YAArrow</literal></reference>patch instance is created and
drawn. Valid keys for 
                                <reference internal="True" reftitle="matplotlib.patches.YAArrow" refuri="patches_api#matplotlib.patches.YAArrow">
                                    <literal classes="xref py py-obj">YAArrow</literal></reference>are:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="9"/>
                                    <colspec colwidth="59"/>
                                    <thead>
                                        <row>
                                            <entry>
                                                <paragraph>Key</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>Description</paragraph>
                                            </entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>width</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the width of the arrow in points</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>frac</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the fraction of the arrow length occupied by the head</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>headwidth</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the width of the base of the arrow head in points</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>shrink</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>oftentimes it is convenient to have the arrowtip
and base a bit away from the text and point being
annotated.  If 
                                                    <emphasis>d</emphasis>
                                                    is the distance between the text and
annotated point, shrink will shorten the arrow so the tip
and base are shink percent of the distance 
                                                    <emphasis>d</emphasis>
                                                    away from
the endpoints.  i.e., 
                                                    <literal>shrink=0.05 is 5%</literal></paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>?</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>any key for 
                                                    <literal classes="xref py py-class">matplotlib.patches.polygon</literal></paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <paragraph>Valid keys for 
                                <reference internal="True" reftitle="matplotlib.patches.FancyArrowPatch" refuri="patches_api#matplotlib.patches.FancyArrowPatch">
                                    <literal classes="xref py py-obj">FancyArrowPatch</literal></reference>are:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="15"/>
                                    <colspec colwidth="54"/>
                                    <thead>
                                        <row>
                                            <entry>
                                                <paragraph>Key</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>Description</paragraph>
                                            </entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>arrowstyle</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the arrow style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>connectionstyle</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>the connection style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>relpos</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is (0.5, 0.5)</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>patchA</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is bounding box of the text</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>patchB</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is None</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>shrinkA</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is 2 points</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>shrinkB</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is 2 points</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>mutation_scale</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is text size (in points)</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>mutation_aspect</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>default is 1.</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>?</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>any key for 
                                                    <reference internal="True" reftitle="matplotlib.patches.PathPatch" refuri="patches_api#matplotlib.patches.PathPatch">
                                                        <literal classes="xref py py-class">matplotlib.patches.PathPatch</literal></reference>
                                                </paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <paragraph>
                                <emphasis>xycoords</emphasis>and 
                                <emphasis>textcoords</emphasis>
                                are strings that indicate the
coordinates of 
                                <emphasis>xy</emphasis>
                                and 
                                <emphasis>xytext</emphasis>
                                , and may be one of the
following values:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="17"/>
                                    <colspec colwidth="51"/>
                                    <thead>
                                        <row>
                                            <entry>
                                                <paragraph>Property</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>Description</paragraph>
                                            </entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>'figure points'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>points from the lower left corner of the figure</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'figure pixels'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>pixels from the lower left corner of the figure</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'figure fraction'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>0,0 is lower left of figure and 1,1 is upper right</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'axes points'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>points from lower left corner of axes</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'axes pixels'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>pixels from lower left corner of axes</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'axes fraction'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>0,0 is lower left of axes and 1,1 is upper right</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'data'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>use the coordinate system of the object being
annotated (default)</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'offset points'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>Specify an offset (in points) from the 
                                                    <emphasis>xy</emphasis>
                                                    value</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'polar'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>you can specify 
                                                    <emphasis>theta</emphasis>
                                                    , 
                                                    <emphasis>r</emphasis>
                                                    for the annotation,
even in cartesian plots.  Note that if you
are using a polar axes, you do not need
to specify polar for the coordinate
system since that is the native &quot;data&quot; coordinate
system.</paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <paragraph>If a 'points' or 'pixels' option is specified, values will be
added to the bottom-left and if negative, values will be
subtracted from the top-right.  e.g.:</paragraph>
                            <literal_block xml:space="preserve"># 10 points to the right of the left border of the axes and
# 5 points below the top border
xy=(10,-5), xycoords='axes points'</literal_block>
                            <paragraph>You may use an instance of

                                <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                    <literal classes="xref py py-class">Transform</literal></reference>or

                                <reference internal="True" reftitle="matplotlib.artist.Artist" refuri="artist_api#matplotlib.artist.Artist">
                                    <literal classes="xref py py-class">Artist</literal></reference>. See

                                <reference internal="True" refuri="../users/annotations_guide#plotting-guide-annotation">
                                    <inline>Annotating Axes</inline></reference>for more details.</paragraph>
                            <paragraph>The 
                                <emphasis>annotation_clip</emphasis>
                                attribute controls the visibility of the
annotation when it goes outside the axes area. If 
                                <literal classes="xref py py-obj">True</literal>
                                , the
annotation will only be drawn when the 
                                <emphasis>xy</emphasis>
                                is inside the
axes. If 
                                <literal classes="xref py py-obj">False</literal>
                                , the annotation will always be drawn
regardless of its position.  The default is 
                                <literal classes="xref py py-obj">None</literal>
                                , which
behave as 
                                <literal classes="xref py py-obj">True</literal>
                                only if 
                                <emphasis>xycoords</emphasis>
                                is &quot;data&quot;.</paragraph>
                            <paragraph>Additional kwargs are 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-obj">Text</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="83"/>
                                        <colspec colwidth="192"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_backgroundcolor" refuri="text_api#matplotlib.text.Text.set_backgroundcolor">
                                                            <literal classes="xref py py-meth">backgroundcolor</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_bbox" refuri="text_api#matplotlib.text.Text.set_bbox">
                                                            <literal classes="xref py py-meth">bbox</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>FancyBboxPatch prop dict</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_box" refuri="text_api#matplotlib.text.Text.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_on" refuri="text_api#matplotlib.text.Text.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_path" refuri="text_api#matplotlib.text.Text.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_color" refuri="text_api#matplotlib.text.Text.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_family" refuri="text_api#matplotlib.text.Text.set_family">
                                                            <literal classes="xref py py-meth">family</literal>
                                                        </reference>or fontfamily or fontname or name</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' | 'monospace' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_fontproperties" refuri="text_api#matplotlib.text.Text.set_fontproperties">
                                                            <literal classes="xref py py-meth">fontproperties</literal>
                                                        </reference>or font_properties</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.font_manager.FontProperties" refuri="font_manager_api#matplotlib.font_manager.FontProperties">
                                                            <literal classes="xref py py-class">matplotlib.font_manager.FontProperties</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_horizontalalignment" refuri="text_api#matplotlib.text.Text.set_horizontalalignment">
                                                            <literal classes="xref py py-meth">horizontalalignment</literal>
                                                        </reference>or ha</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'right' | 'left' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_linespacing" refuri="text_api#matplotlib.text.Text.set_linespacing">
                                                            <literal classes="xref py py-meth">linespacing</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (multiple of font size)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_multialignment" refuri="text_api#matplotlib.text.Text.set_multialignment">
                                                            <literal classes="xref py py-meth">multialignment</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['left' | 'right' | 'center' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_position" refuri="text_api#matplotlib.text.Text.set_position">
                                                            <literal classes="xref py py-meth">position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>(x,y)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation" refuri="text_api#matplotlib.text.Text.set_rotation">
                                                            <literal classes="xref py py-meth">rotation</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ angle in degrees | 'vertical' | 'horizontal' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation_mode" refuri="text_api#matplotlib.text.Text.set_rotation_mode">
                                                            <literal classes="xref py py-meth">rotation_mode</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_size" refuri="text_api#matplotlib.text.Text.set_size">
                                                            <literal classes="xref py py-meth">size</literal>
                                                        </reference>or fontsize</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[size in points | 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_stretch" refuri="text_api#matplotlib.text.Text.set_stretch">
                                                            <literal classes="xref py py-meth">stretch</literal>
                                                        </reference>or fontstretch</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_style" refuri="text_api#matplotlib.text.Text.set_style">
                                                            <literal classes="xref py py-meth">style</literal>
                                                        </reference>or fontstyle</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'italic' | 'oblique']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_text" refuri="text_api#matplotlib.text.Text.set_text">
                                                            <literal classes="xref py py-meth">text</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_usetex" refuri="text_api#matplotlib.text.Text.set_usetex">
                                                            <literal classes="xref py py-meth">usetex</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_variant" refuri="text_api#matplotlib.text.Text.set_variant">
                                                            <literal classes="xref py py-meth">variant</literal>
                                                        </reference>or fontvariant</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'small-caps' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_verticalalignment" refuri="text_api#matplotlib.text.Text.set_verticalalignment">
                                                            <literal classes="xref py py-meth">verticalalignment</literal>
                                                        </reference>or va or ma</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'top' | 'bottom' | 'baseline' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_weight" refuri="text_api#matplotlib.text.Text.set_weight">
                                                            <literal classes="xref py py-meth">weight</literal>
                                                        </reference>or fontweight</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultralight' | 'light' | 'normal' | 'regular' | 'book' | 'medium' | 'roman' | 'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' | 'extra bold' | 'black' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_wrap" refuri="text_api#matplotlib.text.Text.set_wrap">
                                                            <literal classes="xref py py-meth">wrap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_x" refuri="text_api#matplotlib.text.Text.set_x">
                                                            <literal classes="xref py py-meth">x</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_y" refuri="text_api#matplotlib.text.Text.set_y">
                                                            <literal classes="xref py py-meth">y</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'apply_aspect()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.apply_aspect',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.apply_aspect" ids="matplotlib.axes.Axes.apply_aspect" module="matplotlib.axes" names="matplotlib.axes.Axes.apply_aspect">
                            <desc_name>apply_aspect</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>position=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Use 
                                <literal classes="xref py py-meth">_aspect()</literal>
                                and 
                                <literal classes="xref py py-meth">_adjustable()</literal>
                                to modify the
axes box or the view limits.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'arrow()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.arrow',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.arrow" ids="matplotlib.axes.Axes.arrow" module="matplotlib.axes" names="matplotlib.axes.Axes.arrow">
                            <desc_name>arrow</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                                <desc_parameter>dx</desc_parameter>
                                <desc_parameter>dy</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add an arrow to the axes.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">arrow(x, y, dx, dy, **kwargs)</literal_block>
                            <paragraph>Draws arrow on specified axis from (
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                ) to (
                                <emphasis>x</emphasis>
                                + 
                                <emphasis>dx</emphasis>
                                ,

                                <emphasis>y</emphasis>
                                + 
                                <emphasis>dy</emphasis>
                                ). Uses FancyArrow patch to construct the arrow.</paragraph>
                            <paragraph>The resulting arrow is affected by the axes aspect ratio and limits.
This may produce an arrow whose head is not square with its stem. To
create an arrow whose head is square with its stem, use

                                <literal classes="xref py py-meth">annotate()</literal>
                                for example:</paragraph>
                            <literal_block xml:space="preserve">ax.annotate(&quot;&quot;, xy=(0.5, 0.5), xytext=(0, 0),
    arrowprops=dict(arrowstyle=&quot;-&gt;&quot;))</literal_block>
                            <paragraph>Optional kwargs control the arrow construction and properties:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>Constructor arguments</term>
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>width</emphasis>: float (default: 0.001)</term>
                                                <definition>
                                                    <paragraph>width of full arrow tail</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>length_includes_head</emphasis>: [True | False] (default: False)</term>
                                                <definition>
                                                    <paragraph>True if head is to be counted in calculating the length.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>head_width</emphasis>: float or None (default: 3*width)</term>
                                                <definition>
                                                    <paragraph>total width of the full arrow head</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>head_length</emphasis>: float or None (default: 1.5 * head_width)</term>
                                                <definition>
                                                    <paragraph>length of arrow head</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>shape</emphasis>: ['full', 'left', 'right'] (default: 'full')</term>
                                                <definition>
                                                    <paragraph>draw the left-half, right-half, or full arrow</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>overhang</emphasis>: float (default: 0)</term>
                                                <definition>
                                                    <paragraph>fraction that the arrow is swept back (0 overhang means
triangular shape). Can be negative or greater than one.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>head_starts_at_zero</emphasis>: [True | False] (default: False)</term>
                                                <definition>
                                                    <paragraph>if True, the head starts being drawn at coordinate 0
instead of ending at coordinate 0.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Other valid kwargs (inherited from 
                                <literal classes="xref py py-class">Patch</literal>
                                ) are:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="68"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_alpha" refuri="patches_api#matplotlib.patches.Patch.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_antialiased" refuri="patches_api#matplotlib.patches.Patch.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]  or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_capstyle" refuri="patches_api#matplotlib.patches.Patch.set_capstyle">
                                                            <literal classes="xref py py-meth">capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_color" refuri="patches_api#matplotlib.patches.Patch.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_edgecolor" refuri="patches_api#matplotlib.patches.Patch.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or ec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_facecolor" refuri="patches_api#matplotlib.patches.Patch.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or fc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_fill" refuri="patches_api#matplotlib.patches.Patch.set_fill">
                                                            <literal classes="xref py py-meth">fill</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_hatch" refuri="patches_api#matplotlib.patches.Patch.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_joinstyle" refuri="patches_api#matplotlib.patches.Patch.set_joinstyle">
                                                            <literal classes="xref py py-meth">joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linestyle" refuri="patches_api#matplotlib.patches.Patch.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linewidth" refuri="patches_api#matplotlib.patches.Patch.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'autoscale()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.autoscale',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.autoscale" ids="matplotlib.axes.Axes.autoscale" module="matplotlib.axes" names="matplotlib.axes.Axes.autoscale">
                            <desc_name>autoscale</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>enable=True</desc_parameter>
                                <desc_parameter>axis=u'both'</desc_parameter>
                                <desc_parameter>tight=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Autoscale the axis view to the data (toggle).</paragraph>
                            <paragraph>Convenience method for simple axis view autoscaling.
It turns autoscaling on or off, and then,
if autoscaling for either axis is on, it performs
the autoscaling on the specified axis or axes.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>enable</emphasis>: [True | False | None]</term>
                                    <definition>
                                        <paragraph>True (default) turns autoscaling on, False turns it off.
None leaves the autoscaling state unchanged.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>axis</emphasis>: ['x' | 'y' | 'both']</term>
                                    <definition>
                                        <paragraph>which axis to operate on; default is 'both'</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>tight</emphasis>: [True | False | None]</term>
                                    <definition>
                                        <paragraph>If True, set view limits to data limits;
if False, let the locator and margins expand the view limits;
if None, use tight scaling if the only artist is an image,
otherwise treat 
                                            <emphasis>tight</emphasis>
                                            as False.
The 
                                            <emphasis>tight</emphasis>
                                            setting is retained for future autoscaling
until it is explicitly changed.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns None.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'autoscale_view()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.autoscale_view',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.autoscale_view" ids="matplotlib.axes.Axes.autoscale_view" module="matplotlib.axes" names="matplotlib.axes.Axes.autoscale_view">
                            <desc_name>autoscale_view</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>tight=None</desc_parameter>
                                <desc_parameter>scalex=True</desc_parameter>
                                <desc_parameter>scaley=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Autoscale the view limits using the data limits. You can
selectively autoscale only a single axis, e.g., the xaxis by
setting 
                                <emphasis>scaley</emphasis>
                                to 
                                <emphasis>False</emphasis>
                                .  The autoscaling preserves any
axis direction reversal that has already been done.</paragraph>
                            <paragraph>The data limits are not updated automatically when artist data are
changed after the artist has been added to an Axes instance.  In that
case, use 
                                <reference internal="True" refid="matplotlib.axes.Axes.relim" reftitle="matplotlib.axes.Axes.relim">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.relim()</literal></reference>prior to calling
autoscale_view.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axes\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.axes',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.axes" ids="matplotlib.axes.Axes.axes" module="matplotlib.axes" names="matplotlib.axes.Axes.axes">
                            <desc_name>axes</desc_name>
                        </desc_signature>
                        <desc_content>
                            <paragraph>The 
                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-class">Axes</literal></reference>instance the artist
resides in, or 
                                <emphasis>None</emphasis>
                                .</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axhline()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.axhline',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.axhline" ids="matplotlib.axes.Axes.axhline" module="matplotlib.axes" names="matplotlib.axes.Axes.axhline">
                            <desc_name>axhline</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>y=0</desc_parameter>
                                <desc_parameter>xmin=0</desc_parameter>
                                <desc_parameter>xmax=1</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a horizontal line across the axis.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>y</strong>: scalar, optional, default: 0</paragraph>
                                        <block_quote>
                                            <paragraph>y position in data coordinates of the horizontal line.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xmin</strong>: scalar, optional, default: 0</paragraph>
                                        <block_quote>
                                            <paragraph>Should be between 0 and 1, 0 being the far left of the plot, 1 the
far right of the plot.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xmax</strong>: scalar, optional, default: 1</paragraph>
                                        <block_quote>
                                            <paragraph>Should be between 0 and 1, 0 being the far left of the plot, 1 the
far right of the plot.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal>
                                            </reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">axhspan</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for example plot and source code</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>kwargs are passed to 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>and can be used
to control the line properties.</paragraph>
                            <rubric>Examples</rubric>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>draw a thick red hline at 'y' = 0 that spans the xrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axhline(linewidth=4, color='r')</literal_block>
                                </list_item>
                                <list_item>
                                    <paragraph>draw a default hline at 'y' = 1 that spans the xrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axhline(y=1)</literal_block>
                                </list_item>
                                <list_item>
                                    <paragraph>draw a default hline at 'y' = .5 that spans the middle half of
the xrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axhline(y=.5, xmin=0.25, xmax=0.75)</literal_block>
                                </list_item>
                            </bullet_list>
                            <paragraph>Valid kwargs are 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties,
with the exception of 'transform':</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axhspan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.axhspan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.axhspan" ids="matplotlib.axes.Axes.axhspan" module="matplotlib.axes" names="matplotlib.axes.Axes.axhspan">
                            <desc_name>axhspan</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ymin</desc_parameter>
                                <desc_parameter>ymax</desc_parameter>
                                <desc_parameter>xmin=0</desc_parameter>
                                <desc_parameter>xmax=1</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a horizontal span (rectangle) across the axis.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)</literal_block>
                            <paragraph>
                                <emphasis>y</emphasis>coords are in data units and 
                                <emphasis>x</emphasis>
                                coords are in axes (relative
0-1) units.</paragraph>
                            <paragraph>Draw a horizontal span (rectangle) from 
                                <emphasis>ymin</emphasis>
                                to 
                                <emphasis>ymax</emphasis>
                                .
With the default values of 
                                <emphasis>xmin</emphasis>
                                = 0 and 
                                <emphasis>xmax</emphasis>
                                = 1, this
always spans the xrange, regardless of the xlim settings, even
if you change them, e.g., with the 
                                <literal classes="xref py py-meth">set_xlim()</literal>
                                command.
That is, the horizontal extent is in axes coords: 0=left,
0.5=middle, 1.0=right but the 
                                <emphasis>y</emphasis>
                                location is in data
coordinates.</paragraph>
                            <paragraph>Return value is a 
                                <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                                    <literal classes="xref py py-class">matplotlib.patches.Polygon</literal></reference>instance.</paragraph>
                            <paragraph>Examples:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>draw a gray rectangle from 
                                        <emphasis>y</emphasis>
                                        = 0.25-0.75 that spans the
horizontal extent of the axes:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axhspan(0.25, 0.75, facecolor='0.5', alpha=0.5)</literal_block>
                                </list_item>
                            </bullet_list>
                            <paragraph>Valid kwargs are 
                                <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                                    <literal classes="xref py py-class">Polygon</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="68"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_alpha" refuri="patches_api#matplotlib.patches.Patch.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_antialiased" refuri="patches_api#matplotlib.patches.Patch.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]  or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_capstyle" refuri="patches_api#matplotlib.patches.Patch.set_capstyle">
                                                            <literal classes="xref py py-meth">capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_color" refuri="patches_api#matplotlib.patches.Patch.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_edgecolor" refuri="patches_api#matplotlib.patches.Patch.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or ec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_facecolor" refuri="patches_api#matplotlib.patches.Patch.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or fc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_fill" refuri="patches_api#matplotlib.patches.Patch.set_fill">
                                                            <literal classes="xref py py-meth">fill</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_hatch" refuri="patches_api#matplotlib.patches.Patch.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_joinstyle" refuri="patches_api#matplotlib.patches.Patch.set_joinstyle">
                                                            <literal classes="xref py py-meth">joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linestyle" refuri="patches_api#matplotlib.patches.Patch.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linewidth" refuri="patches_api#matplotlib.patches.Patch.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axis()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.axis',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.axis" ids="matplotlib.axes.Axes.axis" module="matplotlib.axes" names="matplotlib.axes.Axes.axis">
                            <desc_name>axis</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*v</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set axis properties.</paragraph>
                            <paragraph>Valid signatures:</paragraph>
                            <literal_block xml:space="preserve">xmin, xmax, ymin, ymax = axis()
xmin, xmax, ymin, ymax = axis(list_arg)
xmin, xmax, ymin, ymax = axis(string_arg)
xmin, xmax, ymin, ymax = axis(**kwargs)</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>v</strong>: list of float or {'on', 'off', 'equal', 'tight', 'scaled',            'normal', 'auto', 'image', 'square'}</paragraph>
                                        <block_quote>
                                            <paragraph>Optional positional argument</paragraph>
                                            <paragraph>Axis data limits set from a list; or a command relating to axes:</paragraph>
                                            <block_quote>
                                                <table>
                                                    <tgroup cols="2">
                                                        <colspec colwidth="10"/>
                                                        <colspec colwidth="103"/>
                                                        <thead>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>Value</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Description</paragraph>
                                                                </entry>
                                                            </row>
                                                        </thead>
                                                        <tbody>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'on'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Toggle axis lines and labels on</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'off'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Toggle axis lines and labels off</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'equal'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Equal scaling by changing limits</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'scaled'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Equal scaling by changing box dimensions</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'tight'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Limits set such that all data is shown</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'auto'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Automatic scaling, fill rectangle with data</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'normal'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Same as 'auto'; deprecated</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'image'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>'scaled' with axis limits equal to data limits</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'square'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Square plot; similar to 'scaled', but initially                           forcing xmax-xmin = ymax-ymin</paragraph>
                                                                </entry>
                                                            </row>
                                                        </tbody>
                                                    </tgroup>
                                                </table>
                                            </block_quote>
                                        </block_quote>
                                        <paragraph>
                                            <strong>emit</strong>: bool, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Passed to set_{x,y}lim functions, if observers
are notified of axis limit change</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xmin, ymin, xmax, ymax</strong>: float, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The axis limits to be set</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>xmin, xmax, ymin, ymax</strong>: float</paragraph>
                                        <block_quote>
                                            <paragraph>The axis limits</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axvline()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.axvline',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.axvline" ids="matplotlib.axes.Axes.axvline" module="matplotlib.axes" names="matplotlib.axes.Axes.axvline">
                            <desc_name>axvline</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x=0</desc_parameter>
                                <desc_parameter>ymin=0</desc_parameter>
                                <desc_parameter>ymax=1</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a vertical line across the axes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: scalar, optional, default: 0</paragraph>
                                        <block_quote>
                                            <paragraph>x position in data coordinates of the vertical line.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ymin</strong>: scalar, optional, default: 0</paragraph>
                                        <block_quote>
                                            <paragraph>Should be between 0 and 1, 0 being the bottom of the plot, 1 the
top of the plot.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ymax</strong>: scalar, optional, default: 1</paragraph>
                                        <block_quote>
                                            <paragraph>Should be between 0 and 1, 0 being the bottom of the plot, 1 the
top of the plot.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal>
                                            </reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">axhspan</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for example plot and source code</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Examples</rubric>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>draw a thick red vline at 
                                        <emphasis>x</emphasis>
                                        = 0 that spans the yrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axvline(linewidth=4, color='r')</literal_block>
                                </list_item>
                                <list_item>
                                    <paragraph>draw a default vline at 
                                        <emphasis>x</emphasis>
                                        = 1 that spans the yrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axvline(x=1)</literal_block>
                                </list_item>
                                <list_item>
                                    <paragraph>draw a default vline at 
                                        <emphasis>x</emphasis>
                                        = .5 that spans the middle half of
the yrange:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axvline(x=.5, ymin=0.25, ymax=0.75)</literal_block>
                                </list_item>
                            </bullet_list>
                            <paragraph>Valid kwargs are 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties,
with the exception of 'transform':</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'axvspan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.axvspan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.axvspan" ids="matplotlib.axes.Axes.axvspan" module="matplotlib.axes" names="matplotlib.axes.Axes.axvspan">
                            <desc_name>axvspan</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>xmin</desc_parameter>
                                <desc_parameter>xmax</desc_parameter>
                                <desc_parameter>ymin=0</desc_parameter>
                                <desc_parameter>ymax=1</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a vertical span (rectangle) across the axes.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)</literal_block>
                            <paragraph>
                                <emphasis>x</emphasis>coords are in data units and 
                                <emphasis>y</emphasis>
                                coords are in axes (relative
0-1) units.</paragraph>
                            <paragraph>Draw a vertical span (rectangle) from 
                                <emphasis>xmin</emphasis>
                                to 
                                <emphasis>xmax</emphasis>
                                .  With
the default values of 
                                <emphasis>ymin</emphasis>
                                = 0 and 
                                <emphasis>ymax</emphasis>
                                = 1, this always
spans the yrange, regardless of the ylim settings, even if you
change them, e.g., with the 
                                <literal classes="xref py py-meth">set_ylim()</literal>
                                command.  That is,
the vertical extent is in axes coords: 0=bottom, 0.5=middle,
1.0=top but the 
                                <emphasis>y</emphasis>
                                location is in data coordinates.</paragraph>
                            <paragraph>Return value is the 
                                <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                                    <literal classes="xref py py-class">matplotlib.patches.Polygon</literal></reference>instance.</paragraph>
                            <paragraph>Examples:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>draw a vertical green translucent rectangle from x=1.25 to 1.55 that
spans the yrange of the axes:</paragraph>
                                    <literal_block xml:space="preserve">&gt;&gt;&gt; axvspan(1.25, 1.55, facecolor='g', alpha=0.5)</literal_block>
                                </list_item>
                            </bullet_list>
                            <paragraph>Valid kwargs are 
                                <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                                    <literal classes="xref py py-class">Polygon</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="68"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_alpha" refuri="patches_api#matplotlib.patches.Patch.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_antialiased" refuri="patches_api#matplotlib.patches.Patch.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]  or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_capstyle" refuri="patches_api#matplotlib.patches.Patch.set_capstyle">
                                                            <literal classes="xref py py-meth">capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_color" refuri="patches_api#matplotlib.patches.Patch.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_edgecolor" refuri="patches_api#matplotlib.patches.Patch.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or ec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_facecolor" refuri="patches_api#matplotlib.patches.Patch.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or fc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_fill" refuri="patches_api#matplotlib.patches.Patch.set_fill">
                                                            <literal classes="xref py py-meth">fill</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_hatch" refuri="patches_api#matplotlib.patches.Patch.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_joinstyle" refuri="patches_api#matplotlib.patches.Patch.set_joinstyle">
                                                            <literal classes="xref py py-meth">joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linestyle" refuri="patches_api#matplotlib.patches.Patch.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linewidth" refuri="patches_api#matplotlib.patches.Patch.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-meth">axhspan()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for example plot and source code</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bar()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.bar',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.bar" ids="matplotlib.axes.Axes.bar" module="matplotlib.axes" names="matplotlib.axes.Axes.bar">
                            <desc_name>bar</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a bar plot.</paragraph>
                            <paragraph>Make a bar plot with rectangles bounded by:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">left</literal>, 
                                            <literal classes="xref py py-obj">left</literal>
                                            + 
                                            <literal classes="xref py py-obj">width</literal>
                                            , 
                                            <literal classes="xref py py-obj">bottom</literal>
                                            , 
                                            <literal classes="xref py py-obj">bottom</literal>
                                            + 
                                            <literal classes="xref py py-obj">height</literal></term>
                                        <definition>
                                            <paragraph>(left, right, bottom and top edges)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>left</strong>: sequence of scalars</paragraph>
                                        <block_quote>
                                            <paragraph>the x coordinates of the left sides of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>height</strong>: sequence of scalars</paragraph>
                                        <block_quote>
                                            <paragraph>the heights of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>width</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the width(s) of the bars
default: 0.8</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bottom</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the y coordinate(s) of the bars
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>color</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the colors of the bar faces</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>edgecolor</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the colors of the bar edges</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>linewidth</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>width of bar edge(s). If None, use default
linewidth; If 0, don't draw edges.
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>tick_label</strong>: string or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the tick labels of the bars
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xerr</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>if not None, will be used to generate errorbar(s) on the bar chart
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>yerr</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>if not None, will be used to generate errorbar(s) on the bar chart
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ecolor</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>specifies the color of errorbar(s)
default: None</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>capsize</strong>: scalar, optional</paragraph>
                                        <block_quote>
                                            <paragraph>determines the length in points of the error bar caps
default: None, which will take the value from the

                                                <literal>errorbar.capsize</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>error_kw</strong>: dict, optional</paragraph>
                                        <block_quote>
                                            <paragraph>dictionary of kwargs to be passed to errorbar method. 
                                                <emphasis>ecolor</emphasis>
                                                and

                                                <emphasis>capsize</emphasis>
                                                may be specified here rather than as independent kwargs.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>align</strong>: {'edge',  'center'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 'edge', aligns bars by their left edges (for vertical bars) and
by their bottom edges (for horizontal bars). If 'center', interpret
the 
                                                <literal classes="xref py py-obj">left</literal>
                                                argument as the coordinates of the centers of the bars.
To align on the align bars on the right edge pass a negative

                                                <literal classes="xref py py-obj">width</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>orientation</strong>: {'vertical',  'horizontal'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The orientation of the bars.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>log</strong>: boolean, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If true, sets the axis to be log scale.
default: False</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>bars</strong>: matplotlib.container.BarContainer</paragraph>
                                        <block_quote>
                                            <paragraph>Container with all of the bars + errorbars</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">barh</literal>
                                        </term>
                                        <definition>
                                            <paragraph>Plot a horizontal bar plot.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'edgecolor', 'bottom', 'color', 'xerr', 'ecolor', 'tick_label', 'height', 'width', 'linewidth', 'yerr', 'left'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <paragraph>
                                <strong>Example:</strong>A stacked bar chart.</paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'barbs()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.barbs',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.barbs" ids="matplotlib.axes.Axes.barbs" module="matplotlib.axes" names="matplotlib.axes.Axes.barbs">
                            <desc_name>barbs</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a 2-D field of barbs.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">barb(U, V, **kw)
barb(U, V, C, **kw)
barb(X, Y, U, V, **kw)
barb(X, Y, U, V, C, **kw)</literal_block>
                            <paragraph>Arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>X</emphasis>, 
                                            <emphasis>Y</emphasis>
                                            :</term>
                                        <definition>
                                            <paragraph>The x and y coordinates of the barb locations
(default is head of barb; see 
                                                <emphasis>pivot</emphasis>
                                                kwarg)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>U</emphasis>, 
                                            <emphasis>V</emphasis>
                                            :</term>
                                        <definition>
                                            <paragraph>Give the x and y components of the barb shaft</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>C</emphasis>:</term>
                                        <definition>
                                            <paragraph>An optional array used to map colors to the barbs</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>All arguments may be 1-D or 2-D arrays or sequences. If 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                are absent, they will be generated as a uniform grid.  If 
                                <emphasis>U</emphasis>
                                and 
                                <emphasis>V</emphasis>
                                are 2-D arrays but 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                are 1-D, and if 
                                <literal>len(X)</literal>
                                and 
                                <literal>len(Y)</literal>
                                match the column and row dimensions of 
                                <emphasis>U</emphasis>
                                , then 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                will be
expanded with 
                                <literal classes="xref py py-func">numpy.meshgrid()</literal>
                                .</paragraph>
                            <paragraph>
                                <emphasis>U</emphasis>, 
                                <emphasis>V</emphasis>
                                , 
                                <emphasis>C</emphasis>
                                may be masked arrays, but masked 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                are not
supported at present.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>length</emphasis>:</term>
                                        <definition>
                                            <paragraph>Length of the barb in points; the other parts of the barb
are scaled against this.
Default is 9</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>pivot</emphasis>: [ 'tip' | 'middle' ]</term>
                                        <definition>
                                            <paragraph>The part of the arrow that is at the grid point; the arrow rotates
about this point, hence the name 
                                                <emphasis>pivot</emphasis>
                                                .  Default is 'tip'</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>barbcolor</emphasis>: [ color | color sequence ]</term>
                                        <definition>
                                            <paragraph>Specifies the color all parts of the barb except any flags.  This
parameter is analagous to the 
                                                <emphasis>edgecolor</emphasis>
                                                parameter for polygons,
which can be used instead. However this parameter will override
facecolor.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>flagcolor</emphasis>: [ color | color sequence ]</term>
                                        <definition>
                                            <paragraph>Specifies the color of any flags on the barb.  This parameter is
analagous to the 
                                                <emphasis>facecolor</emphasis>
                                                parameter for polygons, which can be
used instead. However this parameter will override facecolor.  If
this is not set (and 
                                                <emphasis>C</emphasis>
                                                has not either) then 
                                                <emphasis>flagcolor</emphasis>
                                                will be
set to match 
                                                <emphasis>barbcolor</emphasis>
                                                so that the barb has a uniform color. If

                                                <emphasis>C</emphasis>
                                                has been set, 
                                                <emphasis>flagcolor</emphasis>
                                                has no effect.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sizes</emphasis>:</term>
                                        <definition>
                                            <paragraph>A dictionary of coefficients specifying the ratio of a given
feature to the length of the barb. Only those values one wishes to
override need to be included.  These features include:</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>'spacing' - space between features (flags, full/half barbs)</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'height' - height (distance from shaft to top) of a flag or
full barb</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'width' - width of a flag, twice the width of a full barb</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'emptybarb' - radius of the circle used for low magnitudes</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fill_empty</emphasis>:</term>
                                        <definition>
                                            <paragraph>A flag on whether the empty barbs (circles) that are drawn should
be filled with the flag color.  If they are not filled, they will
be drawn such that no color is applied to the center.  Default is
False</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>rounding</emphasis>:</term>
                                        <definition>
                                            <paragraph>A flag to indicate whether the vector magnitude should be rounded
when allocating barb components.  If True, the magnitude is
rounded to the nearest multiple of the half-barb increment.  If
False, the magnitude is simply truncated to the next lowest
multiple.  Default is True</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>barb_increments</emphasis>:</term>
                                        <definition>
                                            <paragraph>A dictionary of increments specifying values to associate with
different parts of the barb. Only those values one wishes to
override need to be included.</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>'half' - half barbs (Default is 5)</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'full' - full barbs (Default is 10)</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'flag' - flags (default is 50)</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>flip_barb</emphasis>:</term>
                                        <definition>
                                            <paragraph>Either a single boolean flag or an array of booleans.  Single
boolean indicates whether the lines and flags should point
opposite to normal for all barbs.  An array (which should be the
same size as the other data arrays) indicates whether to flip for
each individual barb.  Normal behavior is for the barbs and lines
to point right (comes from wind barbs having these features point
towards low pressure in the Northern Hemisphere.)  Default is
False</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Barbs are traditionally used in meteorology as a way to plot the speed
and direction of wind observations, but can technically be used to
plot any two dimensional vector quantity.  As opposed to arrows, which
give vector magnitude by the length of the arrow, the barbs give more
quantitative information about the vector magnitude by putting slanted
lines or a triangle for various increments in magnitude, as show
schematically below:</paragraph>
                            <literal_block xml:space="preserve">:     /\    \
:    /  \    \
:   /    \    \    \
:  /      \    \    \
: ------------------------------</literal_block>
                            <comment xml:space="preserve">note the double \ at the end of each line to make the figure</comment>
                            <comment xml:space="preserve">render correctly</comment>
                            <paragraph>The largest increment is given by a triangle (or &quot;flag&quot;). After those
come full lines (barbs). The smallest increment is a half line.  There
is only, of course, ever at most 1 half line.  If the magnitude is
small and only needs a single half-line and no full lines or
triangles, the half-line is offset from the end of the barb so that it
can be easily distinguished from barbs with a single full line.  The
magnitude for the barb shown above would nominally be 65, using the
standard increments of 50, 10, and 5.</paragraph>
                            <paragraph>linewidths and edgecolors can be used to customize the barb.
Additional 
                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>keyword
arguments:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'barh()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.barh',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.barh" ids="matplotlib.axes.Axes.barh" module="matplotlib.axes" names="matplotlib.axes.Axes.barh">
                            <desc_name>barh</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>bottom</desc_parameter>
                                <desc_parameter>width</desc_parameter>
                                <desc_parameter>height=0.8</desc_parameter>
                                <desc_parameter>left=None</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a horizontal bar plot.</paragraph>
                            <paragraph>Make a horizontal bar plot with rectangles bounded by:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">left</literal>, 
                                            <literal classes="xref py py-obj">left</literal>
                                            + 
                                            <literal classes="xref py py-obj">width</literal>
                                            , 
                                            <literal classes="xref py py-obj">bottom</literal>
                                            , 
                                            <literal classes="xref py py-obj">bottom</literal>
                                            + 
                                            <literal classes="xref py py-obj">height</literal></term>
                                        <definition>
                                            <paragraph>(left, right, bottom and top edges)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>
                                <literal classes="xref py py-obj">bottom</literal>, 
                                <literal classes="xref py py-obj">width</literal>
                                , 
                                <literal classes="xref py py-obj">height</literal>
                                , and 
                                <literal classes="xref py py-obj">left</literal>
                                can be either scalars
or sequences</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>bottom</strong>: scalar or array-like</paragraph>
                                        <block_quote>
                                            <paragraph>the y coordinate(s) of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>width</strong>: scalar or array-like</paragraph>
                                        <block_quote>
                                            <paragraph>the width(s) of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>height</strong>: sequence of scalars, optional, default: 0.8</paragraph>
                                        <block_quote>
                                            <paragraph>the heights of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>left</strong>: sequence of scalars</paragraph>
                                        <block_quote>
                                            <paragraph>the x coordinates of the left sides of the bars</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <reference internal="True" reftitle="matplotlib.patches.Rectangle" refuri="patches_api#matplotlib.patches.Rectangle">
                                                <literal classes="xref py py-obj">matplotlib.patches.Rectangle</literal>
                                            </reference>instances.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>color</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the colors of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>edgecolor</strong>: scalar or array-like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>the colors of the bar edges</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>linewidth</strong>: scalar or array-like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>width of bar edge(s). If None, use default
linewidth; If 0, don't draw edges.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>tick_label</strong>: string or array-like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>the tick labels of the bars</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xerr</strong>: scalar or array-like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>if not None, will be used to generate errorbar(s) on the bar chart</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>yerr</strong>: scalar or array-like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>if not None, will be used to generate errorbar(s) on the bar chart</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ecolor</strong>: scalar or array-like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>specifies the color of errorbar(s)</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>capsize</strong>: scalar, optional</paragraph>
                                        <block_quote>
                                            <paragraph>determines the length in points of the error bar caps
default: None, which will take the value from the

                                                <literal>errorbar.capsize</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>error_kw :</strong>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>dictionary of kwargs to be passed to errorbar method. 
                                                <literal classes="xref py py-obj">ecolor</literal>
                                                and

                                                <literal classes="xref py py-obj">capsize</literal>
                                                may be specified here rather than as independent kwargs.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>align</strong>: ['edge' | 'center'], optional, default: 'edge'</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">edge</literal>
                                                , aligns bars by their left edges (for vertical bars) and
by their bottom edges (for horizontal bars). If 
                                                <literal classes="xref py py-obj">center</literal>
                                                , interpret
the 
                                                <literal classes="xref py py-obj">left</literal>
                                                argument as the coordinates of the centers of the bars.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>log</strong>: boolean, optional, default: False</paragraph>
                                        <block_quote>
                                            <paragraph>If true, sets the axis to be log scale</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">bar</literal>
                                        </term>
                                        <definition>
                                            <paragraph>Plot a vertical bar plot.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>The optional arguments 
                                <literal classes="xref py py-obj">color</literal>
                                , 
                                <literal classes="xref py py-obj">edgecolor</literal>
                                , 
                                <literal classes="xref py py-obj">linewidth</literal>
                                ,

                                <literal classes="xref py py-obj">xerr</literal>
                                , and 
                                <literal classes="xref py py-obj">yerr</literal>
                                can be either scalars or sequences of
length equal to the number of bars.  This enables you to use
bar as the basis for stacked bar charts, or candlestick plots.
Detail: 
                                <literal classes="xref py py-obj">xerr</literal>
                                and 
                                <literal classes="xref py py-obj">yerr</literal>
                                are passed directly to

                                <literal classes="xref py py-meth">errorbar()</literal>
                                , so they can also have shape 2xN for
independent specification of lower and upper errors.</paragraph>
                            <paragraph>Other optional kwargs:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="68"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_alpha" refuri="patches_api#matplotlib.patches.Patch.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_antialiased" refuri="patches_api#matplotlib.patches.Patch.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]  or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_capstyle" refuri="patches_api#matplotlib.patches.Patch.set_capstyle">
                                                            <literal classes="xref py py-meth">capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_color" refuri="patches_api#matplotlib.patches.Patch.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_edgecolor" refuri="patches_api#matplotlib.patches.Patch.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or ec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_facecolor" refuri="patches_api#matplotlib.patches.Patch.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or fc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_fill" refuri="patches_api#matplotlib.patches.Patch.set_fill">
                                                            <literal classes="xref py py-meth">fill</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_hatch" refuri="patches_api#matplotlib.patches.Patch.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_joinstyle" refuri="patches_api#matplotlib.patches.Patch.set_joinstyle">
                                                            <literal classes="xref py py-meth">joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linestyle" refuri="patches_api#matplotlib.patches.Patch.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linewidth" refuri="patches_api#matplotlib.patches.Patch.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'boxplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.boxplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.boxplot" ids="matplotlib.axes.Axes.boxplot" module="matplotlib.axes" names="matplotlib.axes.Axes.boxplot">
                            <desc_name>boxplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a box and whisker plot.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">boxplot(self, x, notch=None, sym=None, vert=None, whis=None,
        positions=None, widths=None, patch_artist=False,
        bootstrap=None, usermedians=None, conf_intervals=None,
        meanline=False, showmeans=False, showcaps=True,
        showbox=True, showfliers=True, boxprops=None, labels=None,
        flierprops=None, medianprops=None, meanprops=None,
        capprops=None, whiskerprops=None, manage_xticks=True):</literal_block>
                            <paragraph>Make a box and whisker plot for each column of 
                                <emphasis>x</emphasis>
                                or each
vector in sequence 
                                <emphasis>x</emphasis>
                                .  The box extends from the lower to
upper quartile values of the data, with a line at the median.
The whiskers extend from the box to show the range of the
data.  Flier points are those past the end of the whiskers.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: Array or a sequence of vectors.</paragraph>
                                        <block_quote>
                                            <paragraph>The input data.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>notch</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If False, produces a rectangular box plot.
If True, will produce a notched box plot</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>sym</strong>: str or None, default = None</paragraph>
                                        <block_quote>
                                            <paragraph>The default symbol for flier points.
Enter an empty string ('') if you don't want to show fliers.
If 
                                                <literal classes="xref py py-obj">None</literal>
                                                , then the fliers default to 'b+'  If you want more
control use the flierprops kwarg.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>vert</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If True (default), makes the boxes vertical.
If False, makes horizontal boxes.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>whis</strong>: float, sequence (default = 1.5) or string</paragraph>
                                        <block_quote>
                                            <paragraph>As a float, determines the reach of the whiskers past the first
and third quartiles (e.g., Q3 + whis*IQR, IQR = interquartile
range, Q3-Q1). Beyond the whiskers, data are considered outliers
and are plotted as individual points. Set this to an unreasonably
high value to force the whiskers to show the min and max values.
Alternatively, set this to an ascending sequence of percentile
(e.g., [5, 95]) to set the whiskers at specific percentiles of
the data. Finally, 
                                                <emphasis>whis</emphasis>
                                                can be the string 'range' to force the
whiskers to the min and max of the data. In the edge case that
the 25th and 75th percentiles are equivalent, 
                                                <emphasis>whis</emphasis>
                                                will be
automatically set to 'range'.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bootstrap</strong>: None (default) or integer</paragraph>
                                        <block_quote>
                                            <paragraph>Specifies whether to bootstrap the confidence intervals
around the median for notched boxplots. If bootstrap==None,
no bootstrapping is performed, and notches are calculated
using a Gaussian-based asymptotic approximation  (see McGill, R.,
Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart,
1967). Otherwise, bootstrap specifies the number of times to
bootstrap the median to determine it's 95% confidence intervals.
Values between 1000 and 10000 are recommended.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>usermedians</strong>: array-like or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>An array or sequence whose first dimension (or length) is
compatible with 
                                                <emphasis>x</emphasis>
                                                . This overrides the medians computed by
matplotlib for each element of 
                                                <emphasis>usermedians</emphasis>
                                                that is not None.
When an element of 
                                                <emphasis>usermedians</emphasis>
                                                == None, the median will be
computed by matplotlib as normal.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>conf_intervals</strong>: array-like or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>Array or sequence whose first dimension (or length) is compatible
with 
                                                <emphasis>x</emphasis>
                                                and whose second dimension is 2. When the current element
of 
                                                <emphasis>conf_intervals</emphasis>
                                                is not None, the notch locations computed by
matplotlib are overridden (assuming notch is True). When an
element of 
                                                <emphasis>conf_intervals</emphasis>
                                                is None, boxplot compute notches the
method specified by the other kwargs (e.g., 
                                                <emphasis>bootstrap</emphasis>
                                                ).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>positions</strong>: array-like, default = [1, 2, ..., n]</paragraph>
                                        <block_quote>
                                            <paragraph>Sets the positions of the boxes. The ticks and limits
are automatically set to match the positions.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>widths</strong>: array-like, default = 0.5</paragraph>
                                        <block_quote>
                                            <paragraph>Either a scalar or a vector and sets the width of each box. The
default is 0.5, or 
                                                <literal>0.15*(distance between extreme positions)</literal>
                                                if that is smaller.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>labels</strong>: sequence or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>Labels for each dataset. Length must be compatible with
dimensions  of 
                                                <emphasis>x</emphasis></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>patch_artist</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If False produces boxes with the Line2D artist
If True produces boxes with the Patch artist</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showmeans</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If True, will toggle one the rendering of the means</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showcaps</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If True, will toggle one the rendering of the caps</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showbox</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If True, will toggle one the rendering of box</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showfliers</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If True, will toggle one the rendering of the fliers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>boxprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the boxes</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>whiskerprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the whiskers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>capprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the caps</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>flierprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the fliers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>medianprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the medians</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>meanprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the means</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>meanline</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If True (and 
                                                <emphasis>showmeans</emphasis>
                                                is True), will try to render the mean
as a line spanning the full width of the box according to

                                                <emphasis>meanprops</emphasis>
                                                . Not recommended if 
                                                <emphasis>shownotches</emphasis>
                                                is also True.
Otherwise, means will be shown as points.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>manage_xticks</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If the function should adjust the xlim and xtick locations.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>result</strong>: dict</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary mapping each component of the boxplot
to a list of the 
                                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                    <literal classes="xref py py-class">matplotlib.lines.Line2D</literal></reference>instances created. That dictionary has the following keys
(assuming vertical boxplots):</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>boxes: the main body of the boxplot showing the quartiles
and the median's confidence intervals if enabled.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>medians: horizonal lines at the median of each box.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>whiskers: the vertical lines extending to the most extreme,
n-outlier data points.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>caps: the horizontal lines at the ends of the whiskers.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>fliers: points representing data that extend beyond the
whiskers (outliers).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>means: points or lines representing the means.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'broken_barh()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.broken_barh',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.broken_barh" ids="matplotlib.axes.Axes.broken_barh" module="matplotlib.axes" names="matplotlib.axes.Axes.broken_barh">
                            <desc_name>broken_barh</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot horizontal bars.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">broken_barh(self, xranges, yrange, **kwargs)</literal_block>
                            <paragraph>A collection of horizontal bars spanning 
                                <emphasis>yrange</emphasis>
                                with a sequence of

                                <emphasis>xranges</emphasis>
                                .</paragraph>
                            <paragraph>Required arguments:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="9"/>
                                        <colspec colwidth="30"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Argument</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>xranges</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of (
                                                        <emphasis>xmin</emphasis>
                                                        , 
                                                        <emphasis>xwidth</emphasis>
                                                        )</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>yrange</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of (
                                                        <emphasis>ymin</emphasis>
                                                        , 
                                                        <emphasis>ywidth</emphasis>
                                                        )</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>kwargs are

                                <reference internal="True" reftitle="matplotlib.collections.BrokenBarHCollection" refuri="collections_api#matplotlib.collections.BrokenBarHCollection">
                                    <literal classes="xref py py-class">matplotlib.collections.BrokenBarHCollection</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>these can either be a single argument, i.e.,:</paragraph>
                            <literal_block xml:space="preserve">facecolors = 'black'</literal_block>
                            <paragraph>or a sequence of arguments for the various bars, i.e.,:</paragraph>
                            <literal_block xml:space="preserve">facecolors = ('black', 'red', 'green')</literal_block>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'bxp()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.bxp',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.bxp" ids="matplotlib.axes.Axes.bxp" module="matplotlib.axes" names="matplotlib.axes.Axes.bxp">
                            <desc_name>bxp</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>bxpstats</desc_parameter>
                                <desc_parameter>positions=None</desc_parameter>
                                <desc_parameter>widths=None</desc_parameter>
                                <desc_parameter>vert=True</desc_parameter>
                                <desc_parameter>patch_artist=False</desc_parameter>
                                <desc_parameter>shownotches=False</desc_parameter>
                                <desc_parameter>showmeans=False</desc_parameter>
                                <desc_parameter>showcaps=True</desc_parameter>
                                <desc_parameter>showbox=True</desc_parameter>
                                <desc_parameter>showfliers=True</desc_parameter>
                                <desc_parameter>boxprops=None</desc_parameter>
                                <desc_parameter>whiskerprops=None</desc_parameter>
                                <desc_parameter>flierprops=None</desc_parameter>
                                <desc_parameter>medianprops=None</desc_parameter>
                                <desc_parameter>capprops=None</desc_parameter>
                                <desc_parameter>meanprops=None</desc_parameter>
                                <desc_parameter>meanline=False</desc_parameter>
                                <desc_parameter>manage_xticks=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Drawing function for box and whisker plots.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">bxp(self, bxpstats, positions=None, widths=None, vert=True,
    patch_artist=False, shownotches=False, showmeans=False,
    showcaps=True, showbox=True, showfliers=True,
    boxprops=None, whiskerprops=None, flierprops=None,
    medianprops=None, capprops=None, meanprops=None,
    meanline=False, manage_xticks=True):</literal_block>
                            <paragraph>Make a box and whisker plot for each column of 
                                <emphasis>x</emphasis>
                                or each
vector in sequence 
                                <emphasis>x</emphasis>
                                .  The box extends from the lower to
upper quartile values of the data, with a line at the median.
The whiskers extend from the box to show the range of the
data.  Flier points are those past the end of the whiskers.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>bxpstats</strong>: list of dicts</paragraph>
                                        <block_quote>
                                            <paragraph>A list of dictionaries containing stats for each boxplot.
Required keys are:</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal>med</literal>: The median (scalar float).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>q1</literal>: The first quartile (25th percentile) (scalar
float).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>q3</literal>: The third quartile (75th percentile) (scalar
float).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>whislo</literal>: Lower bound of the lower whisker (scalar
float).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>whishi</literal>: Upper bound of the upper whisker (scalar
float).</paragraph>
                                                </list_item>
                                            </bullet_list>
                                            <paragraph>Optional keys are:</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal>mean</literal>: The mean (scalar float). Needed if

                                                        <literal>showmeans=True</literal>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>fliers</literal>: Data beyond the whiskers (sequence of floats).
Needed if 
                                                        <literal>showfliers=True</literal>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>cilo</literal>&amp; 
                                                        <literal>cihi</literal>
                                                        : Lower and upper confidence intervals
about the median. Needed if 
                                                        <literal>shownotches=True</literal>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>label</literal>: Name of the dataset (string). If available,
this will be used a tick label for the boxplot</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                        <paragraph>
                                            <strong>positions</strong>: array-like, default = [1, 2, ..., n]</paragraph>
                                        <block_quote>
                                            <paragraph>Sets the positions of the boxes. The ticks and limits
are automatically set to match the positions.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>widths</strong>: array-like, default = 0.5</paragraph>
                                        <block_quote>
                                            <paragraph>Either a scalar or a vector and sets the width of each
box. The default is 0.5, or 
                                                <literal>0.15*(distance between extreme
positions)</literal>
                                                if that is smaller.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>vert</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                (default), makes the boxes vertical.  If 
                                                <literal classes="xref py py-obj">False</literal>
                                                ,
makes horizontal boxes.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>patch_artist</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">False</literal>
                                                produces boxes with the

                                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                    <literal classes="xref py py-obj">Line2D</literal></reference>artist.  If 
                                                <literal classes="xref py py-obj">True</literal>
                                                produces boxes
with the 
                                                <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                    <literal classes="xref py py-obj">Patch</literal></reference>artist.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>shownotches</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">False</literal>
                                                (default), produces a rectangular box plot.
If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , will produce a notched box plot</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showmeans</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , will toggle one the rendering of the means</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showcaps</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , will toggle one the rendering of the caps</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showbox</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , will toggle one the rendering of box</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showfliers</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , will toggle one the rendering of the fliers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>boxprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the boxes</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>whiskerprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the whiskers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>capprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the caps</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>flierprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided will set the plotting style of the fliers</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>medianprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the medians</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>meanprops</strong>: dict or None (default)</paragraph>
                                        <block_quote>
                                            <paragraph>If provided, will set the plotting style of the means</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>meanline</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                (and 
                                                <emphasis>showmeans</emphasis>
                                                is 
                                                <literal classes="xref py py-obj">True</literal>
                                                ), will try to render the mean
as a line spanning the full width of the box according to

                                                <emphasis>meanprops</emphasis>
                                                . Not recommended if 
                                                <emphasis>shownotches</emphasis>
                                                is also True.
Otherwise, means will be shown as points.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>manage_xticks</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If the function should adjust the xlim and xtick locations.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>result</strong>: dict</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary mapping each component of the boxplot to a list
of the 
                                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                    <literal classes="xref py py-class">matplotlib.lines.Line2D</literal></reference>instances
created. That dictionary has the following keys (assuming
vertical boxplots):</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal>boxes</literal>: the main body of the boxplot showing the
quartiles and the median's confidence intervals if
enabled.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>medians</literal>: horizonal lines at the median of each box.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>whiskers</literal>: the vertical lines extending to the most
extreme, n-outlier data points.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>caps</literal>: the horizontal lines at the ends of the
whiskers.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>fliers</literal>: points representing data that extend beyond
the whiskers (fliers).</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>means</literal>: points or lines representing the means.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'can_pan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.can_pan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.can_pan" ids="matplotlib.axes.Axes.can_pan" module="matplotlib.axes" names="matplotlib.axes.Axes.can_pan">
                            <desc_name>can_pan</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if this axes supports any pan/zoom button functionality.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'can_zoom()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.can_zoom',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.can_zoom" ids="matplotlib.axes.Axes.can_zoom" module="matplotlib.axes" names="matplotlib.axes.Axes.can_zoom">
                            <desc_name>can_zoom</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if this axes supports the zoom box button functionality.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'cla()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.cla',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.cla" ids="matplotlib.axes.Axes.cla" module="matplotlib.axes" names="matplotlib.axes.Axes.cla">
                            <desc_name>cla</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Clear the current axes.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'clabel()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.clabel',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.clabel" ids="matplotlib.axes.Axes.clabel" module="matplotlib.axes" names="matplotlib.axes.Axes.clabel">
                            <desc_name>clabel</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>CS</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Label a contour plot.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">clabel(cs, **kwargs)</literal_block>
                            <paragraph>Adds labels to line contours in 
                                <emphasis>cs</emphasis>
                                , where 
                                <emphasis>cs</emphasis>
                                is a

                                <literal classes="xref py py-class">ContourSet</literal>
                                object returned by
contour.</paragraph>
                            <literal_block xml:space="preserve">clabel(cs, v, **kwargs)</literal_block>
                            <paragraph>only labels contours listed in 
                                <emphasis>v</emphasis>
                                .</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fontsize</emphasis>:</term>
                                        <definition>
                                            <paragraph>size in points or relative size e.g., 'smaller', 'x-large'</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>:</term>
                                        <definition>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>if 
                                                        <emphasis>None</emphasis>
                                                        , the color of each label matches the color of
the corresponding contour</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>if one string color, e.g., 
                                                        <emphasis>colors</emphasis>
                                                        = 'r' or 
                                                        <emphasis>colors</emphasis>
                                                        =
'red', all labels will be plotted in this color</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>if a tuple of matplotlib color args (string, float, rgb, etc),
different labels will be plotted in different colors in the order
specified</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>inline</emphasis>:</term>
                                        <definition>
                                            <paragraph>controls whether the underlying contour is removed or
not. Default is 
                                                <emphasis>True</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>inline_spacing</emphasis>:</term>
                                        <definition>
                                            <paragraph>space in pixels to leave on each side of label when
placing inline.  Defaults to 5.  This spacing will be
exact for labels at locations where the contour is
straight, less so for labels on curved contours.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fmt</emphasis>:</term>
                                        <definition>
                                            <paragraph>a format string for the label. Default is '%1.3f'
Alternatively, this can be a dictionary matching contour
levels with arbitrary strings to use for each contour level
(i.e., fmt[level]=string), or it can be any callable, such
as a 
                                                <reference internal="True" reftitle="matplotlib.ticker.Formatter" refuri="ticker_api#matplotlib.ticker.Formatter">
                                                    <literal classes="xref py py-class">Formatter</literal></reference>instance, that
returns a string when called with a numeric contour level.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>manual</emphasis>:</term>
                                        <definition>
                                            <paragraph>if 
                                                <emphasis>True</emphasis>
                                                , contour labels will be placed manually using
mouse clicks.  Click the first button near a contour to
add a label, click the second button (or potentially both
mouse buttons at once) to finish adding labels.  The third
button can be used to remove the last label added, but
only if labels are not inline.  Alternatively, the keyboard
can be used to select label locations (enter to end label
placement, delete or backspace act like the third mouse button,
and any other key will select a label location).</paragraph>
                                            <paragraph>
                                                <emphasis>manual</emphasis>can be an iterable object of x,y tuples. Contour labels
will be created as if mouse is clicked at each x,y positions.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>rightside_up</emphasis>:</term>
                                        <definition>
                                            <paragraph>if 
                                                <emphasis>True</emphasis>
                                                (default), label rotations will always be plus
or minus 90 degrees from level.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>use_clabeltext</emphasis>:</term>
                                        <definition>
                                            <paragraph>if 
                                                <emphasis>True</emphasis>
                                                (default is False), ClabelText class (instead of
matplotlib.Text) is used to create labels. ClabelText
recalculates rotation angles of texts during the drawing time,
therefore this can be used if aspect of the axes changes.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'clear()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.clear',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.clear" ids="matplotlib.axes.Axes.clear" module="matplotlib.axes" names="matplotlib.axes.Axes.clear">
                            <desc_name>clear</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>clear the axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'cohere()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.cohere',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.cohere" ids="matplotlib.axes.Axes.cohere" module="matplotlib.axes" names="matplotlib.axes.Axes.cohere">
                            <desc_name>cohere</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the coherence between 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                .</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend = mlab.detrend_none,
       window = mlab.window_hanning, noverlap=0, pad_to=None,
       sides='default', scale_by_freq=None, **kwargs)</literal_block>
                            <paragraph>Plot the coherence between 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                .  Coherence is the
normalized cross spectral density:</paragraph>
                            <latex_math fontset="cm" latex="C_{xy} = \frac{|P_{xy}|^2}{P_{xx}P_{yy}}"/>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of points to which the data segment is padded when
performing the FFT.  This can be different from 
                                            <emphasis>NFFT</emphasis>
                                            , which
specifies the number of data points used.  While not increasing
the actual resolution of the spectrum (the minimum distance between
resolvable peaks), this can give more points in the plot,
allowing for more detail. This corresponds to the 
                                            <emphasis>n</emphasis>
                                            parameter
in the call to fft(). The default is None, which sets 
                                            <emphasis>pad_to</emphasis>
                                            equal to 
                                            <emphasis>NFFT</emphasis></paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>NFFT</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of data points used in each block for the FFT.
A power 2 is most efficient.  The default value is 256.
This should 
                                            <emphasis>NOT</emphasis>
                                            be used to get zero padding, or the scaling of the
result will be incorrect. Use 
                                            <emphasis>pad_to</emphasis>
                                            for this instead.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>detrend</emphasis>: [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>callable</paragraph>
                                        </block_quote>
                                        <paragraph>The function applied to each segment before fft-ing,
designed to remove the mean or linear trend.  Unlike in
MATLAB, where the 
                                            <emphasis>detrend</emphasis>
                                            parameter is a vector, in
matplotlib is it a function.  The 
                                            <literal classes="xref py py-mod">pylab</literal>
                                            module defines 
                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            ,

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            , and

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            , but you can use
a custom function as well.  You can also use a string to choose
one of the functions.  'default', 'constant', and 'mean' call

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            .  'linear' calls

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            .  'none' calls

                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>scale_by_freq</emphasis>: boolean</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>Specifies whether the resulting density values should be scaled
by the scaling frequency, which gives density in units of Hz^-1.
This allows for integration over the returned frequency values.
The default is True for MATLAB compatibility.</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>noverlap</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The number of points of overlap between blocks.  The
default value is 0 (no overlap).</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>The return value is a tuple (
                                <emphasis>Cxy</emphasis>
                                , 
                                <emphasis>f</emphasis>
                                ), where 
                                <emphasis>f</emphasis>
                                are the
frequencies of the coherence vector.</paragraph>
                            <paragraph>kwargs are applied to the lines.</paragraph>
                            <paragraph>References:</paragraph>
                            <block_quote>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>Bendat &amp; Piersol -- Random Data: Analysis and Measurement
Procedures, John Wiley &amp; Sons (1986)</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties of the coherence plot:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'contains()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.contains',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.contains" ids="matplotlib.axes.Axes.contains" module="matplotlib.axes" names="matplotlib.axes.Axes.contains">
                            <desc_name>contains</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>mouseevent</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Test whether the mouse event occured in the axes.</paragraph>
                            <paragraph>Returns 
                                <emphasis>True</emphasis>
                                / 
                                <emphasis>False</emphasis>
                                , {}</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'contains_point()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.contains_point',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.contains_point" ids="matplotlib.axes.Axes.contains_point" module="matplotlib.axes" names="matplotlib.axes.Axes.contains_point">
                            <desc_name>contains_point</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>point</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns 
                                <emphasis>True</emphasis>
                                if the point (tuple of x,y) is inside the axes
(the area defined by the its patch). A pixel coordinate is
required.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'contour()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.contour',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.contour" ids="matplotlib.axes.Axes.contour" module="matplotlib.axes" names="matplotlib.axes.Axes.contour">
                            <desc_name>contour</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot contours.</paragraph>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.contour" refuri="pyplot_api#matplotlib.pyplot.contour">
                                    <literal classes="xref py py-func">contour()</literal>
                                </reference>and

                                <reference internal="True" reftitle="matplotlib.pyplot.contourf" refuri="pyplot_api#matplotlib.pyplot.contourf">
                                    <literal classes="xref py py-func">contourf()</literal></reference>draw contour lines and
filled contours, respectively.  Except as noted, function
signatures and return values are the same for both versions.</paragraph>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.contourf" refuri="pyplot_api#matplotlib.pyplot.contourf">
                                    <literal classes="xref py py-func">contourf()</literal>
                                </reference>differs from the MATLAB
version in that it does not draw the polygon edges.
To draw edges, add line contours with
calls to 
                                <reference internal="True" reftitle="matplotlib.pyplot.contour" refuri="pyplot_api#matplotlib.pyplot.contour">
                                    <literal classes="xref py py-func">contour()</literal></reference>.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">contour(Z)</literal_block>
                            <paragraph>make a contour plot of an array 
                                <emphasis>Z</emphasis>
                                . The level values are chosen
automatically.</paragraph>
                            <literal_block xml:space="preserve">contour(X,Y,Z)</literal_block>
                            <paragraph>
                                <emphasis>X</emphasis>, 
                                <emphasis>Y</emphasis>
                                specify the (x, y) coordinates of the surface</paragraph>
                            <literal_block xml:space="preserve">contour(Z,N)
contour(X,Y,Z,N)</literal_block>
                            <paragraph>contour up to 
                                <emphasis>N</emphasis>
                                automatically-chosen levels.</paragraph>
                            <literal_block xml:space="preserve">contour(Z,V)
contour(X,Y,Z,V)</literal_block>
                            <paragraph>draw contour lines at the values specified in sequence 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">contourf(..., V)</literal_block>
                            <paragraph>fill the 
                                <literal>len(V)-1</literal>
                                regions between the values in 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">contour(Z, **kwargs)</literal_block>
                            <paragraph>Use keyword args to control colors, linewidth, origin, cmap ... see
below for more details.</paragraph>
                            <paragraph>
                                <emphasis>X</emphasis>and 
                                <emphasis>Y</emphasis>
                                must both be 2-D with the same shape as 
                                <emphasis>Z</emphasis>
                                , or they
must both be 1-D such that 
                                <literal>len(X)</literal>
                                is the number of columns in

                                <emphasis>Z</emphasis>
                                and 
                                <literal>len(Y)</literal>
                                is the number of rows in 
                                <emphasis>Z</emphasis>
                                .</paragraph>
                            <paragraph>
                                <literal>C = contour(...)</literal>returns a

                                <literal classes="xref py py-class">QuadContourSet</literal>
                                object.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>corner_mask</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            | 'legacy' ]</term>
                                        <definition>
                                            <paragraph>Enable/disable corner masking, which only has an effect if 
                                                <emphasis>Z</emphasis>
                                                is
a masked array.  If 
                                                <emphasis>False</emphasis>
                                                , any quad touching a masked point is
masked out.  If 
                                                <emphasis>True</emphasis>
                                                , only the triangular corners of quads
nearest those points are always masked out, other triangular
corners comprising three unmasked points are contoured as usual.
If 'legacy', the old contouring algorithm is used, which is
equivalent to 
                                                <emphasis>False</emphasis>
                                                and is deprecated, only remaining whilst the
new algorithm is tested fully.</paragraph>
                                            <paragraph>If not specified, the default is taken from
rcParams['contour.corner_mask'], which is True unless it has
been modified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | string | (mpl_colors) ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the colormap specified by cmap will be used.</paragraph>
                                            <paragraph>If a string, like 'r' or 'red', all levels will be plotted in this
color.</paragraph>
                                            <paragraph>If a tuple of matplotlib color args (string, float, rgb, etc),
different levels will be plotted in different colors in the order
specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: float</term>
                                        <definition>
                                            <paragraph>The alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A cm 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">Colormap</literal></reference>instance or

                                                <emphasis>None</emphasis>
                                                . If 
                                                <emphasis>cmap</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and 
                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , a
default Colormap is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance for
scaling data values to colors. If 
                                                <emphasis>norm</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and

                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default linear scaling is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>vmin</emphasis>, 
                                            <emphasis>vmax</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | scalar ]</term>
                                        <definition>
                                            <paragraph>If not 
                                                <emphasis>None</emphasis>
                                                , either or both of these values will be
supplied to the 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance, overriding the default color scaling based on

                                                <emphasis>levels</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>levels</emphasis>: [level0, level1, ..., leveln]</term>
                                        <definition>
                                            <paragraph>A list of floating point numbers indicating the level
curves to draw, in increasing order; e.g., to draw just
the zero contour pass 
                                                <literal>levels=[0]</literal></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>origin</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'upper' | 'lower' | 'image' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the first value of 
                                                <emphasis>Z</emphasis>
                                                will correspond to the
lower left corner, location (0,0). If 'image', the rc
value for 
                                                <literal>image.origin</literal>
                                                will be used.</paragraph>
                                            <paragraph>This keyword is not active if 
                                                <emphasis>X</emphasis>
                                                and 
                                                <emphasis>Y</emphasis>
                                                are specified in
the call to contour.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>extent</emphasis>: [ 
                                    <emphasis>None</emphasis>
                                    | (x0,x1,y0,y1) ]</paragraph>
                                <block_quote>
                                    <paragraph>If 
                                        <emphasis>origin</emphasis>
                                        is not 
                                        <emphasis>None</emphasis>
                                        , then 
                                        <emphasis>extent</emphasis>
                                        is interpreted as
in 
                                        <reference internal="True" reftitle="matplotlib.pyplot.imshow" refuri="pyplot_api#matplotlib.pyplot.imshow">
                                            <literal classes="xref py py-func">matplotlib.pyplot.imshow()</literal></reference>: it gives the outer
pixel boundaries. In this case, the position of Z[0,0]
is the center of the pixel, not a corner. If 
                                        <emphasis>origin</emphasis>
                                        is

                                        <emphasis>None</emphasis>
                                        , then (
                                        <emphasis>x0</emphasis>
                                        , 
                                        <emphasis>y0</emphasis>
                                        ) is the position of Z[0,0], and
(
                                        <emphasis>x1</emphasis>
                                        , 
                                        <emphasis>y1</emphasis>
                                        ) is the position of Z[-1,-1].</paragraph>
                                    <paragraph>This keyword is not active if 
                                        <emphasis>X</emphasis>
                                        and 
                                        <emphasis>Y</emphasis>
                                        are specified in
the call to contour.</paragraph>
                                </block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>locator</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | ticker.Locator subclass ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>locator</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default

                                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator" refuri="ticker_api#matplotlib.ticker.MaxNLocator">
                                                    <literal classes="xref py py-class">MaxNLocator</literal></reference>is used. The
locator is used to determine the contour levels if they
are not given explicitly via the 
                                                <emphasis>V</emphasis>
                                                argument.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>extend</emphasis>: [ 'neither' | 'both' | 'min' | 'max' ]</term>
                                        <definition>
                                            <paragraph>Unless this is 'neither', contour levels are automatically
added to one or both ends of the range so that all data
are included. These added ranges are then mapped to the
special colormap values which default to the ends of the
colormap range, but can be set via

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_under" refuri="colors_api#matplotlib.colors.Colormap.set_under">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_under()</literal></reference>and

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_over" refuri="colors_api#matplotlib.colors.Colormap.set_over">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_over()</literal></reference>methods.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xunits</emphasis>, 
                                            <emphasis>yunits</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | registered units ]</term>
                                        <definition>
                                            <paragraph>Override axis units by specifying an instance of a

                                                <reference internal="True" reftitle="matplotlib.units.ConversionInterface" refuri="units_api#matplotlib.units.ConversionInterface">
                                                    <literal classes="xref py py-class">matplotlib.units.ConversionInterface</literal></reference>.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>antialiased</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>enable antialiasing, overriding the defaults.  For
filled contours, the default is 
                                                <emphasis>True</emphasis>
                                                .  For line contours,
it is taken from rcParams['lines.antialiased'].</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>nchunk</emphasis>: [ 0 | integer ]</term>
                                        <definition>
                                            <paragraph>If 0, no subdivision of the domain.  Specify a positive integer to
divide the domain into subdomains of 
                                                <emphasis>nchunk</emphasis>
                                                by 
                                                <emphasis>nchunk</emphasis>
                                                quads.
Chunking reduces the maximum length of polygons generated by the
contouring algorithm which reduces the rendering workload passed
on to the backend and also requires slightly less RAM.  It can
however introduce rendering artifacts at chunk boundaries depending
on the backend, the 
                                                <emphasis>antialiased</emphasis>
                                                flag and value of 
                                                <emphasis>alpha</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>contour-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linewidths</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | number | tuple of numbers ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linewidths</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default width in

                                                <literal>lines.linewidth</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                is used.</paragraph>
                                            <paragraph>If a number, all levels will be plotted with this linewidth.</paragraph>
                                            <paragraph>If a tuple, different levels will be plotted with different
linewidths in the order specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linestyles</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linestyles</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default is 'solid' unless
the lines are monochrome.  In that case, negative
contours will take their linestyle from the 
                                                <literal>matplotlibrc</literal>
                                                <literal>contour.negative_linestyle</literal>
                                                setting.</paragraph>
                                            <paragraph>
                                                <emphasis>linestyles</emphasis>can also be an iterable of the above strings
specifying a set of linestyles to be used. If this
iterable is shorter than the number of contour levels
it will be repeated as necessary.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>contourf-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>hatches</emphasis>:</term>
                                        <definition>
                                            <paragraph>A list of cross hatch patterns to use on the filled areas.
If None, no hatching will be added to the contour.
Hatching is supported in the PostScript, PDF, SVG and Agg
backends only.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note: contourf fills intervals that are closed at the top; that
is, for boundaries 
                                <emphasis>z1</emphasis>
                                and 
                                <emphasis>z2</emphasis>
                                , the filled region is:</paragraph>
                            <literal_block xml:space="preserve">z1 &lt; z &lt;= z2</literal_block>
                            <paragraph>There is one exception: if the lowest boundary coincides with
the minimum value of the 
                                <emphasis>z</emphasis>
                                array, then that minimum value
will be included in the lowest interval.</paragraph>
                            <paragraph>
                                <strong>Examples:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'contourf()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.contourf',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.contourf" ids="matplotlib.axes.Axes.contourf" module="matplotlib.axes" names="matplotlib.axes.Axes.contourf">
                            <desc_name>contourf</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot contours.</paragraph>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.contour" refuri="pyplot_api#matplotlib.pyplot.contour">
                                    <literal classes="xref py py-func">contour()</literal>
                                </reference>and

                                <reference internal="True" reftitle="matplotlib.pyplot.contourf" refuri="pyplot_api#matplotlib.pyplot.contourf">
                                    <literal classes="xref py py-func">contourf()</literal></reference>draw contour lines and
filled contours, respectively.  Except as noted, function
signatures and return values are the same for both versions.</paragraph>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.contourf" refuri="pyplot_api#matplotlib.pyplot.contourf">
                                    <literal classes="xref py py-func">contourf()</literal>
                                </reference>differs from the MATLAB
version in that it does not draw the polygon edges.
To draw edges, add line contours with
calls to 
                                <reference internal="True" reftitle="matplotlib.pyplot.contour" refuri="pyplot_api#matplotlib.pyplot.contour">
                                    <literal classes="xref py py-func">contour()</literal></reference>.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">contour(Z)</literal_block>
                            <paragraph>make a contour plot of an array 
                                <emphasis>Z</emphasis>
                                . The level values are chosen
automatically.</paragraph>
                            <literal_block xml:space="preserve">contour(X,Y,Z)</literal_block>
                            <paragraph>
                                <emphasis>X</emphasis>, 
                                <emphasis>Y</emphasis>
                                specify the (x, y) coordinates of the surface</paragraph>
                            <literal_block xml:space="preserve">contour(Z,N)
contour(X,Y,Z,N)</literal_block>
                            <paragraph>contour up to 
                                <emphasis>N</emphasis>
                                automatically-chosen levels.</paragraph>
                            <literal_block xml:space="preserve">contour(Z,V)
contour(X,Y,Z,V)</literal_block>
                            <paragraph>draw contour lines at the values specified in sequence 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">contourf(..., V)</literal_block>
                            <paragraph>fill the 
                                <literal>len(V)-1</literal>
                                regions between the values in 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">contour(Z, **kwargs)</literal_block>
                            <paragraph>Use keyword args to control colors, linewidth, origin, cmap ... see
below for more details.</paragraph>
                            <paragraph>
                                <emphasis>X</emphasis>and 
                                <emphasis>Y</emphasis>
                                must both be 2-D with the same shape as 
                                <emphasis>Z</emphasis>
                                , or they
must both be 1-D such that 
                                <literal>len(X)</literal>
                                is the number of columns in

                                <emphasis>Z</emphasis>
                                and 
                                <literal>len(Y)</literal>
                                is the number of rows in 
                                <emphasis>Z</emphasis>
                                .</paragraph>
                            <paragraph>
                                <literal>C = contour(...)</literal>returns a

                                <literal classes="xref py py-class">QuadContourSet</literal>
                                object.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>corner_mask</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            | 'legacy' ]</term>
                                        <definition>
                                            <paragraph>Enable/disable corner masking, which only has an effect if 
                                                <emphasis>Z</emphasis>
                                                is
a masked array.  If 
                                                <emphasis>False</emphasis>
                                                , any quad touching a masked point is
masked out.  If 
                                                <emphasis>True</emphasis>
                                                , only the triangular corners of quads
nearest those points are always masked out, other triangular
corners comprising three unmasked points are contoured as usual.
If 'legacy', the old contouring algorithm is used, which is
equivalent to 
                                                <emphasis>False</emphasis>
                                                and is deprecated, only remaining whilst the
new algorithm is tested fully.</paragraph>
                                            <paragraph>If not specified, the default is taken from
rcParams['contour.corner_mask'], which is True unless it has
been modified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | string | (mpl_colors) ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the colormap specified by cmap will be used.</paragraph>
                                            <paragraph>If a string, like 'r' or 'red', all levels will be plotted in this
color.</paragraph>
                                            <paragraph>If a tuple of matplotlib color args (string, float, rgb, etc),
different levels will be plotted in different colors in the order
specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: float</term>
                                        <definition>
                                            <paragraph>The alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A cm 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">Colormap</literal></reference>instance or

                                                <emphasis>None</emphasis>
                                                . If 
                                                <emphasis>cmap</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and 
                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , a
default Colormap is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance for
scaling data values to colors. If 
                                                <emphasis>norm</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and

                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default linear scaling is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>vmin</emphasis>, 
                                            <emphasis>vmax</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | scalar ]</term>
                                        <definition>
                                            <paragraph>If not 
                                                <emphasis>None</emphasis>
                                                , either or both of these values will be
supplied to the 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance, overriding the default color scaling based on

                                                <emphasis>levels</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>levels</emphasis>: [level0, level1, ..., leveln]</term>
                                        <definition>
                                            <paragraph>A list of floating point numbers indicating the level
curves to draw, in increasing order; e.g., to draw just
the zero contour pass 
                                                <literal>levels=[0]</literal></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>origin</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'upper' | 'lower' | 'image' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the first value of 
                                                <emphasis>Z</emphasis>
                                                will correspond to the
lower left corner, location (0,0). If 'image', the rc
value for 
                                                <literal>image.origin</literal>
                                                will be used.</paragraph>
                                            <paragraph>This keyword is not active if 
                                                <emphasis>X</emphasis>
                                                and 
                                                <emphasis>Y</emphasis>
                                                are specified in
the call to contour.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>extent</emphasis>: [ 
                                    <emphasis>None</emphasis>
                                    | (x0,x1,y0,y1) ]</paragraph>
                                <block_quote>
                                    <paragraph>If 
                                        <emphasis>origin</emphasis>
                                        is not 
                                        <emphasis>None</emphasis>
                                        , then 
                                        <emphasis>extent</emphasis>
                                        is interpreted as
in 
                                        <reference internal="True" reftitle="matplotlib.pyplot.imshow" refuri="pyplot_api#matplotlib.pyplot.imshow">
                                            <literal classes="xref py py-func">matplotlib.pyplot.imshow()</literal></reference>: it gives the outer
pixel boundaries. In this case, the position of Z[0,0]
is the center of the pixel, not a corner. If 
                                        <emphasis>origin</emphasis>
                                        is

                                        <emphasis>None</emphasis>
                                        , then (
                                        <emphasis>x0</emphasis>
                                        , 
                                        <emphasis>y0</emphasis>
                                        ) is the position of Z[0,0], and
(
                                        <emphasis>x1</emphasis>
                                        , 
                                        <emphasis>y1</emphasis>
                                        ) is the position of Z[-1,-1].</paragraph>
                                    <paragraph>This keyword is not active if 
                                        <emphasis>X</emphasis>
                                        and 
                                        <emphasis>Y</emphasis>
                                        are specified in
the call to contour.</paragraph>
                                </block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>locator</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | ticker.Locator subclass ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>locator</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default

                                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator" refuri="ticker_api#matplotlib.ticker.MaxNLocator">
                                                    <literal classes="xref py py-class">MaxNLocator</literal></reference>is used. The
locator is used to determine the contour levels if they
are not given explicitly via the 
                                                <emphasis>V</emphasis>
                                                argument.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>extend</emphasis>: [ 'neither' | 'both' | 'min' | 'max' ]</term>
                                        <definition>
                                            <paragraph>Unless this is 'neither', contour levels are automatically
added to one or both ends of the range so that all data
are included. These added ranges are then mapped to the
special colormap values which default to the ends of the
colormap range, but can be set via

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_under" refuri="colors_api#matplotlib.colors.Colormap.set_under">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_under()</literal></reference>and

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_over" refuri="colors_api#matplotlib.colors.Colormap.set_over">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_over()</literal></reference>methods.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xunits</emphasis>, 
                                            <emphasis>yunits</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | registered units ]</term>
                                        <definition>
                                            <paragraph>Override axis units by specifying an instance of a

                                                <reference internal="True" reftitle="matplotlib.units.ConversionInterface" refuri="units_api#matplotlib.units.ConversionInterface">
                                                    <literal classes="xref py py-class">matplotlib.units.ConversionInterface</literal></reference>.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>antialiased</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>enable antialiasing, overriding the defaults.  For
filled contours, the default is 
                                                <emphasis>True</emphasis>
                                                .  For line contours,
it is taken from rcParams['lines.antialiased'].</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>nchunk</emphasis>: [ 0 | integer ]</term>
                                        <definition>
                                            <paragraph>If 0, no subdivision of the domain.  Specify a positive integer to
divide the domain into subdomains of 
                                                <emphasis>nchunk</emphasis>
                                                by 
                                                <emphasis>nchunk</emphasis>
                                                quads.
Chunking reduces the maximum length of polygons generated by the
contouring algorithm which reduces the rendering workload passed
on to the backend and also requires slightly less RAM.  It can
however introduce rendering artifacts at chunk boundaries depending
on the backend, the 
                                                <emphasis>antialiased</emphasis>
                                                flag and value of 
                                                <emphasis>alpha</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>contour-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linewidths</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | number | tuple of numbers ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linewidths</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default width in

                                                <literal>lines.linewidth</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                is used.</paragraph>
                                            <paragraph>If a number, all levels will be plotted with this linewidth.</paragraph>
                                            <paragraph>If a tuple, different levels will be plotted with different
linewidths in the order specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linestyles</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linestyles</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default is 'solid' unless
the lines are monochrome.  In that case, negative
contours will take their linestyle from the 
                                                <literal>matplotlibrc</literal>
                                                <literal>contour.negative_linestyle</literal>
                                                setting.</paragraph>
                                            <paragraph>
                                                <emphasis>linestyles</emphasis>can also be an iterable of the above strings
specifying a set of linestyles to be used. If this
iterable is shorter than the number of contour levels
it will be repeated as necessary.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>contourf-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>hatches</emphasis>:</term>
                                        <definition>
                                            <paragraph>A list of cross hatch patterns to use on the filled areas.
If None, no hatching will be added to the contour.
Hatching is supported in the PostScript, PDF, SVG and Agg
backends only.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note: contourf fills intervals that are closed at the top; that
is, for boundaries 
                                <emphasis>z1</emphasis>
                                and 
                                <emphasis>z2</emphasis>
                                , the filled region is:</paragraph>
                            <literal_block xml:space="preserve">z1 &lt; z &lt;= z2</literal_block>
                            <paragraph>There is one exception: if the lowest boundary coincides with
the minimum value of the 
                                <emphasis>z</emphasis>
                                array, then that minimum value
will be included in the lowest interval.</paragraph>
                            <paragraph>
                                <strong>Examples:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'convert_xunits()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.convert_xunits',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.convert_xunits" ids="matplotlib.axes.Axes.convert_xunits" module="matplotlib.axes" names="matplotlib.axes.Axes.convert_xunits">
                            <desc_name>convert_xunits</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>For artists in an axes, if the xaxis has units support,
convert 
                                <emphasis>x</emphasis>
                                using xaxis unit type</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'convert_yunits()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.convert_yunits',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.convert_yunits" ids="matplotlib.axes.Axes.convert_yunits" module="matplotlib.axes" names="matplotlib.axes.Axes.convert_yunits">
                            <desc_name>convert_yunits</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>y</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>For artists in an axes, if the yaxis has units support,
convert 
                                <emphasis>y</emphasis>
                                using yaxis unit type</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'csd()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.csd',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.csd" ids="matplotlib.axes.Axes.csd" module="matplotlib.axes" names="matplotlib.axes.Axes.csd">
                            <desc_name>csd</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the cross-spectral density.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">csd(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
    window=mlab.window_hanning, noverlap=0, pad_to=None,
    sides='default', scale_by_freq=None, return_line=None, **kwargs)</literal_block>
                            <paragraph>The cross spectral density 
                                <latex_math fontset="cm" latex="P_{xy}"/>
                                by Welch's average
periodogram method.  The vectors 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                are divided into

                                <emphasis>NFFT</emphasis>
                                length segments.  Each segment is detrended by function

                                <emphasis>detrend</emphasis>
                                and windowed by function 
                                <emphasis>window</emphasis>
                                .  
                                <emphasis>noverlap</emphasis>
                                gives
the length of the overlap between segments.  The product of
the direct FFTs of 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                are averaged over each segment
to compute 
                                <latex_math fontset="cm" latex="P_{xy}"/>
                                , with a scaling to correct for power
loss due to windowing.</paragraph>
                            <paragraph>If len(
                                <emphasis>x</emphasis>
                                ) &lt; 
                                <emphasis>NFFT</emphasis>
                                or len(
                                <emphasis>y</emphasis>
                                ) &lt; 
                                <emphasis>NFFT</emphasis>
                                , they will be zero
padded to 
                                <emphasis>NFFT</emphasis>
                                .</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>x</emphasis>, 
                                            <emphasis>y</emphasis>
                                            : 1-D arrays or sequences</term>
                                        <definition>
                                            <paragraph>Arrays or sequences containing the data</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of points to which the data segment is padded when
performing the FFT.  This can be different from 
                                            <emphasis>NFFT</emphasis>
                                            , which
specifies the number of data points used.  While not increasing
the actual resolution of the spectrum (the minimum distance between
resolvable peaks), this can give more points in the plot,
allowing for more detail. This corresponds to the 
                                            <emphasis>n</emphasis>
                                            parameter
in the call to fft(). The default is None, which sets 
                                            <emphasis>pad_to</emphasis>
                                            equal to 
                                            <emphasis>NFFT</emphasis></paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>NFFT</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of data points used in each block for the FFT.
A power 2 is most efficient.  The default value is 256.
This should 
                                            <emphasis>NOT</emphasis>
                                            be used to get zero padding, or the scaling of the
result will be incorrect. Use 
                                            <emphasis>pad_to</emphasis>
                                            for this instead.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>detrend</emphasis>: [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>callable</paragraph>
                                        </block_quote>
                                        <paragraph>The function applied to each segment before fft-ing,
designed to remove the mean or linear trend.  Unlike in
MATLAB, where the 
                                            <emphasis>detrend</emphasis>
                                            parameter is a vector, in
matplotlib is it a function.  The 
                                            <literal classes="xref py py-mod">pylab</literal>
                                            module defines 
                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            ,

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            , and

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            , but you can use
a custom function as well.  You can also use a string to choose
one of the functions.  'default', 'constant', and 'mean' call

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            .  'linear' calls

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            .  'none' calls

                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>scale_by_freq</emphasis>: boolean</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>Specifies whether the resulting density values should be scaled
by the scaling frequency, which gives density in units of Hz^-1.
This allows for integration over the returned frequency values.
The default is True for MATLAB compatibility.</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>noverlap</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The number of points of overlap between segments.
The default value is 0 (no overlap).</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>return_line</emphasis>: bool</term>
                                                <definition>
                                                    <paragraph>Whether to include the line object plotted in the returned values.
Default is False.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>If 
                                <emphasis>return_line</emphasis>
                                is False, returns the tuple (
                                <emphasis>Pxy</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                ).
If 
                                <emphasis>return_line</emphasis>
                                is True, returns the tuple (
                                <emphasis>Pxy</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                . 
                                <emphasis>line</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Pxy</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The values for the cross spectrum 
                                                <literal classes="xref py py-obj">P_{xy}</literal>
                                                before scaling
(complex valued)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the elements in 
                                                <emphasis>Pxy</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>line</emphasis>: a 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>The line created by this function.
Only returend if 
                                                <emphasis>return_line</emphasis>
                                                is True.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>For plotting, the power is plotted as

                                <latex_math fontset="cm" latex="10\log_{10}(P_{xy})"/>
                                for decibels, though 
                                <literal classes="xref py py-obj">P_{xy}</literal>
                                itself
is returned.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>References:</term>
                                    <definition>
                                        <paragraph>Bendat &amp; Piersol -- Random Data: Analysis and Measurement
Procedures, John Wiley &amp; Sons (1986)</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>kwargs control the Line2D properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">psd()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">psd()</literal>is the equivalent to setting y=x.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'drag_pan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.drag_pan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.drag_pan" ids="matplotlib.axes.Axes.drag_pan" module="matplotlib.axes" names="matplotlib.axes.Axes.drag_pan">
                            <desc_name>drag_pan</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>button</desc_parameter>
                                <desc_parameter>key</desc_parameter>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Called when the mouse moves during a pan operation.</paragraph>
                            <paragraph>
                                <emphasis>button</emphasis>is the mouse button number:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>1: LEFT</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>2: MIDDLE</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>3: RIGHT</paragraph>
                                </list_item>
                            </bullet_list>
                            <paragraph>
                                <emphasis>key</emphasis>is a &quot;shift&quot; key</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>, 
                                <emphasis>y</emphasis>
                                are the mouse coordinates in display coords.</paragraph>
                            <note>
                                <paragraph>Intended to be overridden by new projection types.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.draw',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.draw" ids="matplotlib.axes.Axes.draw" module="matplotlib.axes" names="matplotlib.axes.Axes.draw">
                            <desc_name>draw</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>artist</desc_parameter>
                                <desc_parameter>renderer</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draw everything (plot lines, axes, labels)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'draw_artist()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.draw_artist',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.draw_artist" ids="matplotlib.axes.Axes.draw_artist" module="matplotlib.axes" names="matplotlib.axes.Axes.draw_artist">
                            <desc_name>draw_artist</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>a</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>This method can only be used after an initial draw which
caches the renderer.  It is used to efficiently update Axes
data (axis ticks, labels, etc are not updated)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'end_pan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.end_pan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.end_pan" ids="matplotlib.axes.Axes.end_pan" module="matplotlib.axes" names="matplotlib.axes.Axes.end_pan">
                            <desc_name>end_pan</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Called when a pan operation completes (when the mouse button
is up.)</paragraph>
                            <note>
                                <paragraph>Intended to be overridden by new projection types.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'errorbar()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.errorbar',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.errorbar" ids="matplotlib.axes.Axes.errorbar" module="matplotlib.axes" names="matplotlib.axes.Axes.errorbar">
                            <desc_name>errorbar</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot an errorbar graph.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">errorbar(x, y, yerr=None, xerr=None,
         fmt='', ecolor=None, elinewidth=None, capsize=None,
         barsabove=False, lolims=False, uplims=False,
         xlolims=False, xuplims=False, errorevery=1,
         capthick=None)</literal_block>
                            <paragraph>Plot 
                                <emphasis>x</emphasis>
                                versus 
                                <emphasis>y</emphasis>
                                with error deltas in 
                                <emphasis>yerr</emphasis>
                                and 
                                <emphasis>xerr</emphasis>
                                .
Vertical errorbars are plotted if 
                                <emphasis>yerr</emphasis>
                                is not 
                                <emphasis>None</emphasis>
                                .
Horizontal errorbars are plotted if 
                                <emphasis>xerr</emphasis>
                                is not 
                                <emphasis>None</emphasis>
                                .</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>, 
                                <emphasis>y</emphasis>
                                , 
                                <emphasis>xerr</emphasis>
                                , and 
                                <emphasis>yerr</emphasis>
                                can all be scalars, which plots a
single error bar at 
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                .</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xerr</emphasis>/
                                            <emphasis>yerr</emphasis>
                                            : [ scalar | N, Nx1, or 2xN array-like ]</term>
                                        <definition>
                                            <paragraph>If a scalar number, len(N) array-like object, or an Nx1
array-like object, errorbars are drawn at +/-value relative
to the data.</paragraph>
                                            <paragraph>If a sequence of shape 2xN, errorbars are drawn at -row1
and +row2 relative to the data.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fmt</emphasis>: [ '' | 'none' | plot format string ]</term>
                                        <definition>
                                            <paragraph>The plot format symbol. If 
                                                <emphasis>fmt</emphasis>
                                                is 'none' (case-insensitive),
only the errorbars are plotted.  This is used for adding
errorbars to a bar plot, for example.  Default is '',
an empty plot format string; properties are
then identical to the defaults for 
                                                <literal classes="xref py py-meth">plot()</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>ecolor</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | mpl color ]</term>
                                        <definition>
                                            <paragraph>A matplotlib color arg which gives the color the errorbar lines;
if 
                                                <emphasis>None</emphasis>
                                                , use the color of the line connecting the markers.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>elinewidth</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The linewidth of the errorbar lines. If 
                                                <emphasis>None</emphasis>
                                                , use the linewidth.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>capsize</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The length of the error bar caps in points; if 
                                                <emphasis>None</emphasis>
                                                , it will
take the value from 
                                                <literal>errorbar.capsize</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>capthick</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>An alias kwarg to 
                                                <emphasis>markeredgewidth</emphasis>
                                                (a.k.a. - 
                                                <emphasis>mew</emphasis>
                                                ). This
setting is a more sensible name for the property that
controls the thickness of the error bar cap in points. For
backwards compatibility, if 
                                                <emphasis>mew</emphasis>
                                                or 
                                                <emphasis>markeredgewidth</emphasis>
                                                are given,
then they will over-ride 
                                                <emphasis>capthick</emphasis>
                                                .  This may change in future
releases.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>barsabove</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>if 
                                                <emphasis>True</emphasis>
                                                , will plot the errorbars above the plot
symbols. Default is below.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>lolims</emphasis>/ 
                                            <emphasis>uplims</emphasis>
                                            / 
                                            <emphasis>xlolims</emphasis>
                                            / 
                                            <emphasis>xuplims</emphasis>
                                            : [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>These arguments can be used to indicate that a value gives
only upper/lower limits. In that case a caret symbol is
used to indicate this. lims-arguments may be of the same
type as 
                                                <emphasis>xerr</emphasis>
                                                and 
                                                <emphasis>yerr</emphasis>
                                                .  To use limits with inverted
axes, 
                                                <literal classes="xref py py-meth">set_xlim()</literal>
                                                or 
                                                <literal classes="xref py py-meth">set_ylim()</literal>
                                                must be called
before 
                                                <literal classes="xref py py-meth">errorbar()</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>errorevery</emphasis>: positive integer</term>
                                        <definition>
                                            <paragraph>subsamples the errorbars. e.g., if errorevery=5, errorbars for
every 5-th datapoint will be plotted. The data plot itself still
shows all data points.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>All other keyword arguments are passed on to the plot command for the
markers. For example, this code makes big red squares with
thick green edges:</paragraph>
                            <literal_block xml:space="preserve">x,y,yerr = rand(3,10)
errorbar(x, y, yerr, marker='s',
         mfc='red', mec='green', ms=20, mew=4)</literal_block>
                            <paragraph>where 
                                <emphasis>mfc</emphasis>
                                , 
                                <emphasis>mec</emphasis>
                                , 
                                <emphasis>ms</emphasis>
                                and 
                                <emphasis>mew</emphasis>
                                are aliases for the longer
property names, 
                                <emphasis>markerfacecolor</emphasis>
                                , 
                                <emphasis>markeredgecolor</emphasis>
                                , 
                                <emphasis>markersize</emphasis>
                                and 
                                <emphasis>markeredgewith</emphasis>
                                .</paragraph>
                            <paragraph>valid kwargs for the marker properties are</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>Returns (
                                <emphasis>plotline</emphasis>
                                , 
                                <emphasis>caplines</emphasis>
                                , 
                                <emphasis>barlinecols</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>plotline</emphasis>: 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>
                                                <emphasis>x</emphasis>, 
                                                <emphasis>y</emphasis>
                                                plot markers and/or line</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>caplines</emphasis>: list of error bar cap</term>
                                        <definition>
                                            <paragraph>
                                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                    <literal classes="xref py py-class">Line2D</literal>
                                                </reference>instances</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>barlinecols</emphasis>: list of</term>
                                        <definition>
                                            <paragraph>
                                                <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                    <literal classes="xref py py-class">LineCollection</literal>
                                                </reference>instances for
the horizontal and vertical error ranges.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x', 'yerr', 'xerr'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'eventplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.eventplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.eventplot" ids="matplotlib.axes.Axes.eventplot" module="matplotlib.axes" names="matplotlib.axes.Axes.eventplot">
                            <desc_name>eventplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot identical parallel lines at specific positions.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">eventplot(positions, orientation='horizontal', lineoffsets=0,
          linelengths=1, linewidths=None, color =None,
          linestyles='solid'</literal_block>
                            <paragraph>Plot parallel lines at the given positions.  positions should be a 1D
or 2D array-like object, with each row corresponding to a row or column
of lines.</paragraph>
                            <paragraph>This type of plot is commonly used in neuroscience for representing
neural events, where it is commonly called a spike raster, dot raster,
or raster plot.</paragraph>
                            <paragraph>However, it is useful in any situation where you wish to show the
timing or position of multiple sets of discrete events, such as the
arrival times of people to a business on each day of the month or the
date of hurricanes each year of the last century.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>orientation</emphasis>
                                    </term>
                                    <classifier>[ 'horizonal' | 'vertical' ]</classifier>
                                    <definition>
                                        <paragraph>'horizonal' : the lines will be vertical and arranged in rows
&quot;vertical' : lines will be horizontal and arranged in columns</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>lineoffsets</emphasis>:</term>
                                    <definition>
                                        <paragraph>A float or array-like containing floats.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>linelengths</emphasis>:</term>
                                    <definition>
                                        <paragraph>A float or array-like containing floats.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>linewidths</emphasis>:</term>
                                    <definition>
                                        <paragraph>A float or array-like containing floats.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>colors</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>must be a sequence of RGBA tuples (e.g., arbitrary color
strings, etc, not allowed) or a list of such sequences</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>linestyles</emphasis>:</term>
                                    <definition>
                                        <paragraph>[ 'solid' | 'dashed' | 'dashdot' | 'dotted' ] or an array of these
values</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>For linelengths, linewidths, colors, and linestyles, if only a single
value is given, that value is applied to all lines.  If an array-like
is given, it must have the same length as positions, and each value
will be applied to the corresponding row or column in positions.</paragraph>
                            <paragraph>Returns a list of 
                                <reference internal="True" reftitle="matplotlib.collections.EventCollection" refuri="collections_api#matplotlib.collections.EventCollection">
                                    <literal classes="xref py py-class">matplotlib.collections.EventCollection</literal></reference>objects that were added.</paragraph>
                            <paragraph>kwargs are 
                                <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                    <literal classes="xref py py-class">LineCollection</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.LineCollection.set_color" refuri="collections_api#matplotlib.collections.LineCollection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.LineCollection.set_paths" refuri="collections_api#matplotlib.collections.LineCollection.set_paths">
                                                            <literal classes="xref py py-meth">paths</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.LineCollection.set_segments" refuri="collections_api#matplotlib.collections.LineCollection.set_segments">
                                                            <literal classes="xref py py-meth">segments</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.LineCollection.set_verts" refuri="collections_api#matplotlib.collections.LineCollection.set_verts">
                                                            <literal classes="xref py py-meth">verts</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'lineoffsets', 'linestyles', 'positions', 'linelengths', 'linewidths', 'colors'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fill()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.fill',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.fill" ids="matplotlib.axes.Axes.fill" module="matplotlib.axes" names="matplotlib.axes.Axes.fill">
                            <desc_name>fill</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot filled polygons.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">fill(*args, **kwargs)</literal_block>
                            <paragraph>
                                <emphasis>args</emphasis>is a variable length argument, allowing for multiple

                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                pairs with an optional color format string; see

                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>for details on the argument
parsing.  For example, to plot a polygon with vertices at 
                                <emphasis>x</emphasis>
                                ,

                                <emphasis>y</emphasis>
                                in blue.:</paragraph>
                            <literal_block xml:space="preserve">ax.fill(x,y, 'b' )</literal_block>
                            <paragraph>An arbitrary number of 
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                , 
                                <emphasis>color</emphasis>
                                groups can be specified:</paragraph>
                            <literal_block xml:space="preserve">ax.fill(x1, y1, 'g', x2, y2, 'r')</literal_block>
                            <paragraph>Return value is a list of 
                                <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                    <literal classes="xref py py-class">Patch</literal></reference>instances that were added.</paragraph>
                            <paragraph>The same color strings that 
                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>supports are supported by the fill format string.</paragraph>
                            <paragraph>If you would like to fill below a curve, e.g., shade a region
between 0 and 
                                <emphasis>y</emphasis>
                                along 
                                <emphasis>x</emphasis>
                                , use 
                                <literal classes="xref py py-meth">fill_between()</literal></paragraph>
                            <paragraph>The 
                                <emphasis>closed</emphasis>
                                kwarg will close the polygon when 
                                <emphasis>True</emphasis>
                                (default).</paragraph>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.patches.Polygon" refuri="patches_api#matplotlib.patches.Polygon">
                                    <literal classes="xref py py-class">Polygon</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="68"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_alpha" refuri="patches_api#matplotlib.patches.Patch.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_antialiased" refuri="patches_api#matplotlib.patches.Patch.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]  or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_capstyle" refuri="patches_api#matplotlib.patches.Patch.set_capstyle">
                                                            <literal classes="xref py py-meth">capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_color" refuri="patches_api#matplotlib.patches.Patch.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_edgecolor" refuri="patches_api#matplotlib.patches.Patch.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or ec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_facecolor" refuri="patches_api#matplotlib.patches.Patch.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or fc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>mpl color spec, or None for default, or 'none' for no color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_fill" refuri="patches_api#matplotlib.patches.Patch.set_fill">
                                                            <literal classes="xref py py-meth">fill</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_hatch" refuri="patches_api#matplotlib.patches.Patch.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_joinstyle" refuri="patches_api#matplotlib.patches.Patch.set_joinstyle">
                                                            <literal classes="xref py py-meth">joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linestyle" refuri="patches_api#matplotlib.patches.Patch.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch.set_linewidth" refuri="patches_api#matplotlib.patches.Patch.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None for default</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fill_between()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.fill_between',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.fill_between" ids="matplotlib.axes.Axes.fill_between" module="matplotlib.axes" names="matplotlib.axes.Axes.fill_between">
                            <desc_name>fill_between</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make filled polygons between two curves.</paragraph>
                            <paragraph>Create a 
                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>filling the regions between 
                                <emphasis>y1</emphasis>
                                and 
                                <emphasis>y2</emphasis>
                                where

                                <literal>where==True</literal></paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array of the x data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>y1</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array (or scalar) of the y data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>y2</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array (or scalar) of the y data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>where</strong>: array, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">None</literal>
                                                , default to fill between everywhere.  If not 
                                                <literal classes="xref py py-obj">None</literal>
                                                ,
it is an N-length numpy boolean array and the fill will
only happen over the regions where 
                                                <literal>where==True</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>interpolate</strong>: bool, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , interpolate between the two lines to find the
precise point of intersection.  Otherwise, the start and
end points of the filled region will only occur on explicit
values in the 
                                                <emphasis>x</emphasis>
                                                array.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>step</strong>: {'pre', 'post', 'mid'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If not None, fill with step logic.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y1', 'x', 'y2', 'where'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'fill_betweenx()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.fill_betweenx',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.fill_betweenx" ids="matplotlib.axes.Axes.fill_betweenx" module="matplotlib.axes" names="matplotlib.axes.Axes.fill_betweenx">
                            <desc_name>fill_betweenx</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make filled polygons between two horizontal curves.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">fill_betweenx(y, x1, x2=0, where=None, **kwargs)</literal_block>
                            <paragraph>Create a 
                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>filling the regions between 
                                <emphasis>x1</emphasis>
                                and 
                                <emphasis>x2</emphasis>
                                where

                                <literal>where==True</literal></paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>y</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array of the y data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>x1</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array (or scalar) of the x data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>x2</strong>: array, optional</paragraph>
                                        <block_quote>
                                            <paragraph>An N-length array (or scalar) of the x data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>where</strong>: array, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , default to fill between everywhere.  If not 
                                                <emphasis>None</emphasis>
                                                ,
it is a N length numpy boolean array and the fill will
only happen over the regions where 
                                                <literal>where==True</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>step</strong>: {'pre', 'post', 'mid'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If not None, fill with step logic.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x2', 'x1', 'where'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'findobj()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.findobj',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.findobj" ids="matplotlib.axes.Axes.findobj" module="matplotlib.axes" names="matplotlib.axes.Axes.findobj">
                            <desc_name>findobj</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>match=None</desc_parameter>
                                <desc_parameter>include_self=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Find artist objects.</paragraph>
                            <paragraph>Recursively find all 
                                <reference internal="True" reftitle="matplotlib.artist.Artist" refuri="artist_api#matplotlib.artist.Artist">
                                    <literal classes="xref py py-class">Artist</literal></reference>instances
contained in self.</paragraph>
                            <paragraph>
                                <emphasis>match</emphasis>can be</paragraph>
                            <block_quote>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>None: return all objects contained in artist.</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>function with signature 
                                            <literal>boolean = match(artist)</literal>
                                            used to filter matches</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>class instance: e.g., Line2D.  Only return artists of class type.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>If 
                                <emphasis>include_self</emphasis>
                                is True (default), include self in the list to be
checked for a match.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'format_coord()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.format_coord',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.format_coord" ids="matplotlib.axes.Axes.format_coord" module="matplotlib.axes" names="matplotlib.axes.Axes.format_coord">
                            <desc_name>format_coord</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return a format string formatting the 
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                coord</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'format_cursor_data()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.format_cursor_data',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.format_cursor_data" ids="matplotlib.axes.Axes.format_cursor_data" module="matplotlib.axes" names="matplotlib.axes.Axes.format_cursor_data">
                            <desc_name>format_cursor_data</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>data</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>cursor data</emphasis>
                                string formatted.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'format_xdata()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.format_xdata',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.format_xdata" ids="matplotlib.axes.Axes.format_xdata" module="matplotlib.axes" names="matplotlib.axes.Axes.format_xdata">
                            <desc_name>format_xdata</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>x</emphasis>
                                string formatted.  This function will use the attribute
self.fmt_xdata if it is callable, else will fall back on the xaxis
major formatter</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'format_ydata()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.format_ydata',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.format_ydata" ids="matplotlib.axes.Axes.format_ydata" module="matplotlib.axes" names="matplotlib.axes.Axes.format_ydata">
                            <desc_name>format_ydata</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>y</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return y string formatted.  This function will use the

                                <literal classes="xref py py-attr">fmt_ydata</literal>
                                attribute if it is callable, else will fall
back on the yaxis major formatter</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_adjustable()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_adjustable',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_adjustable" ids="matplotlib.axes.Axes.get_adjustable" module="matplotlib.axes" names="matplotlib.axes.Axes.get_adjustable">
                            <desc_name>get_adjustable</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_agg_filter()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_agg_filter',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_agg_filter" ids="matplotlib.axes.Axes.get_agg_filter" module="matplotlib.axes" names="matplotlib.axes.Axes.get_agg_filter">
                            <desc_name>get_agg_filter</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return filter function to be used for agg filter</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_alpha()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_alpha',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_alpha" ids="matplotlib.axes.Axes.get_alpha" module="matplotlib.axes" names="matplotlib.axes.Axes.get_alpha">
                            <desc_name>get_alpha</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the alpha value used for blending - not supported on all
backends</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_anchor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_anchor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_anchor" ids="matplotlib.axes.Axes.get_anchor" module="matplotlib.axes" names="matplotlib.axes.Axes.get_anchor">
                            <desc_name>get_anchor</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_animated()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_animated',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_animated" ids="matplotlib.axes.Axes.get_animated" module="matplotlib.axes" names="matplotlib.axes.Axes.get_animated">
                            <desc_name>get_animated</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the artist's animated state</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_aspect()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_aspect',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_aspect" ids="matplotlib.axes.Axes.get_aspect" module="matplotlib.axes" names="matplotlib.axes.Axes.get_aspect">
                            <desc_name>get_aspect</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_autoscale_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_autoscale_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_autoscale_on" ids="matplotlib.axes.Axes.get_autoscale_on" module="matplotlib.axes" names="matplotlib.axes.Axes.get_autoscale_on">
                            <desc_name>get_autoscale_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether autoscaling is applied for both axes on plot commands</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_autoscalex_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_autoscalex_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_autoscalex_on" ids="matplotlib.axes.Axes.get_autoscalex_on" module="matplotlib.axes" names="matplotlib.axes.Axes.get_autoscalex_on">
                            <desc_name>get_autoscalex_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether autoscaling for the x-axis is applied on plot commands</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_autoscaley_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_autoscaley_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_autoscaley_on" ids="matplotlib.axes.Axes.get_autoscaley_on" module="matplotlib.axes" names="matplotlib.axes.Axes.get_autoscaley_on">
                            <desc_name>get_autoscaley_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether autoscaling for the y-axis is applied on plot commands</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_axes()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_axes',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_axes" ids="matplotlib.axes.Axes.get_axes" module="matplotlib.axes" names="matplotlib.axes.Axes.get_axes">
                            <desc_name>get_axes</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the 
                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-class">Axes</literal></reference>instance the artist
resides in, or 
                                <emphasis>None</emphasis>
                                .</paragraph>
                            <paragraph>This has been deprecated in mpl 1.5, please use the
axes property.  Will be removed in 1.7 or 2.0.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_axes_locator()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_axes_locator',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_axes_locator" ids="matplotlib.axes.Axes.get_axes_locator" module="matplotlib.axes" names="matplotlib.axes.Axes.get_axes_locator">
                            <desc_name>get_axes_locator</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return axes_locator</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_axis_bgcolor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_axis_bgcolor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_axis_bgcolor" ids="matplotlib.axes.Axes.get_axis_bgcolor" module="matplotlib.axes" names="matplotlib.axes.Axes.get_axis_bgcolor">
                            <desc_name>get_axis_bgcolor</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the axis background color</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_axisbelow()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_axisbelow',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_axisbelow" ids="matplotlib.axes.Axes.get_axisbelow" module="matplotlib.axes" names="matplotlib.axes.Axes.get_axisbelow">
                            <desc_name>get_axisbelow</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether axis below is true or not</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_children()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_children',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_children" ids="matplotlib.axes.Axes.get_children" module="matplotlib.axes" names="matplotlib.axes.Axes.get_children">
                            <desc_name>get_children</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return a list of child artists</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_clip_box()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_clip_box',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_clip_box" ids="matplotlib.axes.Axes.get_clip_box" module="matplotlib.axes" names="matplotlib.axes.Axes.get_clip_box">
                            <desc_name>get_clip_box</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return artist clipbox</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_clip_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_clip_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_clip_on" ids="matplotlib.axes.Axes.get_clip_on" module="matplotlib.axes" names="matplotlib.axes.Axes.get_clip_on">
                            <desc_name>get_clip_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return whether artist uses clipping</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_clip_path()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_clip_path',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_clip_path" ids="matplotlib.axes.Axes.get_clip_path" module="matplotlib.axes" names="matplotlib.axes.Axes.get_clip_path">
                            <desc_name>get_clip_path</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return artist clip path</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_contains()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_contains',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_contains" ids="matplotlib.axes.Axes.get_contains" module="matplotlib.axes" names="matplotlib.axes.Axes.get_contains">
                            <desc_name>get_contains</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the _contains test used by the artist, or 
                                <emphasis>None</emphasis>
                                for default.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_cursor_data()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_cursor_data',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_cursor_data" ids="matplotlib.axes.Axes.get_cursor_data" module="matplotlib.axes" names="matplotlib.axes.Axes.get_cursor_data">
                            <desc_name>get_cursor_data</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>event</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the cursor data for a given event.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_cursor_props()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_cursor_props',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_cursor_props" ids="matplotlib.axes.Axes.get_cursor_props" module="matplotlib.axes" names="matplotlib.axes.Axes.get_cursor_props">
                            <desc_name>get_cursor_props</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the cursor propertiess as a (
                                <emphasis>linewidth</emphasis>
                                , 
                                <emphasis>color</emphasis>
                                )
tuple, where 
                                <emphasis>linewidth</emphasis>
                                is a float and 
                                <emphasis>color</emphasis>
                                is an RGBA
tuple</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_data_ratio()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_data_ratio',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_data_ratio" ids="matplotlib.axes.Axes.get_data_ratio" module="matplotlib.axes" names="matplotlib.axes.Axes.get_data_ratio">
                            <desc_name>get_data_ratio</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the aspect ratio of the raw data.</paragraph>
                            <paragraph>This method is intended to be overridden by new projection
types.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_data_ratio_log()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_data_ratio_log',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_data_ratio_log" ids="matplotlib.axes.Axes.get_data_ratio_log" module="matplotlib.axes" names="matplotlib.axes.Axes.get_data_ratio_log">
                            <desc_name>get_data_ratio_log</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the aspect ratio of the raw data in log scale.
Will be used when both axis scales are in log.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_default_bbox_extra_artists()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_default_bbox_extra_artists',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_default_bbox_extra_artists" ids="matplotlib.axes.Axes.get_default_bbox_extra_artists" module="matplotlib.axes" names="matplotlib.axes.Axes.get_default_bbox_extra_artists">
                            <desc_name>get_default_bbox_extra_artists</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_figure()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_figure',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_figure" ids="matplotlib.axes.Axes.get_figure" module="matplotlib.axes" names="matplotlib.axes.Axes.get_figure">
                            <desc_name>get_figure</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the 
                                <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                    <literal classes="xref py py-class">Figure</literal></reference>instance the
artist belongs to.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_frame_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_frame_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_frame_on" ids="matplotlib.axes.Axes.get_frame_on" module="matplotlib.axes" names="matplotlib.axes.Axes.get_frame_on">
                            <desc_name>get_frame_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether the axes rectangle patch is drawn</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_gid()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_gid',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_gid" ids="matplotlib.axes.Axes.get_gid" module="matplotlib.axes" names="matplotlib.axes.Axes.get_gid">
                            <desc_name>get_gid</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the group id</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_images()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_images',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_images" ids="matplotlib.axes.Axes.get_images" module="matplotlib.axes" names="matplotlib.axes.Axes.get_images">
                            <desc_name>get_images</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return a list of Axes images contained by the Axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_label()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_label',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_label" ids="matplotlib.axes.Axes.get_label" module="matplotlib.axes" names="matplotlib.axes.Axes.get_label">
                            <desc_name>get_label</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the label used for this artist in the legend.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_legend()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_legend',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_legend" ids="matplotlib.axes.Axes.get_legend" module="matplotlib.axes" names="matplotlib.axes.Axes.get_legend">
                            <desc_name>get_legend</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the legend.Legend instance, or None if no legend is defined</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_legend_handles_labels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_legend_handles_labels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_legend_handles_labels" ids="matplotlib.axes.Axes.get_legend_handles_labels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_legend_handles_labels">
                            <desc_name>get_legend_handles_labels</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>legend_handler_map=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return handles and labels for legend</paragraph>
                            <paragraph>
                                <literal>ax.legend()</literal>is equivalent to</paragraph>
                            <literal_block xml:space="preserve">h, l = ax.get_legend_handles_labels()
ax.legend(h, l)</literal_block>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_lines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_lines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_lines" ids="matplotlib.axes.Axes.get_lines" module="matplotlib.axes" names="matplotlib.axes.Axes.get_lines">
                            <desc_name>get_lines</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return a list of lines contained by the Axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_navigate()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_navigate',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_navigate" ids="matplotlib.axes.Axes.get_navigate" module="matplotlib.axes" names="matplotlib.axes.Axes.get_navigate">
                            <desc_name>get_navigate</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get whether the axes responds to navigation commands</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_navigate_mode()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_navigate_mode',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_navigate_mode" ids="matplotlib.axes.Axes.get_navigate_mode" module="matplotlib.axes" names="matplotlib.axes.Axes.get_navigate_mode">
                            <desc_name>get_navigate_mode</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the navigation toolbar button status: 'PAN', 'ZOOM', or None</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_path_effects()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_path_effects',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_path_effects" ids="matplotlib.axes.Axes.get_path_effects" module="matplotlib.axes" names="matplotlib.axes.Axes.get_path_effects">
                            <desc_name>get_path_effects</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_picker()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_picker',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_picker" ids="matplotlib.axes.Axes.get_picker" module="matplotlib.axes" names="matplotlib.axes.Axes.get_picker">
                            <desc_name>get_picker</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the picker object used by this artist</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_position()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_position',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_position" ids="matplotlib.axes.Axes.get_position" module="matplotlib.axes" names="matplotlib.axes.Axes.get_position">
                            <desc_name>get_position</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>original=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the a copy of the axes rectangle as a Bbox</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_rasterization_zorder()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_rasterization_zorder',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_rasterization_zorder" ids="matplotlib.axes.Axes.get_rasterization_zorder" module="matplotlib.axes" names="matplotlib.axes.Axes.get_rasterization_zorder">
                            <desc_name>get_rasterization_zorder</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get zorder value below which artists will be rasterized</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_rasterized()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_rasterized',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_rasterized" ids="matplotlib.axes.Axes.get_rasterized" module="matplotlib.axes" names="matplotlib.axes.Axes.get_rasterized">
                            <desc_name>get_rasterized</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return True if the artist is to be rasterized</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_renderer_cache()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_renderer_cache',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_renderer_cache" ids="matplotlib.axes.Axes.get_renderer_cache" module="matplotlib.axes" names="matplotlib.axes.Axes.get_renderer_cache">
                            <desc_name>get_renderer_cache</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'get_shared_x_axes()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_shared_x_axes',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_shared_x_axes" ids="matplotlib.axes.Axes.get_shared_x_axes" module="matplotlib.axes" names="matplotlib.axes.Axes.get_shared_x_axes">
                            <desc_name>get_shared_x_axes</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return a copy of the shared axes Grouper object for x axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_shared_y_axes()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_shared_y_axes',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_shared_y_axes" ids="matplotlib.axes.Axes.get_shared_y_axes" module="matplotlib.axes" names="matplotlib.axes.Axes.get_shared_y_axes">
                            <desc_name>get_shared_y_axes</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return a copy of the shared axes Grouper object for y axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_sketch_params()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_sketch_params',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_sketch_params" ids="matplotlib.axes.Axes.get_sketch_params" module="matplotlib.axes" names="matplotlib.axes.Axes.get_sketch_params">
                            <desc_name>get_sketch_params</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the sketch parameters for the artist.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>sketch_params</strong>: tuple or 
                                            <literal classes="xref py py-obj">None</literal></paragraph>
                                        <paragraph>A 3-tuple with the following elements:</paragraph>
                                        <block_quote>
                                            <bullet_list bullet="*">
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">scale</literal>: The amplitude of the wiggle perpendicular to the
source line.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">length</literal>: The length of the wiggle along the line.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">randomness</literal>: The scale factor by which the length is
shrunken or expanded.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                        <paragraph>May return 
                                            <literal classes="xref py py-obj">None</literal>
                                            if no sketch parameters were set.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_snap()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_snap',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_snap" ids="matplotlib.axes.Axes.get_snap" module="matplotlib.axes" names="matplotlib.axes.Axes.get_snap">
                            <desc_name>get_snap</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the snap setting which may be:</paragraph>
                            <block_quote>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>True: snap vertices to the nearest pixel center</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>False: leave vertices as-is</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>None: (auto) If the path contains only rectilinear line
segments, round to the nearest pixel center</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>Only supported by the Agg and MacOSX backends.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_tightbbox()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_tightbbox',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_tightbbox" ids="matplotlib.axes.Axes.get_tightbbox" module="matplotlib.axes" names="matplotlib.axes.Axes.get_tightbbox">
                            <desc_name>get_tightbbox</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>renderer</desc_parameter>
                                <desc_parameter>call_axes_locator=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the tight bounding box of the axes.
The dimension of the Bbox in canvas coordinate.</paragraph>
                            <paragraph>If 
                                <emphasis>call_axes_locator</emphasis>
                                is 
                                <emphasis>False</emphasis>
                                , it does not call the
_axes_locator attribute, which is necessary to get the correct
bounding box. 
                                <literal>call_axes_locator==False</literal>
                                can be used if the
caller is only intereted in the relative size of the tightbbox
compared to the axes bbox.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_title()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_title',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_title" ids="matplotlib.axes.Axes.get_title" module="matplotlib.axes" names="matplotlib.axes.Axes.get_title">
                            <desc_name>get_title</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>loc=u'center'</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get an axes title.</paragraph>
                            <paragraph>Get one of the three available axes titles. The available titles
are positioned above the axes in the center, flush with the left
edge, and flush with the right edge.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>loc</strong>: {'center', 'left', 'right'}, str, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Which title to get, defaults to 'center'</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>title: str</paragraph>
                                        <block_quote>
                                            <paragraph>The title text string.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_transform" ids="matplotlib.axes.Axes.get_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_transform">
                            <desc_name>get_transform</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the 
                                <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                    <literal classes="xref py py-class">Transform</literal></reference>instance used by this artist.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_transformed_clip_path_and_affine()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_transformed_clip_path_and_affine',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_transformed_clip_path_and_affine" ids="matplotlib.axes.Axes.get_transformed_clip_path_and_affine" module="matplotlib.axes" names="matplotlib.axes.Axes.get_transformed_clip_path_and_affine">
                            <desc_name>get_transformed_clip_path_and_affine</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the clip path with the non-affine part of its
transformation applied, and the remaining affine part of its
transformation.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_url()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_url',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_url" ids="matplotlib.axes.Axes.get_url" module="matplotlib.axes" names="matplotlib.axes.Axes.get_url">
                            <desc_name>get_url</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the url</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_visible()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_visible',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_visible" ids="matplotlib.axes.Axes.get_visible" module="matplotlib.axes" names="matplotlib.axes.Axes.get_visible">
                            <desc_name>get_visible</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the artist's visiblity</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_window_extent()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_window_extent',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_window_extent" ids="matplotlib.axes.Axes.get_window_extent" module="matplotlib.axes" names="matplotlib.axes.Axes.get_window_extent">
                            <desc_name>get_window_extent</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>get the axes bounding box in display space; 
                                <emphasis>args</emphasis>
                                and

                                <emphasis>kwargs</emphasis>
                                are empty</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xaxis()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xaxis',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xaxis" ids="matplotlib.axes.Axes.get_xaxis" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xaxis">
                            <desc_name>get_xaxis</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the XAxis instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xaxis_text1_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xaxis_text1_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xaxis_text1_transform" ids="matplotlib.axes.Axes.get_xaxis_text1_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xaxis_text1_transform">
                            <desc_name>get_xaxis_text1_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>pad_points</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing x-axis labels, which
will add the given amount of padding (in points) between the
axes and the label.  The x-direction is in data coordinates
and the y-direction is in axis coordinates.  Returns a
3-tuple of the form:</paragraph>
                            <literal_block xml:space="preserve">(transform, valign, halign)</literal_block>
                            <paragraph>where 
                                <emphasis>valign</emphasis>
                                and 
                                <emphasis>halign</emphasis>
                                are requested alignments for the
text.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xaxis_text2_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xaxis_text2_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xaxis_text2_transform" ids="matplotlib.axes.Axes.get_xaxis_text2_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xaxis_text2_transform">
                            <desc_name>get_xaxis_text2_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>pad_points</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing the secondary x-axis
labels, which will add the given amount of padding (in points)
between the axes and the label.  The x-direction is in data
coordinates and the y-direction is in axis coordinates.
Returns a 3-tuple of the form:</paragraph>
                            <literal_block xml:space="preserve">(transform, valign, halign)</literal_block>
                            <paragraph>where 
                                <emphasis>valign</emphasis>
                                and 
                                <emphasis>halign</emphasis>
                                are requested alignments for the
text.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xaxis_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xaxis_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xaxis_transform" ids="matplotlib.axes.Axes.get_xaxis_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xaxis_transform">
                            <desc_name>get_xaxis_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>which=u'grid'</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing x-axis labels, ticks
and gridlines.  The x-direction is in data coordinates and the
y-direction is in axis coordinates.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xbound()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xbound',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xbound" ids="matplotlib.axes.Axes.get_xbound" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xbound">
                            <desc_name>get_xbound</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns the x-axis numerical bounds where:</paragraph>
                            <literal_block xml:space="preserve">lowerBound &lt; upperBound</literal_block>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xgridlines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xgridlines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xgridlines" ids="matplotlib.axes.Axes.get_xgridlines" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xgridlines">
                            <desc_name>get_xgridlines</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the x grid lines as a list of Line2D instances</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xlabel()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xlabel',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xlabel" ids="matplotlib.axes.Axes.get_xlabel" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xlabel">
                            <desc_name>get_xlabel</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the xlabel text string.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xlim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xlim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xlim" ids="matplotlib.axes.Axes.get_xlim" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xlim">
                            <desc_name>get_xlim</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the x-axis range [
                                <emphasis>left</emphasis>
                                , 
                                <emphasis>right</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xmajorticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xmajorticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xmajorticklabels" ids="matplotlib.axes.Axes.get_xmajorticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xmajorticklabels">
                            <desc_name>get_xmajorticklabels</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the xtick labels as a list of 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xminorticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xminorticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xminorticklabels" ids="matplotlib.axes.Axes.get_xminorticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xminorticklabels">
                            <desc_name>get_xminorticklabels</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the x minor tick labels as a list of

                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">matplotlib.text.Text</literal></reference>instances.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xscale()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xscale',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xscale" ids="matplotlib.axes.Axes.get_xscale" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xscale">
                            <desc_name>get_xscale</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the xaxis scale string: linear, log, logit, symlog</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xticklabels" ids="matplotlib.axes.Axes.get_xticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xticklabels">
                            <desc_name>get_xticklabels</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>minor=False</desc_parameter>
                                <desc_parameter>which=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the x tick labels as a list of 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>minor</strong>: bool</paragraph>
                                        <block_quote>
                                            <paragraph>If True return the minor ticklabels,
else return the major ticklabels</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>which</strong>: None, ('minor', 'major', 'both')</paragraph>
                                        <block_quote>
                                            <paragraph>Overrides 
                                                <literal classes="xref py py-obj">minor</literal>
                                                .</paragraph>
                                            <paragraph>Selects which ticklabels to return</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>ret</strong>: list</paragraph>
                                        <block_quote>
                                            <paragraph>List of 
                                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xticklines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xticklines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xticklines" ids="matplotlib.axes.Axes.get_xticklines" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xticklines">
                            <desc_name>get_xticklines</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the xtick lines as a list of Line2D instances</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_xticks()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_xticks',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_xticks" ids="matplotlib.axes.Axes.get_xticks" module="matplotlib.axes" names="matplotlib.axes.Axes.get_xticks">
                            <desc_name>get_xticks</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>minor=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the x ticks as a list of locations</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yaxis()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yaxis',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yaxis" ids="matplotlib.axes.Axes.get_yaxis" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yaxis">
                            <desc_name>get_yaxis</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the YAxis instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yaxis_text1_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yaxis_text1_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yaxis_text1_transform" ids="matplotlib.axes.Axes.get_yaxis_text1_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yaxis_text1_transform">
                            <desc_name>get_yaxis_text1_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>pad_points</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing y-axis labels, which
will add the given amount of padding (in points) between the
axes and the label.  The x-direction is in axis coordinates
and the y-direction is in data coordinates.  Returns a 3-tuple
of the form:</paragraph>
                            <literal_block xml:space="preserve">(transform, valign, halign)</literal_block>
                            <paragraph>where 
                                <emphasis>valign</emphasis>
                                and 
                                <emphasis>halign</emphasis>
                                are requested alignments for the
text.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yaxis_text2_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yaxis_text2_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yaxis_text2_transform" ids="matplotlib.axes.Axes.get_yaxis_text2_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yaxis_text2_transform">
                            <desc_name>get_yaxis_text2_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>pad_points</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing the secondary y-axis
labels, which will add the given amount of padding (in points)
between the axes and the label.  The x-direction is in axis
coordinates and the y-direction is in data coordinates.
Returns a 3-tuple of the form:</paragraph>
                            <literal_block xml:space="preserve">(transform, valign, halign)</literal_block>
                            <paragraph>where 
                                <emphasis>valign</emphasis>
                                and 
                                <emphasis>halign</emphasis>
                                are requested alignments for the
text.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yaxis_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yaxis_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yaxis_transform" ids="matplotlib.axes.Axes.get_yaxis_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yaxis_transform">
                            <desc_name>get_yaxis_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>which=u'grid'</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the transformation used for drawing y-axis labels, ticks
and gridlines.  The x-direction is in axis coordinates and the
y-direction is in data coordinates.</paragraph>
                            <note>
                                <paragraph>This transformation is primarily used by the

                                    <reference internal="True" reftitle="matplotlib.axis.Axis" refuri="axis_api#matplotlib.axis.Axis">
                                        <literal classes="xref py py-class">Axis</literal></reference>class, and is meant to be
overridden by new kinds of projections that may need to
place axis elements in different locations.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ybound()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_ybound',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_ybound" ids="matplotlib.axes.Axes.get_ybound" module="matplotlib.axes" names="matplotlib.axes.Axes.get_ybound">
                            <desc_name>get_ybound</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return y-axis numerical bounds in the form of

                                <literal>lowerBound &lt; upperBound</literal></paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ygridlines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_ygridlines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_ygridlines" ids="matplotlib.axes.Axes.get_ygridlines" module="matplotlib.axes" names="matplotlib.axes.Axes.get_ygridlines">
                            <desc_name>get_ygridlines</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the y grid lines as a list of Line2D instances</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ylabel()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_ylabel',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_ylabel" ids="matplotlib.axes.Axes.get_ylabel" module="matplotlib.axes" names="matplotlib.axes.Axes.get_ylabel">
                            <desc_name>get_ylabel</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the ylabel text string.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ylim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_ylim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_ylim" ids="matplotlib.axes.Axes.get_ylim" module="matplotlib.axes" names="matplotlib.axes.Axes.get_ylim">
                            <desc_name>get_ylim</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the y-axis range [
                                <emphasis>bottom</emphasis>
                                , 
                                <emphasis>top</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_ymajorticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_ymajorticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_ymajorticklabels" ids="matplotlib.axes.Axes.get_ymajorticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_ymajorticklabels">
                            <desc_name>get_ymajorticklabels</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the major y tick labels as a list of

                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yminorticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yminorticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yminorticklabels" ids="matplotlib.axes.Axes.get_yminorticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yminorticklabels">
                            <desc_name>get_yminorticklabels</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the minor y tick labels as a list of

                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yscale()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yscale',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yscale" ids="matplotlib.axes.Axes.get_yscale" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yscale">
                            <desc_name>get_yscale</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the yaxis scale string: linear, log, logit, symlog</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yticklabels" ids="matplotlib.axes.Axes.get_yticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yticklabels">
                            <desc_name>get_yticklabels</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>minor=False</desc_parameter>
                                <desc_parameter>which=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the x tick labels as a list of 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>minor</strong>: bool</paragraph>
                                        <block_quote>
                                            <paragraph>If True return the minor ticklabels,
else return the major ticklabels</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>which</strong>: None, ('minor', 'major', 'both')</paragraph>
                                        <block_quote>
                                            <paragraph>Overrides 
                                                <literal classes="xref py py-obj">minor</literal>
                                                .</paragraph>
                                            <paragraph>Selects which ticklabels to return</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>ret</strong>: list</paragraph>
                                        <block_quote>
                                            <paragraph>List of 
                                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yticklines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yticklines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yticklines" ids="matplotlib.axes.Axes.get_yticklines" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yticklines">
                            <desc_name>get_yticklines</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Get the ytick lines as a list of Line2D instances</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_yticks()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_yticks',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_yticks" ids="matplotlib.axes.Axes.get_yticks" module="matplotlib.axes" names="matplotlib.axes.Axes.get_yticks">
                            <desc_name>get_yticks</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>minor=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the y ticks as a list of locations</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'get_zorder()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.get_zorder',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.get_zorder" ids="matplotlib.axes.Axes.get_zorder" module="matplotlib.axes" names="matplotlib.axes.Axes.get_zorder">
                            <desc_name>get_zorder</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return the 
                                <literal classes="xref py py-class">Artist</literal>
                                's zorder.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'grid()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.grid',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.grid" ids="matplotlib.axes.Axes.grid" module="matplotlib.axes" names="matplotlib.axes.Axes.grid">
                            <desc_name>grid</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b=None</desc_parameter>
                                <desc_parameter>which=u'major'</desc_parameter>
                                <desc_parameter>axis=u'both'</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Turn the axes grids on or off.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">grid(self, b=None, which='major', axis='both', **kwargs)</literal_block>
                            <paragraph>Set the axes grids on or off; 
                                <emphasis>b</emphasis>
                                is a boolean.  (For MATLAB
compatibility, 
                                <emphasis>b</emphasis>
                                may also be a string, 'on' or 'off'.)</paragraph>
                            <paragraph>If 
                                <emphasis>b</emphasis>
                                is 
                                <emphasis>None</emphasis>
                                and 
                                <literal>len(kwargs)==0</literal>
                                , toggle the grid state.  If

                                <emphasis>kwargs</emphasis>
                                are supplied, it is assumed that you want a grid and 
                                <emphasis>b</emphasis>
                                is thus set to 
                                <emphasis>True</emphasis>
                                .</paragraph>
                            <paragraph>
                                <emphasis>which</emphasis>can be 'major' (default), 'minor', or 'both' to control
whether major tick grids, minor tick grids, or both are affected.</paragraph>
                            <paragraph>
                                <emphasis>axis</emphasis>can be 'both' (default), 'x', or 'y' to control which
set of gridlines are drawn.</paragraph>
                            <paragraph>
                                <emphasis>kwargs</emphasis>are used to set the grid line properties, e.g.,:</paragraph>
                            <literal_block xml:space="preserve">ax.grid(color='r', linestyle='-', linewidth=2)</literal_block>
                            <paragraph>Valid 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>kwargs are</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'has_data()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.has_data',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.has_data" ids="matplotlib.axes.Axes.has_data" module="matplotlib.axes" names="matplotlib.axes.Axes.has_data">
                            <desc_name>has_data</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if any artists have been added to axes.</paragraph>
                            <paragraph>This should not be used to determine whether the 
                                <emphasis>dataLim</emphasis>
                                need to be updated, and may not actually be useful for
anything.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'have_units()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.have_units',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.have_units" ids="matplotlib.axes.Axes.have_units" module="matplotlib.axes" names="matplotlib.axes.Axes.have_units">
                            <desc_name>have_units</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if units are set on the 
                                <emphasis>x</emphasis>
                                or 
                                <emphasis>y</emphasis>
                                axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hexbin()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hexbin',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hexbin" ids="matplotlib.axes.Axes.hexbin" module="matplotlib.axes" names="matplotlib.axes.Axes.hexbin">
                            <desc_name>hexbin</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a hexagonal binning plot.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">hexbin(x, y, C = None, gridsize = 100, bins = None,
       xscale = 'linear', yscale = 'linear',
       cmap=None, norm=None, vmin=None, vmax=None,
       alpha=None, linewidths=None, edgecolors='none'
       reduce_C_function = np.mean, mincnt=None, marginals=True
       **kwargs)</literal_block>
                            <paragraph>Make a hexagonal binning plot of 
                                <emphasis>x</emphasis>
                                versus 
                                <emphasis>y</emphasis>
                                , where 
                                <emphasis>x</emphasis>
                                ,

                                <emphasis>y</emphasis>
                                are 1-D sequences of the same length, 
                                <emphasis>N</emphasis>
                                . If 
                                <emphasis>C</emphasis>
                                is 
                                <emphasis>None</emphasis>
                                (the default), this is a histogram of the number of occurences
of the observations at (x[i],y[i]).</paragraph>
                            <paragraph>If 
                                <emphasis>C</emphasis>
                                is specified, it specifies values at the coordinate
(x[i],y[i]). These values are accumulated for each hexagonal
bin and then reduced according to 
                                <emphasis>reduce_C_function</emphasis>
                                , which
defaults to numpy's mean function (np.mean). (If 
                                <emphasis>C</emphasis>
                                is
specified, it must also be a 1-D sequence of the same length
as 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                .)</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>, 
                                <emphasis>y</emphasis>
                                and/or 
                                <emphasis>C</emphasis>
                                may be masked arrays, in which case only
unmasked points will be plotted.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>gridsize</emphasis>: [ 100 | integer ]</term>
                                    <definition>
                                        <paragraph>The number of hexagons in the 
                                            <emphasis>x</emphasis>
                                            -direction, default is
100. The corresponding number of hexagons in the

                                            <emphasis>y</emphasis>
                                            -direction is chosen such that the hexagons are
approximately regular. Alternatively, gridsize can be a
tuple with two elements specifying the number of hexagons
in the 
                                            <emphasis>x</emphasis>
                                            -direction and the 
                                            <emphasis>y</emphasis>
                                            -direction.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>bins</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | 'log' | integer | sequence ]</term>
                                    <definition>
                                        <paragraph>If 
                                            <emphasis>None</emphasis>
                                            , no binning is applied; the color of each hexagon
directly corresponds to its count value.</paragraph>
                                        <paragraph>If 'log', use a logarithmic scale for the color
map. Internally, 
                                            <latex_math fontset="cm" latex="log_{10}(i+1)"/>
                                            is used to
determine the hexagon color.</paragraph>
                                        <paragraph>If an integer, divide the counts in the specified number
of bins, and color the hexagons accordingly.</paragraph>
                                        <paragraph>If a sequence of values, the values of the lower bound of
the bins to be used.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>xscale</emphasis>: [ 'linear' | 'log' ]</term>
                                    <definition>
                                        <paragraph>Use a linear or log10 scale on the horizontal axis.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>scale</emphasis>: [ 'linear' | 'log' ]</term>
                                    <definition>
                                        <paragraph>Use a linear or log10 scale on the vertical axis.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>mincnt</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | a positive integer ]</term>
                                    <definition>
                                        <paragraph>If not 
                                            <emphasis>None</emphasis>
                                            , only display cells with more than 
                                            <emphasis>mincnt</emphasis>
                                            number of points in the cell</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>marginals</emphasis>: [ 
                                        <emphasis>True</emphasis>
                                        | 
                                        <emphasis>False</emphasis>
                                        ]</term>
                                    <definition>
                                        <paragraph>if marginals is 
                                            <emphasis>True</emphasis>
                                            , plot the marginal density as
colormapped rectagles along the bottom of the x-axis and
left of the y-axis</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>extent</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | scalars (left, right, bottom, top) ]</term>
                                    <definition>
                                        <paragraph>The limits of the bins. The default assigns the limits
based on gridsize, x, y, xscale and yscale.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Other keyword arguments controlling color mapping and normalization
arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>cmap</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | Colormap ]</term>
                                    <definition>
                                        <paragraph>a 
                                            <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                <literal classes="xref py py-class">matplotlib.colors.Colormap</literal></reference>instance. If 
                                            <emphasis>None</emphasis>
                                            ,
defaults to rc 
                                            <literal>image.cmap</literal>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>norm</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | Normalize ]</term>
                                    <definition>
                                        <paragraph>
                                            <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                <literal classes="xref py py-class">matplotlib.colors.Normalize</literal>
                                            </reference>instance is used to
scale luminance data to 0,1.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>vmin</emphasis>/ 
                                        <emphasis>vmax</emphasis>
                                        : scalar</term>
                                    <definition>
                                        <paragraph>
                                            <emphasis>vmin</emphasis>and 
                                            <emphasis>vmax</emphasis>
                                            are used in conjunction with 
                                            <emphasis>norm</emphasis>
                                            to normalize
luminance data.  If either are 
                                            <emphasis>None</emphasis>
                                            , the min and max of the color
array 
                                            <emphasis>C</emphasis>
                                            is used.  Note if you pass a norm instance, your settings
for 
                                            <emphasis>vmin</emphasis>
                                            and 
                                            <emphasis>vmax</emphasis>
                                            will be ignored.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>alpha</emphasis>: scalar between 0 and 1, or 
                                        <emphasis>None</emphasis></term>
                                    <definition>
                                        <paragraph>the alpha value for the patches</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>linewidths</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | scalar ]</term>
                                    <definition>
                                        <paragraph>If 
                                            <emphasis>None</emphasis>
                                            , defaults to rc lines.linewidth. Note that this
is a tuple, and if you set the linewidths argument you
must set it as a sequence of floats, as required by

                                            <reference internal="True" reftitle="matplotlib.collections.RegularPolyCollection" refuri="collections_api#matplotlib.collections.RegularPolyCollection">
                                                <literal classes="xref py py-class">RegularPolyCollection</literal></reference>.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Other keyword arguments controlling the Collection properties:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>edgecolors</emphasis>: [ 
                                        <emphasis>None</emphasis>
                                        | 
                                        <literal>'none'</literal>
                                        | mpl color | color sequence ]</term>
                                    <definition>
                                        <paragraph>If 
                                            <literal>'none'</literal>
                                            , draws the edges in the same color as the fill color.
This is the default, as it avoids unsightly unpainted pixels
between the hexagons.</paragraph>
                                        <paragraph>If 
                                            <emphasis>None</emphasis>
                                            , draws the outlines in the default color.</paragraph>
                                        <paragraph>If a matplotlib color arg or sequence of rgba tuples, draws the
outlines in the specified color.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Here are the standard descriptions of all the

                                <reference internal="True" reftitle="matplotlib.collections.Collection" refuri="collections_api#matplotlib.collections.Collection">
                                    <literal classes="xref py py-class">Collection</literal></reference>kwargs:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>The return value is a

                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>instance; use

                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection.get_array" refuri="collections_api#matplotlib.collections.PolyCollection.get_array">
                                    <literal classes="xref py py-meth">get_array()</literal></reference>on
this 
                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>to get
the counts in each hexagon. If 
                                <emphasis>marginals</emphasis>
                                is 
                                <emphasis>True</emphasis>
                                , horizontal
bar and vertical bar (both PolyCollections) will be attached
to the return collection as attributes 
                                <emphasis>hbar</emphasis>
                                and 
                                <emphasis>vbar</emphasis>
                                .</paragraph>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hist()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hist',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hist" ids="matplotlib.axes.Axes.hist" module="matplotlib.axes" names="matplotlib.axes.Axes.hist">
                            <desc_name>hist</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a histogram.</paragraph>
                            <paragraph>Compute and draw the histogram of 
                                <emphasis>x</emphasis>
                                . The return value is a
tuple (
                                <emphasis>n</emphasis>
                                , 
                                <emphasis>bins</emphasis>
                                , 
                                <emphasis>patches</emphasis>
                                ) or ([
                                <emphasis>n0</emphasis>
                                , 
                                <emphasis>n1</emphasis>
                                , ...], 
                                <emphasis>bins</emphasis>
                                ,
[
                                <emphasis>patches0</emphasis>
                                , 
                                <emphasis>patches1</emphasis>
                                ,...]) if the input contains multiple
data.</paragraph>
                            <paragraph>Multiple data can be provided via 
                                <emphasis>x</emphasis>
                                as a list of datasets
of potentially different length ([
                                <emphasis>x0</emphasis>
                                , 
                                <emphasis>x1</emphasis>
                                , ...]), or as
a 2-D ndarray in which each column is a dataset.  Note that
the ndarray form is transposed relative to the list form.</paragraph>
                            <paragraph>Masked arrays are not supported at present.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: (n,) array or sequence of (n,) arrays</paragraph>
                                        <block_quote>
                                            <paragraph>Input values, this takes either a single array or a sequency of
arrays which are not required to be of the same length</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bins</strong>: integer or array_like, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If an integer is given, 
                                                <literal classes="xref py py-obj">bins + 1</literal>
                                                bin edges are returned,
consistently with 
                                                <literal classes="xref py py-func">numpy.histogram()</literal>
                                                for numpy version &gt;=
1.3.</paragraph>
                                            <paragraph>Unequally spaced bins are supported if 
                                                <literal classes="xref py py-obj">bins</literal>
                                                is a sequence.</paragraph>
                                            <paragraph>default is 10</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>range</strong>: tuple or None, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The lower and upper range of the bins. Lower and upper outliers
are ignored. If not provided, 
                                                <literal classes="xref py py-obj">range</literal>
                                                is (x.min(), x.max()). Range
has no effect if 
                                                <literal classes="xref py py-obj">bins</literal>
                                                is a sequence.</paragraph>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">bins</literal>
                                                is a sequence or 
                                                <literal classes="xref py py-obj">range</literal>
                                                is specified, autoscaling
is based on the specified bin range instead of the
range of x.</paragraph>
                                            <paragraph>Default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>normed</strong>: boolean, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , the first element of the return tuple will
be the counts normalized to form a probability density, i.e.,

                                                <literal>n/(len(x)`dbin)</literal>
                                                , i.e., the integral of the histogram will sum
to 1. If 
                                                <emphasis>stacked</emphasis>
                                                is also 
                                                <emphasis>True</emphasis>
                                                , the sum of the histograms is
normalized to 1.</paragraph>
                                            <paragraph>Default is 
                                                <literal>False</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>weights</strong>: (n, ) array_like or None, optional</paragraph>
                                        <block_quote>
                                            <paragraph>An array of weights, of the same shape as 
                                                <literal classes="xref py py-obj">x</literal>
                                                .  Each value in 
                                                <literal classes="xref py py-obj">x</literal>
                                                only contributes its associated weight towards the bin count
(instead of 1).  If 
                                                <literal classes="xref py py-obj">normed</literal>
                                                is True, the weights are normalized,
so that the integral of the density over the range remains 1.</paragraph>
                                            <paragraph>Default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>cumulative</strong>: boolean, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , then a histogram is computed where each bin gives the
counts in that bin plus all bins for smaller values. The last bin
gives the total number of datapoints.  If 
                                                <literal classes="xref py py-obj">normed</literal>
                                                is also 
                                                <literal classes="xref py py-obj">True</literal>
                                                then the histogram is normalized such that the last bin equals 1.
If 
                                                <literal classes="xref py py-obj">cumulative</literal>
                                                evaluates to less than 0 (e.g., -1), the direction
of accumulation is reversed.  In this case, if 
                                                <literal classes="xref py py-obj">normed</literal>
                                                is also

                                                <literal classes="xref py py-obj">True</literal>
                                                , then the histogram is normalized such that the first bin
equals 1.</paragraph>
                                            <paragraph>Default is 
                                                <literal>False</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bottom</strong>: array_like, scalar, or None</paragraph>
                                        <block_quote>
                                            <paragraph>Location of the bottom baseline of each bin.  If a scalar,
the base line for each bin is shifted by the same amount.
If an array, each bin is shifted independently and the length
of bottom must match the number of bins.  If None, defaults to 0.</paragraph>
                                            <paragraph>Default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>histtype</strong>: {'bar', 'barstacked', 'step',  'stepfilled'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The type of histogram to draw.</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>'bar' is a traditional bar-type histogram.  If multiple data
are given the bars are aranged side by side.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>'barstacked' is a bar-type histogram where multiple
data are stacked on top of each other.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>'step' generates a lineplot that is by default
unfilled.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>'stepfilled' generates a lineplot that is by default
filled.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                            <paragraph>Default is 'bar'</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>align</strong>: {'left', 'mid', 'right'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Controls how the histogram is plotted.</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>'left': bars are centered on the left bin edges.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'mid': bars are centered between the bin edges.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>'right': bars are centered on the right bin edges.</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                            <paragraph>Default is 'mid'</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>orientation</strong>: {'horizontal', 'vertical'}, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 'horizontal', 
                                                <reference internal="True" reftitle="matplotlib.pyplot.barh" refuri="pyplot_api#matplotlib.pyplot.barh">
                                                    <literal classes="xref py py-obj">barh</literal></reference>will be used for
bar-type histograms and the 
                                                <emphasis>bottom</emphasis>
                                                kwarg will be the left edges.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>rwidth</strong>: scalar or None, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The relative width of the bars as a fraction of the bin width.  If

                                                <literal classes="xref py py-obj">None</literal>
                                                , automatically compute the width.</paragraph>
                                            <paragraph>Ignored if 
                                                <literal classes="xref py py-obj">histtype</literal>
                                                is 'step' or 'stepfilled'.</paragraph>
                                            <paragraph>Default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>log</strong>: boolean, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , the histogram axis will be set to a log scale. If 
                                                <literal classes="xref py py-obj">log</literal>
                                                is 
                                                <literal classes="xref py py-obj">True</literal>
                                                and 
                                                <literal classes="xref py py-obj">x</literal>
                                                is a 1D array, empty bins will be filtered out
and only the non-empty (
                                                <literal classes="xref py py-obj">n</literal>
                                                , 
                                                <literal classes="xref py py-obj">bins</literal>
                                                , 
                                                <literal classes="xref py py-obj">patches</literal>
                                                ) will be returned.</paragraph>
                                            <paragraph>Default is 
                                                <literal>False</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>color</strong>: color or array_like of colors or None, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Color spec or sequence of color specs, one per dataset.  Default
(
                                                <literal classes="xref py py-obj">None</literal>
                                                ) uses the standard line color sequence.</paragraph>
                                            <paragraph>Default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>label</strong>: string or None, optional</paragraph>
                                        <block_quote>
                                            <paragraph>String, or sequence of strings to match multiple datasets.  Bar
charts yield multiple patches per dataset, but only the first gets
the label, so that the legend command will work as expected.</paragraph>
                                            <paragraph>default is 
                                                <literal>None</literal></paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>stacked</strong>: boolean, optional</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">True</literal>
                                                , multiple data are stacked on top of each other If

                                                <literal classes="xref py py-obj">False</literal>
                                                multiple data are aranged side by side if histtype is
'bar' or on top of each other if histtype is 'step'</paragraph>
                                            <paragraph>Default is 
                                                <literal>False</literal></paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>n</strong>: array or list of arrays</paragraph>
                                        <block_quote>
                                            <paragraph>The values of the histogram bins. See 
                                                <strong>normed</strong>
                                                and 
                                                <strong>weights</strong>
                                                for a description of the possible semantics. If input 
                                                <strong>x</strong>
                                                is an
array, then this is an array of length 
                                                <strong>nbins</strong>
                                                . If input is a
sequence arrays 
                                                <literal>[data1, data2,..]</literal>
                                                , then this is a list of
arrays with the values of the histograms for each of the arrays
in the same order.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bins</strong>: array</paragraph>
                                        <block_quote>
                                            <paragraph>The edges of the bins. Length nbins + 1 (nbins left edges and right
edge of last bin).  Always a single array even when multiple data
sets are passed in.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>patches</strong>: list or list of lists</paragraph>
                                        <block_quote>
                                            <paragraph>Silent list of individual patches used to create the histogram
or list of such list if multiple input datasets.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                <literal classes="xref py py-obj">Patch</literal></reference>properties</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">hist2d</literal>
                                        </term>
                                        <definition>
                                            <paragraph>2D histograms</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x', 'weights'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hist2d()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hist2d',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hist2d" ids="matplotlib.axes.Axes.hist2d" module="matplotlib.axes" names="matplotlib.axes.Axes.hist2d">
                            <desc_name>hist2d</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a 2D histogram plot.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x, y: array_like, shape (n, )</strong>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>Input values</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bins: [None | int | [int, int] | array_like | [array, array]]</strong>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>The bin specification:</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>If int, the number of bins for the two dimensions
(nx=ny=bins).</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>If [int, int], the number of bins in each dimension
(nx, ny = bins).</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>If array_like, the bin edges for the two dimensions
(x_edges=y_edges=bins).</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>If [array, array], the bin edges in each dimension
(x_edges, y_edges = bins).</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                            <paragraph>The default value is 10.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>range</strong>: array_like shape(2, 2), optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>The leftmost and rightmost edges of the bins along each dimension
(if not specified explicitly in the bins parameters): [[xmin,
xmax], [ymin, ymax]]. All values outside of this range will be
considered outliers and not tallied in the histogram.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>normed</strong>: boolean, optional, default: False</paragraph>
                                        <block_quote>
                                            <paragraph>Normalize histogram.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>weights</strong>: array_like, shape (n, ), optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>An array of values w_i weighing each sample (x_i, y_i).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>cmin</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>All bins that has count less than cmin will not be displayed and
these count values in the return value count histogram will also
be set to nan upon return</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>cmax</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>All bins that has count more than cmax will not be displayed (set
to none before passing to imshow) and these count values in the
return value count histogram will also be set to nan upon return</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>The return value is 
                                            <literal>(counts, xedges, yedges, Image)</literal>
                                            .</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <literal classes="xref py py-meth">pcolorfast()</literal>
                                            properties.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">hist</literal>
                                        </term>
                                        <definition>
                                            <paragraph>1D histogram</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x', 'weights'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hitlist()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hitlist',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hitlist" ids="matplotlib.axes.Axes.hitlist" module="matplotlib.axes" names="matplotlib.axes.Axes.hitlist">
                            <desc_name>hitlist</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>event</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>List the children of the artist which contain the mouse event 
                                <emphasis>event</emphasis>
                                .</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hlines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hlines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hlines" ids="matplotlib.axes.Axes.hlines" module="matplotlib.axes" names="matplotlib.axes.Axes.hlines">
                            <desc_name>hlines</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot horizontal lines at each 
                                <literal classes="xref py py-obj">y</literal>
                                from 
                                <literal classes="xref py py-obj">xmin</literal>
                                to 
                                <literal classes="xref py py-obj">xmax</literal>
                                .</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>y</strong>: scalar or sequence of scalar</paragraph>
                                        <block_quote>
                                            <paragraph>y-indexes where to plot the lines.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>xmin, xmax</strong>: scalar or 1D array_like</paragraph>
                                        <block_quote>
                                            <paragraph>Respective beginning and end of each line. If scalars are
provided, all lines will have same length.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>colors</strong>: array_like of colors, optional, default: 'k'</paragraph>
                                        <paragraph>
                                            <strong>linestyles</strong>: ['solid' | 'dashed' | 'dashdot' | 'dotted'], optional</paragraph>
                                        <paragraph>
                                            <strong>label</strong>: string, optional, default: ''</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>lines</strong>: 
                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                <literal classes="xref py py-obj">LineCollection</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>:  
                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                <literal classes="xref py py-obj">LineCollection</literal></reference>properties.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">vlines</literal>
                                        </term>
                                        <definition>
                                            <paragraph>vertical lines</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'xmin', 'xmax'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'hold()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.hold',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.hold" ids="matplotlib.axes.Axes.hold" module="matplotlib.axes" names="matplotlib.axes.Axes.hold">
                            <desc_name>hold</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">hold(b=None)</literal_block>
                            <paragraph>Set the hold state.  If 
                                <emphasis>hold</emphasis>
                                is 
                                <emphasis>None</emphasis>
                                (default), toggle the

                                <emphasis>hold</emphasis>
                                state.  Else set the 
                                <emphasis>hold</emphasis>
                                state to boolean value 
                                <emphasis>b</emphasis>
                                .</paragraph>
                            <paragraph>Examples:</paragraph>
                            <literal_block xml:space="preserve"># toggle hold
hold()

# turn hold on
hold(True)

# turn hold off
hold(False)</literal_block>
                            <paragraph>When hold is 
                                <emphasis>True</emphasis>
                                , subsequent plot commands will be added to
the current axes.  When hold is 
                                <emphasis>False</emphasis>
                                , the current axes and
figure will be cleared on the next plot command</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'imshow()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.imshow',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.imshow" ids="matplotlib.axes.Axes.imshow" module="matplotlib.axes" names="matplotlib.axes.Axes.imshow">
                            <desc_name>imshow</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Display an image on the axes.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>X</strong>: array_like, shape (n, m) or (n, m, 3) or (n, m, 4)</paragraph>
                                        <block_quote>
                                            <paragraph>Display the image in 
                                                <literal classes="xref py py-obj">X</literal>
                                                to current axes.  
                                                <literal classes="xref py py-obj">X</literal>
                                                may be a float
array, a uint8 array or a PIL image. If 
                                                <literal classes="xref py py-obj">X</literal>
                                                is an array, it
can have the following shapes:</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>MxN -- luminance (grayscale, float array only)</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>MxNx3 -- RGB (float or uint8 array)</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>MxNx4 -- RGBA (float or uint8 array)</paragraph>
                                                </list_item>
                                            </bullet_list>
                                            <paragraph>The value for each component of MxNx3 and MxNx4 float arrays
should be in the range 0.0 to 1.0; MxN float arrays may be
normalised.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>cmap</strong>: 
                                            <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                <literal classes="xref py py-obj">Colormap</literal></reference>, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>If None, default to rc 
                                                <literal classes="xref py py-obj">image.cmap</literal>
                                                value. 
                                                <literal classes="xref py py-obj">cmap</literal>
                                                is ignored when

                                                <literal classes="xref py py-obj">X</literal>
                                                has RGB(A) information</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>aspect</strong>: ['auto' | 'equal' | scalar], optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>If 'auto', changes the image aspect ratio to match that of the
axes.</paragraph>
                                            <paragraph>If 'equal', and 
                                                <literal classes="xref py py-obj">extent</literal>
                                                is None, changes the axes aspect ratio to
match that of the image. If 
                                                <literal classes="xref py py-obj">extent</literal>
                                                is not 
                                                <literal classes="xref py py-obj">None</literal>
                                                , the axes
aspect ratio is changed to match that of the extent.</paragraph>
                                            <paragraph>If None, default to rc 
                                                <literal>image.aspect</literal>
                                                value.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>interpolation</strong>: string, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>Acceptable values are 'none', 'nearest', 'bilinear', 'bicubic',
'spline16', 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser',
'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc',
'lanczos'</paragraph>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">interpolation</literal>
                                                is None, default to rc 
                                                <literal classes="xref py py-obj">image.interpolation</literal>
                                                .
See also the 
                                                <literal classes="xref py py-obj">filternorm</literal>
                                                and 
                                                <literal classes="xref py py-obj">filterrad</literal>
                                                parameters.
If 
                                                <literal classes="xref py py-obj">interpolation</literal>
                                                is 'none', then no interpolation is performed
on the Agg, ps and pdf backends. Other backends will fall back to
'nearest'.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>norm</strong>: 
                                            <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                <literal classes="xref py py-obj">Normalize</literal></reference>, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-obj">Normalize</literal></reference>instance is used to scale
luminance data to 0, 1. If 
                                                <literal classes="xref py py-obj">None</literal>
                                                , use the default
func:
                                                <literal classes="xref py py-obj">normalize</literal>
                                                . 
                                                <literal classes="xref py py-obj">norm</literal>
                                                is only used if 
                                                <literal classes="xref py py-obj">X</literal>
                                                is an array of
floats.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>vmin, vmax</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>
                                                <literal classes="xref py py-obj">vmin</literal>and 
                                                <literal classes="xref py py-obj">vmax</literal>
                                                are used in conjunction with norm to normalize
luminance data.  Note if you pass a 
                                                <literal classes="xref py py-obj">norm</literal>
                                                instance, your
settings for 
                                                <literal classes="xref py py-obj">vmin</literal>
                                                and 
                                                <literal classes="xref py py-obj">vmax</literal>
                                                will be ignored.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>alpha</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>The alpha blending value, between 0 (transparent) and 1 (opaque)</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>origin</strong>: ['upper' | 'lower'], optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>Place the [0,0] index of the array in the upper left or lower left
corner of the axes. If None, default to rc 
                                                <literal classes="xref py py-obj">image.origin</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>extent</strong>: scalars (left, right, bottom, top), optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>The location, in data-coordinates, of the lower-left and
upper-right corners. If 
                                                <literal classes="xref py py-obj">None</literal>
                                                , the image is positioned such that
the pixel centers fall on zero-based (row, column) indices.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>shape</strong>: scalars (columns, rows), optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>For raw buffer images</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>filternorm</strong>: scalar, optional, default: 1</paragraph>
                                        <block_quote>
                                            <paragraph>A parameter for the antigrain image resize filter.  From the
antigrain documentation, if 
                                                <literal classes="xref py py-obj">filternorm</literal>
                                                = 1, the filter
normalizes integer values and corrects the rounding errors. It
doesn't do anything with the source floating point values, it
corrects only integers according to the rule of 1.0 which means
that any sum of pixel weights must be equal to 1.0.  So, the
filter function must produce a graph of the proper shape.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>filterrad</strong>: scalar, optional, default: 4.0</paragraph>
                                        <block_quote>
                                            <paragraph>The filter radius for filters that have a radius parameter, i.e.
when interpolation is one of: 'sinc', 'lanczos' or 'blackman'</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>image</strong>: 
                                            <reference internal="True" reftitle="matplotlib.image.AxesImage" refuri="image_api#matplotlib.image.AxesImage">
                                                <literal classes="xref py py-obj">AxesImage</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.artist.Artist" refuri="artist_api#matplotlib.artist.Artist">
                                                <literal classes="xref py py-obj">Artist</literal></reference>properties.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">matshow</literal>
                                        </term>
                                        <definition>
                                            <paragraph>Plot a matrix or an array as an image.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'in_axes()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.in_axes',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.in_axes" ids="matplotlib.axes.Axes.in_axes" module="matplotlib.axes" names="matplotlib.axes.Axes.in_axes">
                            <desc_name>in_axes</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>mouseevent</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if the given 
                                <emphasis>mouseevent</emphasis>
                                (in display coords)
is in the Axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'invert_xaxis()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.invert_xaxis',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.invert_xaxis" ids="matplotlib.axes.Axes.invert_xaxis" module="matplotlib.axes" names="matplotlib.axes.Axes.invert_xaxis">
                            <desc_name>invert_xaxis</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Invert the x-axis.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'invert_yaxis()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.invert_yaxis',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.invert_yaxis" ids="matplotlib.axes.Axes.invert_yaxis" module="matplotlib.axes" names="matplotlib.axes.Axes.invert_yaxis">
                            <desc_name>invert_yaxis</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Invert the y-axis.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_figure_set()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.is_figure_set',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.is_figure_set" ids="matplotlib.axes.Axes.is_figure_set" module="matplotlib.axes" names="matplotlib.axes.Axes.is_figure_set">
                            <desc_name>is_figure_set</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns True if the artist is assigned to a

                                <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                    <literal classes="xref py py-class">Figure</literal></reference>.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'is_transform_set()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.is_transform_set',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.is_transform_set" ids="matplotlib.axes.Axes.is_transform_set" module="matplotlib.axes" names="matplotlib.axes.Axes.is_transform_set">
                            <desc_name>is_transform_set</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns 
                                <emphasis>True</emphasis>
                                if 
                                <literal classes="xref py py-class">Artist</literal>
                                has a transform explicitly
set.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'ishold()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.ishold',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.ishold" ids="matplotlib.axes.Axes.ishold" module="matplotlib.axes" names="matplotlib.axes.Axes.ishold">
                            <desc_name>ishold</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return the HOLD status of the axes</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'legend()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.legend',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.legend" ids="matplotlib.axes.Axes.legend" module="matplotlib.axes" names="matplotlib.axes.Axes.legend">
                            <desc_name>legend</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Places a legend on the axes.</paragraph>
                            <paragraph>To make a legend for lines which already exist on the axes
(via plot for instance), simply call this function with an iterable
of strings, one for each legend item. For example:</paragraph>
                            <literal_block xml:space="preserve">ax.plot([1, 2, 3])
ax.legend(['A simple line'])</literal_block>
                            <paragraph>However, in order to keep the &quot;label&quot; and the legend element
instance together, it is preferable to specify the label either at
artist creation, or by calling the

                                <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                    <literal classes="xref py py-meth">set_label()</literal></reference>method on the artist:</paragraph>
                            <literal_block xml:space="preserve">line, = ax.plot([1, 2, 3], label='Inline label')
# Overwrite the label by calling the method.
line.set_label('Label via method')
ax.legend()</literal_block>
                            <paragraph>Specific lines can be excluded from the automatic legend element
selection by defining a label starting with an underscore.
This is default for all artists, so calling 
                                <literal classes="xref py py-meth">legend()</literal>
                                without
any arguments and without setting the labels manually will result in
no legend being drawn.</paragraph>
                            <paragraph>For full control of which artists have a legend entry, it is possible
to pass an iterable of legend artists followed by an iterable of
legend labels respectively:</paragraph>
                            <literal_block xml:space="preserve">legend((line1, line2, line3), ('label1', 'label2', 'label3'))</literal_block>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>loc</strong>: int or string or pair of floats, default: 'upper right'</paragraph>
                                        <block_quote>
                                            <paragraph>The location of the legend. Possible codes are:</paragraph>
                                            <block_quote>
                                                <table>
                                                    <tgroup cols="2">
                                                        <colspec colwidth="15"/>
                                                        <colspec colwidth="13"/>
                                                        <thead>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>Location String</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>Location Code</paragraph>
                                                                </entry>
                                                            </row>
                                                        </thead>
                                                        <tbody>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'best'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>0</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'upper right'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>1</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'upper left'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>2</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'lower left'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>3</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'lower right'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>4</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'right'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>5</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'center left'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>6</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'center right'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>7</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'lower center'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>8</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'upper center'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>9</paragraph>
                                                                </entry>
                                                            </row>
                                                            <row>
                                                                <entry>
                                                                    <paragraph>'center'</paragraph>
                                                                </entry>
                                                                <entry>
                                                                    <paragraph>10</paragraph>
                                                                </entry>
                                                            </row>
                                                        </tbody>
                                                    </tgroup>
                                                </table>
                                            </block_quote>
                                            <paragraph>Alternatively can be a 2-tuple giving 
                                                <literal>x, y</literal>
                                                of the lower-left
corner of the legend in axes coordinates (in which case

                                                <literal>bbox_to_anchor</literal>
                                                will be ignored).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bbox_to_anchor</strong>: 
                                            <reference internal="True" reftitle="matplotlib.transforms.BboxBase" refuri="../devel/transformations#matplotlib.transforms.BboxBase">
                                                <literal classes="xref py py-class">matplotlib.transforms.BboxBase</literal></reference>instance                          or tuple of floats</paragraph>
                                        <block_quote>
                                            <paragraph>Specify any arbitrary location for the legend in 
                                                <literal classes="xref py py-obj">bbox_transform</literal>
                                                coordinates (default Axes coordinates).</paragraph>
                                            <paragraph>For example, to put the legend's upper right hand corner in the
center of the axes the following keywords can be used:</paragraph>
                                            <literal_block xml:space="preserve">loc='upper right', bbox_to_anchor=(0.5, 0.5)</literal_block>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ncol</strong>: integer</paragraph>
                                        <block_quote>
                                            <paragraph>The number of columns that the legend has. Default is 1.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>prop</strong>: None or 
                                            <reference internal="True" reftitle="matplotlib.font_manager.FontProperties" refuri="font_manager_api#matplotlib.font_manager.FontProperties">
                                                <literal classes="xref py py-class">matplotlib.font_manager.FontProperties</literal></reference>or dict</paragraph>
                                        <block_quote>
                                            <paragraph>The font properties of the legend. If None (default), the current

                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">matplotlib.rcParams</literal></reference>will be used.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>fontsize</strong>: int or float or {'xx-small', 'x-small', 'small', 'medium',                   'large', 'x-large', 'xx-large'}</paragraph>
                                        <block_quote>
                                            <paragraph>Controls the font size of the legend. If the value is numeric the
size will be the absolute font size in points. String values are
relative to the current default font size. This argument is only
used if 
                                                <literal classes="xref py py-obj">prop</literal>
                                                is not specified.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>numpoints</strong>: None or int</paragraph>
                                        <block_quote>
                                            <paragraph>The number of marker points in the legend when creating a legend
entry for a line/
                                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                    <literal classes="xref py py-class">matplotlib.lines.Line2D</literal></reference>.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.numpoints</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>scatterpoints</strong>: None or int</paragraph>
                                        <block_quote>
                                            <paragraph>The number of marker points in the legend when creating a legend
entry for a scatter plot/

                                                <reference internal="True" reftitle="matplotlib.collections.PathCollection" refuri="collections_api#matplotlib.collections.PathCollection">
                                                    <literal classes="xref py py-class">matplotlib.collections.PathCollection</literal></reference>.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.scatterpoints</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>scatteryoffsets</strong>: iterable of floats</paragraph>
                                        <block_quote>
                                            <paragraph>The vertical offset (relative to the font size) for the markers
created for a scatter plot legend entry. 0.0 is at the base the
legend text, and 1.0 is at the top. To draw all markers at the
same height, set to 
                                                <literal>[0.5]</literal>
                                                . Default 
                                                <literal>[0.375, 0.5, 0.3125]</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>markerscale</strong>: None or int or float</paragraph>
                                        <block_quote>
                                            <paragraph>The relative size of legend markers compared with the originally
drawn ones. Default is 
                                                <literal>None</literal>
                                                which will take the value from
the 
                                                <literal>legend.markerscale</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>*markerfirst*: [ *True* | *False* ]</strong>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>if 
                                                <emphasis>True</emphasis>
                                                , legend marker is placed to the left of the legend label
if 
                                                <emphasis>False</emphasis>
                                                , legend marker is placed to the right of the legend
label</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>frameon</strong>: None or bool</paragraph>
                                        <block_quote>
                                            <paragraph>Control whether a frame should be drawn around the legend.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.frameon</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>fancybox</strong>: None or bool</paragraph>
                                        <block_quote>
                                            <paragraph>Control whether round edges should be enabled around
the 
                                                <reference internal="True" reftitle="matplotlib.patches.FancyBboxPatch" refuri="patches_api#matplotlib.patches.FancyBboxPatch">
                                                    <literal classes="xref py py-class">FancyBboxPatch</literal></reference>which
makes up the legend's background.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.fancybox</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>shadow</strong>: None or bool</paragraph>
                                        <block_quote>
                                            <paragraph>Control whether to draw a shadow behind the legend.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.shadow</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>framealpha</strong>: None or float</paragraph>
                                        <block_quote>
                                            <paragraph>Control the alpha transparency of the legend's frame.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.framealpha</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>mode</strong>: {&quot;expand&quot;, None}</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <literal classes="xref py py-obj">mode</literal>
                                                is set to 
                                                <literal>&quot;expand&quot;</literal>
                                                the legend will be horizontally
expanded to fill the axes area (or 
                                                <literal classes="xref py py-obj">bbox_to_anchor</literal>
                                                if defines
the legend's size).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>bbox_transform</strong>: None or 
                                            <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>The transform for the bounding box (
                                                <literal classes="xref py py-obj">bbox_to_anchor</literal>
                                                ). For a value
of 
                                                <literal>None</literal>
                                                (default) the Axes'

                                                <literal classes="xref py py-data">transAxes</literal>
                                                transform will be used.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>title</strong>: str or None</paragraph>
                                        <block_quote>
                                            <paragraph>The legend's title. Default is no title (
                                                <literal>None</literal>
                                                ).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>borderpad</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The fractional whitespace inside the legend border.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.borderpad</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>labelspacing</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The vertical space between the legend entries.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.labelspacing</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>handlelength</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The length of the legend handles.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.handlelength</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>handletextpad</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The pad between the legend handle and text.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.handletextpad</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>borderaxespad</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The pad between the axes and legend border.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.borderaxespad</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>columnspacing</strong>: float or None</paragraph>
                                        <block_quote>
                                            <paragraph>The spacing between columns.
Measured in font-size units.
Default is 
                                                <literal>None</literal>
                                                which will take the value from the

                                                <literal>legend.columnspacing</literal>
                                                <reference internal="True" reftitle="matplotlib.rcParams" refuri="matplotlib_configuration_api#matplotlib.rcParams">
                                                    <literal classes="xref py py-data">rcParam</literal></reference>.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>handler_map</strong>: dict or None</paragraph>
                                        <block_quote>
                                            <paragraph>The custom dictionary mapping instances or types to a legend
handler. This 
                                                <literal classes="xref py py-obj">handler_map</literal>
                                                updates the default handler map
found at 
                                                <reference internal="True" reftitle="matplotlib.legend.Legend.get_legend_handler_map" refuri="legend_api#matplotlib.legend.Legend.get_legend_handler_map">
                                                    <literal classes="xref py py-func">matplotlib.legend.Legend.get_legend_handler_map()</literal></reference>.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>Not all kinds of artist are supported by the legend command.
See 
                                <reference internal="True" refuri="../users/legend_guide#plotting-guide-legend">
                                    <inline>Legend guide</inline></reference>for details.</paragraph>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'locator_params()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.locator_params',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.locator_params" ids="matplotlib.axes.Axes.locator_params" module="matplotlib.axes" names="matplotlib.axes.Axes.locator_params">
                            <desc_name>locator_params</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>axis=u'both'</desc_parameter>
                                <desc_parameter>tight=None</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Control behavior of tick locators.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>axis</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>['x' | 'y' | 'both']  Axis on which to operate;
default is 'both'.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>tight</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>[True | False | None] Parameter passed to 
                                            <literal classes="xref py py-meth">autoscale_view()</literal>
                                            .
Default is None, for no change.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Remaining keyword arguments are passed to directly to the

                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator.set_params" refuri="ticker_api#matplotlib.ticker.MaxNLocator.set_params">
                                    <literal classes="xref py py-meth">set_params()</literal></reference>method.</paragraph>
                            <paragraph>Typically one might want to reduce the maximum number
of ticks and use tight bounds when plotting small
subplots, for example:</paragraph>
                            <literal_block xml:space="preserve">ax.locator_params(tight=True, nbins=4)</literal_block>
                            <paragraph>Because the locator is involved in autoscaling,

                                <literal classes="xref py py-meth">autoscale_view()</literal>
                                is called automatically after
the parameters are changed.</paragraph>
                            <paragraph>This presently works only for the

                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator" refuri="ticker_api#matplotlib.ticker.MaxNLocator">
                                    <literal classes="xref py py-class">MaxNLocator</literal></reference>used
by default on linear axes, but it may be generalized.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'loglog()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.loglog',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.loglog" ids="matplotlib.axes.Axes.loglog" module="matplotlib.axes" names="matplotlib.axes.Axes.loglog">
                            <desc_name>loglog</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a plot with log scaling on both the 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                axis.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">loglog(*args, **kwargs)</literal_block>
                            <paragraph>
                                <reference internal="True" reftitle="matplotlib.pyplot.loglog" refuri="pyplot_api#matplotlib.pyplot.loglog">
                                    <literal classes="xref py py-func">loglog()</literal>
                                </reference>supports all the keyword
arguments of 
                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>and

                                <reference internal="True" refid="matplotlib.axes.Axes.set_xscale" reftitle="matplotlib.axes.Axes.set_xscale">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_xscale()</literal></reference>/

                                <reference internal="True" refid="matplotlib.axes.Axes.set_yscale" reftitle="matplotlib.axes.Axes.set_yscale">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_yscale()</literal></reference>.</paragraph>
                            <paragraph>Notable keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>basex</emphasis>/
                                            <emphasis>basey</emphasis>
                                            : scalar &gt; 1</term>
                                        <definition>
                                            <paragraph>Base of the 
                                                <emphasis>x</emphasis>
                                                /
                                                <emphasis>y</emphasis>
                                                logarithm</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>subsx</emphasis>/
                                            <emphasis>subsy</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | sequence ]</term>
                                        <definition>
                                            <paragraph>The location of the minor 
                                                <emphasis>x</emphasis>
                                                /
                                                <emphasis>y</emphasis>
                                                ticks; 
                                                <emphasis>None</emphasis>
                                                defaults
to autosubs, which depend on the number of decades in the
plot; see 
                                                <reference internal="True" refid="matplotlib.axes.Axes.set_xscale" reftitle="matplotlib.axes.Axes.set_xscale">
                                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_xscale()</literal></reference>/

                                                <reference internal="True" refid="matplotlib.axes.Axes.set_yscale" reftitle="matplotlib.axes.Axes.set_yscale">
                                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_yscale()</literal></reference>for details</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>nonposx</emphasis>/
                                            <emphasis>nonposy</emphasis>
                                            : ['mask' | 'clip' ]</term>
                                        <definition>
                                            <paragraph>Non-positive values in 
                                                <emphasis>x</emphasis>
                                                or 
                                                <emphasis>y</emphasis>
                                                can be masked as
invalid, or clipped to a very small positive number</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>The remaining valid kwargs are

                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'magnitude_spectrum()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.magnitude_spectrum',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.magnitude_spectrum" ids="matplotlib.axes.Axes.magnitude_spectrum" module="matplotlib.axes" names="matplotlib.axes.Axes.magnitude_spectrum">
                            <desc_name>magnitude_spectrum</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the magnitude spectrum.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">magnitude_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,
                   pad_to=None, sides='default', **kwargs)</literal_block>
                            <paragraph>Compute the magnitude spectrum of 
                                <emphasis>x</emphasis>
                                .  Data is padded to a
length of 
                                <emphasis>pad_to</emphasis>
                                and the windowing function 
                                <emphasis>window</emphasis>
                                is applied to
the signal.</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>x</emphasis>: 1-D array or sequence</term>
                                        <definition>
                                            <paragraph>Array or sequence containing the data</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>The number of points to which the data segment is padded when
performing the FFT.  While not increasing the actual resolution of
the spectrum (the minimum distance between resolvable peaks),
this can give more points in the plot, allowing for more
detail. This corresponds to the 
                                                <emphasis>n</emphasis>
                                                parameter in the call to fft().
The default is None, which sets 
                                                <emphasis>pad_to</emphasis>
                                                equal to the length of the
input signal (i.e. no padding).</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>scale</emphasis>: [ 'default' | 'linear' | 'dB' ]</term>
                                                <definition>
                                                    <paragraph>The scaling of the values in the 
                                                        <emphasis>spec</emphasis>
                                                        .  'linear' is no scaling.
'dB' returns the values in dB scale.  When 
                                                        <emphasis>mode</emphasis>
                                                        is 'density',
this is dB power (10 * log10).  Otherwise this is dB amplitude
(20 * log10). 'default' is 'linear'.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns the tuple (
                                <emphasis>spectrum</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                , 
                                <emphasis>line</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>spectrum</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The values for the magnitude spectrum before scaling (real valued)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the elements in 
                                                <emphasis>spectrum</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>line</emphasis>: a 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>The line created by this function</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">psd()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">psd()</literal>plots the power spectral density.`.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">angle_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">angle_spectrum()</literal>plots the angles of the corresponding
frequencies.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">phase_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">phase_spectrum()</literal>plots the phase (unwrapped angle) of the
corresponding frequencies.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">specgram()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">specgram()</literal>can plot the magnitude spectrum of segments
within the signal in a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'margins()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.margins',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.margins" ids="matplotlib.axes.Axes.margins" module="matplotlib.axes" names="matplotlib.axes.Axes.margins">
                            <desc_name>margins</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kw</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set or retrieve autoscaling margins.</paragraph>
                            <paragraph>signatures:</paragraph>
                            <literal_block xml:space="preserve">margins()</literal_block>
                            <paragraph>returns xmargin, ymargin</paragraph>
                            <literal_block xml:space="preserve">margins(margin)

margins(xmargin, ymargin)

margins(x=xmargin, y=ymargin)

margins(..., tight=False)</literal_block>
                            <paragraph>All three forms above set the xmargin and ymargin parameters.
All keyword parameters are optional.  A single argument
specifies both xmargin and ymargin.  The 
                                <emphasis>tight</emphasis>
                                parameter
is passed to 
                                <literal classes="xref py py-meth">autoscale_view()</literal>
                                , which is executed after
a margin is changed; the default here is 
                                <emphasis>True</emphasis>
                                , on the
assumption that when margins are specified, no additional
padding to match tick marks is usually desired.  Setting

                                <emphasis>tight</emphasis>
                                to 
                                <emphasis>None</emphasis>
                                will preserve the previous setting.</paragraph>
                            <paragraph>Specifying any margin changes only the autoscaling; for example,
if 
                                <emphasis>xmargin</emphasis>
                                is not None, then 
                                <emphasis>xmargin</emphasis>
                                times the X data
interval will be added to each end of that interval before
it is used in autoscaling.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'matshow()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.matshow',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.matshow" ids="matplotlib.axes.Axes.matshow" module="matplotlib.axes" names="matplotlib.axes.Axes.matshow">
                            <desc_name>matshow</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>Z</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a matrix or array as an image.</paragraph>
                            <paragraph>The matrix will be shown the way it would be printed, with the first
row at the top.  Row and column numbering is zero-based.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>Z</strong>: array_like shape (n, m)</paragraph>
                                        <block_quote>
                                            <paragraph>The matrix to be displayed.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>image</strong>: 
                                            <reference internal="True" reftitle="matplotlib.image.AxesImage" refuri="image_api#matplotlib.image.AxesImage">
                                                <literal classes="xref py py-obj">AxesImage</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" refid="matplotlib.axes.Axes.imshow" reftitle="matplotlib.axes.Axes.imshow">
                                                <literal classes="xref py py-obj">imshow</literal></reference>arguments</paragraph>
                                        <block_quote>
                                            <paragraph>Sets 
                                                <literal classes="xref py py-obj">origin</literal>
                                                to 'upper', 'interpolation' to 'nearest' and
'aspect' to equal.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">imshow</literal>
                                        </term>
                                        <definition>
                                            <paragraph>plot an image</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'minorticks_off()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.minorticks_off',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.minorticks_off" ids="matplotlib.axes.Axes.minorticks_off" module="matplotlib.axes" names="matplotlib.axes.Axes.minorticks_off">
                            <desc_name>minorticks_off</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Remove minor ticks from the axes.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'minorticks_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.minorticks_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.minorticks_on" ids="matplotlib.axes.Axes.minorticks_on" module="matplotlib.axes" names="matplotlib.axes.Axes.minorticks_on">
                            <desc_name>minorticks_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add autoscaling minor ticks to the axes.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'mouseover\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.mouseover',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.mouseover" ids="matplotlib.axes.Axes.mouseover" module="matplotlib.axes" names="matplotlib.axes.Axes.mouseover">
                            <desc_name>mouseover</desc_name>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'name\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.name',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.name" ids="matplotlib.axes.Axes.name" module="matplotlib.axes" names="matplotlib.axes.Axes.name">
                            <desc_name>name</desc_name>
                            <desc_annotation>= u'rectilinear'</desc_annotation>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                    <index entries="['single',\ u'pchanged()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pchanged',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pchanged" ids="matplotlib.axes.Axes.pchanged" module="matplotlib.axes" names="matplotlib.axes.Axes.pchanged">
                            <desc_name>pchanged</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Fire an event when property changed, calling all of the
registered callbacks.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pcolor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pcolor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pcolor" ids="matplotlib.axes.Axes.pcolor" module="matplotlib.axes" names="matplotlib.axes.Axes.pcolor">
                            <desc_name>pcolor</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Create a pseudocolor plot of a 2-D array.</paragraph>
                            <note>
                                <paragraph>pcolor can be very slow for large arrays; consider
using the similar but much faster

                                    <reference internal="True" reftitle="matplotlib.pyplot.pcolormesh" refuri="pyplot_api#matplotlib.pyplot.pcolormesh">
                                        <literal classes="xref py py-func">pcolormesh()</literal></reference>instead.</paragraph>
                            </note>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">pcolor(C, **kwargs)
pcolor(X, Y, C, **kwargs)</literal_block>
                            <paragraph>
                                <emphasis>C</emphasis>is the array of color values.</paragraph>
                            <paragraph>
                                <emphasis>X</emphasis>and 
                                <emphasis>Y</emphasis>
                                , if given, specify the (
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                ) coordinates of
the colored quadrilaterals; the quadrilateral for C[i,j] has
corners at:</paragraph>
                            <literal_block xml:space="preserve">(X[i,   j],   Y[i,   j]),
(X[i,   j+1], Y[i,   j+1]),
(X[i+1, j],   Y[i+1, j]),
(X[i+1, j+1], Y[i+1, j+1]).</literal_block>
                            <paragraph>Ideally the dimensions of 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                should be one greater
than those of 
                                <emphasis>C</emphasis>
                                ; if the dimensions are the same, then the
last row and column of 
                                <emphasis>C</emphasis>
                                will be ignored.</paragraph>
                            <paragraph>Note that the column index corresponds to the

                                <emphasis>x</emphasis>
                                -coordinate, and the row index corresponds to 
                                <emphasis>y</emphasis>
                                ; for
details, see the 
                                <reference internal="True" refuri="pyplot_api#axes-pcolor-grid-orientation">
                                    <inline>Grid Orientation</inline></reference>section below.</paragraph>
                            <paragraph>If either or both of 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                are 1-D arrays or column vectors,
they will be expanded as needed into the appropriate 2-D arrays,
making a rectangular grid.</paragraph>
                            <paragraph>
                                <emphasis>X</emphasis>, 
                                <emphasis>Y</emphasis>
                                and 
                                <emphasis>C</emphasis>
                                may be masked arrays.  If either C[i, j], or one
of the vertices surrounding C[i,j] (
                                <emphasis>X</emphasis>
                                or 
                                <emphasis>Y</emphasis>
                                at [i, j], [i+1, j],
[i, j+1],[i+1, j+1]) is masked, nothing is plotted.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">matplotlib.colors.Colormap</literal></reference>instance. If 
                                                <emphasis>None</emphasis>
                                                , use
rc settings.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>An 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance is used
to scale luminance data to 0,1. If 
                                                <emphasis>None</emphasis>
                                                , defaults to

                                                <literal classes="xref py py-func">normalize()</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>vmin</emphasis>/
                                            <emphasis>vmax</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | scalar ]</term>
                                        <definition>
                                            <paragraph>
                                                <emphasis>vmin</emphasis>and 
                                                <emphasis>vmax</emphasis>
                                                are used in conjunction with 
                                                <emphasis>norm</emphasis>
                                                to
normalize luminance data.  If either is 
                                                <emphasis>None</emphasis>
                                                , it
is autoscaled to the respective min or max
of the color array 
                                                <emphasis>C</emphasis>
                                                .  If not 
                                                <emphasis>None</emphasis>
                                                , 
                                                <emphasis>vmin</emphasis>
                                                or

                                                <emphasis>vmax</emphasis>
                                                passed in here override any pre-existing values
supplied in the 
                                                <emphasis>norm</emphasis>
                                                instance.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>shading</emphasis>: [ 'flat' | 'faceted' ]</term>
                                        <definition>
                                            <paragraph>If 'faceted', a black grid is drawn around each rectangle; if
'flat', edges are not drawn. Default is 'flat', contrary to
MATLAB.</paragraph>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>This kwarg is deprecated; please use 'edgecolors' instead:</term>
                                                    <definition>
                                                        <bullet_list bullet="*">
                                                            <list_item>
                                                                <paragraph>shading='flat' -- edgecolors='none'</paragraph>
                                                            </list_item>
                                                            <list_item>
                                                                <paragraph>shading='faceted  -- edgecolors='k'</paragraph>
                                                            </list_item>
                                                        </bullet_list>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>edgecolors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 
                                            <literal>'none'</literal>
                                            | color | color sequence]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the rc setting is used by default.</paragraph>
                                            <paragraph>If 
                                                <literal>'none'</literal>
                                                , edges will not be visible.</paragraph>
                                            <paragraph>An mpl color or sequence of colors will set the edge color</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: 
                                            <literal>0 &lt;= scalar &lt;= 1</literal>
                                            or 
                                            <emphasis>None</emphasis></term>
                                        <definition>
                                            <paragraph>the alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>snap</emphasis>: bool</term>
                                        <definition>
                                            <paragraph>Whether to snap the mesh to pixel boundaries.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Return value is a 
                                <reference internal="True" reftitle="matplotlib.collections.Collection" refuri="collections_api#matplotlib.collections.Collection">
                                    <literal classes="xref py py-class">matplotlib.collections.Collection</literal></reference>instance.</paragraph>
                            <target refid="axes-pcolor-grid-orientation"/>
                            <paragraph ids="axes-pcolor-grid-orientation" names="axes-pcolor-grid-orientation">The grid orientation follows the MATLAB convention: an
array 
                                <emphasis>C</emphasis>
                                with shape (
                                <emphasis>nrows</emphasis>
                                , 
                                <emphasis>ncolumns</emphasis>
                                ) is plotted with
the column number as 
                                <emphasis>X</emphasis>
                                and the row number as 
                                <emphasis>Y</emphasis>
                                , increasing
up; hence it is plotted the way the array would be printed,
except that the 
                                <emphasis>Y</emphasis>
                                axis is reversed.  That is, 
                                <emphasis>C</emphasis>
                                is taken
as 
                                <emphasis>C*(*y</emphasis>
                                , 
                                <emphasis>x</emphasis>
                                ).</paragraph>
                            <paragraph>Similarly for 
                                <literal classes="xref py py-func">meshgrid()</literal>
                                :</paragraph>
                            <literal_block xml:space="preserve">x = np.arange(5)
y = np.arange(3)
X, Y = np.meshgrid(x, y)</literal_block>
                            <paragraph>is equivalent to:</paragraph>
                            <literal_block xml:space="preserve">X = array([[0, 1, 2, 3, 4],
           [0, 1, 2, 3, 4],
           [0, 1, 2, 3, 4]])

Y = array([[0, 0, 0, 0, 0],
           [1, 1, 1, 1, 1],
           [2, 2, 2, 2, 2]])</literal_block>
                            <paragraph>so if you have:</paragraph>
                            <literal_block xml:space="preserve">C = rand(len(x), len(y))</literal_block>
                            <paragraph>then you need to transpose C:</paragraph>
                            <literal_block xml:space="preserve">pcolor(X, Y, C.T)</literal_block>
                            <paragraph>or:</paragraph>
                            <literal_block xml:space="preserve">pcolor(C.T)</literal_block>
                            <paragraph>MATLAB 
                                <literal classes="xref py py-func">pcolor()</literal>
                                always discards the last row and column
of 
                                <emphasis>C</emphasis>
                                , but matplotlib displays the last row and column if 
                                <emphasis>X</emphasis>
                                and

                                <emphasis>Y</emphasis>
                                are not specified, or if 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                have one more row and
column than 
                                <emphasis>C</emphasis>
                                .</paragraph>
                            <paragraph>kwargs can be used to control the

                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <note>
                                <paragraph>The default 
                                    <emphasis>antialiaseds</emphasis>
                                    is False if the default

                                    <emphasis>edgecolors*=&quot;none&quot; is used.  This eliminates artificial lines
at patch boundaries, and works regardless of the value of
alpha.  If *edgecolors</emphasis>
                                    is not &quot;none&quot;, then the default

                                    <emphasis>antialiaseds</emphasis>
                                    is taken from
rcParams['patch.antialiased'], which defaults to 
                                    <emphasis>True</emphasis>
                                    .
Stroking the edges may be preferred if 
                                    <emphasis>alpha</emphasis>
                                    is 1, but
will cause artifacts otherwise.</paragraph>
                            </note>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <reference internal="True" reftitle="matplotlib.pyplot.pcolormesh" refuri="pyplot_api#matplotlib.pyplot.pcolormesh">
                                                <literal classes="xref py py-func">pcolormesh()</literal>
                                            </reference>
                                        </term>
                                        <definition>
                                            <paragraph>For an explanation of the differences between
pcolor and pcolormesh.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pcolorfast()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pcolorfast',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pcolorfast" ids="matplotlib.axes.Axes.pcolorfast" module="matplotlib.axes" names="matplotlib.axes.Axes.pcolorfast">
                            <desc_name>pcolorfast</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>pseudocolor plot of a 2-D array</paragraph>
                            <paragraph>Experimental; this is a pcolor-type method that
provides the fastest possible rendering with the Agg
backend, and that can handle any quadrilateral grid.
It supports only flat shading (no outlines), it lacks
support for log scaling of the axes, and it does not
have a pyplot wrapper.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">ax.pcolorfast(C, **kwargs)
ax.pcolorfast(xr, yr, C, **kwargs)
ax.pcolorfast(x, y, C, **kwargs)
ax.pcolorfast(X, Y, C, **kwargs)</literal_block>
                            <paragraph>C is the 2D array of color values corresponding to quadrilateral
cells. Let (nr, nc) be its shape.  C may be a masked array.</paragraph>
                            <paragraph>
                                <literal>ax.pcolorfast(C, **kwargs)</literal>is equivalent to

                                <literal>ax.pcolorfast([0,nc], [0,nr], C, **kwargs)</literal></paragraph>
                            <paragraph>
                                <emphasis>xr</emphasis>, 
                                <emphasis>yr</emphasis>
                                specify the ranges of 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                corresponding to the
rectangular region bounding 
                                <emphasis>C</emphasis>
                                .  If:</paragraph>
                            <literal_block xml:space="preserve">xr = [x0, x1]</literal_block>
                            <paragraph>and:</paragraph>
                            <literal_block xml:space="preserve">yr = [y0,y1]</literal_block>
                            <paragraph>then 
                                <emphasis>x</emphasis>
                                goes from 
                                <emphasis>x0</emphasis>
                                to 
                                <emphasis>x1</emphasis>
                                as the second index of 
                                <emphasis>C</emphasis>
                                goes
from 0 to 
                                <emphasis>nc</emphasis>
                                , etc.  (
                                <emphasis>x0</emphasis>
                                , 
                                <emphasis>y0</emphasis>
                                ) is the outermost corner of
cell (0,0), and (
                                <emphasis>x1</emphasis>
                                , 
                                <emphasis>y1</emphasis>
                                ) is the outermost corner of cell
(
                                <emphasis>nr</emphasis>
                                -1, 
                                <emphasis>nc</emphasis>
                                -1).  All cells are rectangles of the same size.
This is the fastest version.</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>, 
                                <emphasis>y</emphasis>
                                are 1D arrays of length 
                                <emphasis>nc</emphasis>
                                +1 and 
                                <emphasis>nr</emphasis>
                                +1, respectively,
giving the x and y boundaries of the cells.  Hence the cells are
rectangular but the grid may be nonuniform.  The speed is
intermediate.  (The grid is checked, and if found to be
uniform the fast version is used.)</paragraph>
                            <paragraph>
                                <emphasis>X</emphasis>and 
                                <emphasis>Y</emphasis>
                                are 2D arrays with shape (
                                <emphasis>nr</emphasis>
                                +1, 
                                <emphasis>nc</emphasis>
                                +1) that specify
the (x,y) coordinates of the corners of the colored
quadrilaterals; the quadrilateral for C[i,j] has corners at
(X[i,j],Y[i,j]), (X[i,j+1],Y[i,j+1]), (X[i+1,j],Y[i+1,j]),
(X[i+1,j+1],Y[i+1,j+1]).  The cells need not be rectangular.
This is the most general, but the slowest to render.  It may
produce faster and more compact output using ps, pdf, and
svg backends, however.</paragraph>
                            <paragraph>Note that the column index corresponds to the x-coordinate,
and the row index corresponds to y; for details, see
the &quot;Grid Orientation&quot; section below.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">matplotlib.colors.Colormap</literal></reference>instance from cm. If 
                                                <emphasis>None</emphasis>
                                                ,
use rc settings.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance is used to scale
luminance data to 0,1. If 
                                                <emphasis>None</emphasis>
                                                , defaults to normalize()</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>vmin</emphasis>/
                                            <emphasis>vmax</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | scalar ]</term>
                                        <definition>
                                            <paragraph>
                                                <emphasis>vmin</emphasis>and 
                                                <emphasis>vmax</emphasis>
                                                are used in conjunction with norm to normalize
luminance data.  If either are 
                                                <emphasis>None</emphasis>
                                                , the min and max
of the color array 
                                                <emphasis>C</emphasis>
                                                is used.  If you pass a norm instance,

                                                <emphasis>vmin</emphasis>
                                                and 
                                                <emphasis>vmax</emphasis>
                                                will be 
                                                <emphasis>None</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: 
                                            <literal>0 &lt;= scalar &lt;= 1</literal>
                                            or 
                                            <emphasis>None</emphasis></term>
                                        <definition>
                                            <paragraph>the alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Return value is an image if a regular or rectangular grid
is specified, and a 
                                <reference internal="True" reftitle="matplotlib.collections.QuadMesh" refuri="collections_api#matplotlib.collections.QuadMesh">
                                    <literal classes="xref py py-class">QuadMesh</literal></reference>collection in the general quadrilateral case.</paragraph>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pcolormesh()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pcolormesh',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pcolormesh" ids="matplotlib.axes.Axes.pcolormesh" module="matplotlib.axes" names="matplotlib.axes.Axes.pcolormesh">
                            <desc_name>pcolormesh</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a quadrilateral mesh.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">pcolormesh(C)
pcolormesh(X, Y, C)
pcolormesh(C, **kwargs)</literal_block>
                            <paragraph>Create a pseudocolor plot of a 2-D array.</paragraph>
                            <paragraph>pcolormesh is similar to 
                                <reference internal="True" reftitle="matplotlib.pyplot.pcolor" refuri="pyplot_api#matplotlib.pyplot.pcolor">
                                    <literal classes="xref py py-func">pcolor()</literal></reference>,
but uses a different mechanism and returns a different
object; pcolor returns a

                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>but pcolormesh
returns a

                                <reference internal="True" reftitle="matplotlib.collections.QuadMesh" refuri="collections_api#matplotlib.collections.QuadMesh">
                                    <literal classes="xref py py-class">QuadMesh</literal></reference>.  It is much faster,
so it is almost always preferred for large arrays.</paragraph>
                            <paragraph>
                                <emphasis>C</emphasis>may be a masked array, but 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                may not.  Masked
array support is implemented via 
                                <emphasis>cmap</emphasis>
                                and 
                                <emphasis>norm</emphasis>
                                ; in
contrast, 
                                <reference internal="True" reftitle="matplotlib.pyplot.pcolor" refuri="pyplot_api#matplotlib.pyplot.pcolor">
                                    <literal classes="xref py py-func">pcolor()</literal></reference>simply does not
draw quadrilaterals with masked colors or vertices.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">matplotlib.colors.Colormap</literal></reference>instance. If 
                                                <emphasis>None</emphasis>
                                                , use
rc settings.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance is used to
scale luminance data to 0,1. If 
                                                <emphasis>None</emphasis>
                                                , defaults to

                                                <literal classes="xref py py-func">normalize()</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>vmin</emphasis>/
                                            <emphasis>vmax</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | scalar ]</term>
                                        <definition>
                                            <paragraph>
                                                <emphasis>vmin</emphasis>and 
                                                <emphasis>vmax</emphasis>
                                                are used in conjunction with 
                                                <emphasis>norm</emphasis>
                                                to
normalize luminance data.  If either is 
                                                <emphasis>None</emphasis>
                                                , it
is autoscaled to the respective min or max
of the color array 
                                                <emphasis>C</emphasis>
                                                .  If not 
                                                <emphasis>None</emphasis>
                                                , 
                                                <emphasis>vmin</emphasis>
                                                or

                                                <emphasis>vmax</emphasis>
                                                passed in here override any pre-existing values
supplied in the 
                                                <emphasis>norm</emphasis>
                                                instance.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>shading</emphasis>: [ 'flat' | 'gouraud' ]</term>
                                        <definition>
                                            <paragraph>'flat' indicates a solid color for each quad.  When
'gouraud', each quad will be Gouraud shaded.  When gouraud
shading, edgecolors is ignored.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>edgecolors</emphasis>: [
                                            <emphasis>None</emphasis>
                                            | 
                                            <literal>'None'</literal>
                                            | 
                                            <literal>'face'</literal>
                                            | color |</term>
                                        <definition>
                                            <block_quote>
                                                <paragraph>color sequence]</paragraph>
                                            </block_quote>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the rc setting is used by default.</paragraph>
                                            <paragraph>If 
                                                <literal>'None'</literal>
                                                , edges will not be visible.</paragraph>
                                            <paragraph>If 
                                                <literal>'face'</literal>
                                                , edges will have the same color as the faces.</paragraph>
                                            <paragraph>An mpl color or sequence of colors will set the edge color</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: 
                                            <literal>0 &lt;= scalar &lt;= 1</literal>
                                            or 
                                            <emphasis>None</emphasis></term>
                                        <definition>
                                            <paragraph>the alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Return value is a 
                                <reference internal="True" reftitle="matplotlib.collections.QuadMesh" refuri="collections_api#matplotlib.collections.QuadMesh">
                                    <literal classes="xref py py-class">matplotlib.collections.QuadMesh</literal></reference>object.</paragraph>
                            <paragraph>kwargs can be used to control the

                                <reference internal="True" reftitle="matplotlib.collections.QuadMesh" refuri="collections_api#matplotlib.collections.QuadMesh">
                                    <literal classes="xref py py-class">matplotlib.collections.QuadMesh</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <reference internal="True" reftitle="matplotlib.pyplot.pcolor" refuri="pyplot_api#matplotlib.pyplot.pcolor">
                                                <literal classes="xref py py-func">pcolor()</literal>
                                            </reference>
                                        </term>
                                        <definition>
                                            <paragraph>For an explanation of the grid orientation and the
expansion of 1-D 
                                                <emphasis>X</emphasis>
                                                and/or 
                                                <emphasis>Y</emphasis>
                                                to 2-D arrays.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'phase_spectrum()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.phase_spectrum',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.phase_spectrum" ids="matplotlib.axes.Axes.phase_spectrum" module="matplotlib.axes" names="matplotlib.axes.Axes.phase_spectrum">
                            <desc_name>phase_spectrum</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the phase spectrum.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">phase_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,
               pad_to=None, sides='default', **kwargs)</literal_block>
                            <paragraph>Compute the phase spectrum (unwrapped angle spectrum) of 
                                <emphasis>x</emphasis>
                                .
Data is padded to a length of 
                                <emphasis>pad_to</emphasis>
                                and the windowing function

                                <emphasis>window</emphasis>
                                is applied to the signal.</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>x</emphasis>: 1-D array or sequence</term>
                                        <definition>
                                            <paragraph>Array or sequence containing the data</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>The number of points to which the data segment is padded when
performing the FFT.  While not increasing the actual resolution of
the spectrum (the minimum distance between resolvable peaks),
this can give more points in the plot, allowing for more
detail. This corresponds to the 
                                                <emphasis>n</emphasis>
                                                parameter in the call to fft().
The default is None, which sets 
                                                <emphasis>pad_to</emphasis>
                                                equal to the length of the
input signal (i.e. no padding).</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns the tuple (
                                <emphasis>spectrum</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                , 
                                <emphasis>line</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>spectrum</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The values for the phase spectrum in radians (real valued)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the elements in 
                                                <emphasis>spectrum</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>line</emphasis>: a 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>The line created by this function</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">magnitude_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">magnitude_spectrum()</literal>plots the magnitudes of the
corresponding frequencies.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">angle_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">angle_spectrum()</literal>plots the wrapped version of this
function.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">specgram()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">specgram()</literal>can plot the phase spectrum of segments
within the signal in a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pick()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pick',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pick" ids="matplotlib.axes.Axes.pick" module="matplotlib.axes" names="matplotlib.axes.Axes.pick">
                            <desc_name>pick</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">pick(mouseevent)</literal_block>
                            <paragraph>each child artist will fire a pick event if mouseevent is over
the artist and the artist has picker set</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pickable()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pickable',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pickable" ids="matplotlib.axes.Axes.pickable" module="matplotlib.axes" names="matplotlib.axes.Axes.pickable">
                            <desc_name>pickable</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Return 
                                <emphasis>True</emphasis>
                                if 
                                <literal classes="xref py py-class">Artist</literal>
                                is pickable.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'pie()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.pie',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.pie" ids="matplotlib.axes.Axes.pie" module="matplotlib.axes" names="matplotlib.axes.Axes.pie">
                            <desc_name>pie</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a pie chart.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">pie(x, explode=None, labels=None,
    colors=('b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'),
    autopct=None, pctdistance=0.6, shadow=False,
    labeldistance=1.1, startangle=None, radius=None,
    counterclock=True, wedgeprops=None, textprops=None,
    center = (0, 0), frame = False )</literal_block>
                            <paragraph>Make a pie chart of array 
                                <emphasis>x</emphasis>
                                .  The fractional area of each
wedge is given by x/sum(x).  If sum(x) &lt;= 1, then the values
of x give the fractional area directly and the array will not
be normalized.  The wedges are plotted counterclockwise,
by default starting from the x-axis.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>explode</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | len(x) sequence ]</term>
                                        <definition>
                                            <paragraph>If not 
                                                <emphasis>None</emphasis>
                                                , is a 
                                                <literal>len(x)</literal>
                                                array which specifies the
fraction of the radius with which to offset each wedge.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | color sequence ]</term>
                                        <definition>
                                            <paragraph>A sequence of matplotlib color args through which the pie chart
will cycle.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>labels</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | len(x) sequence of strings ]</term>
                                        <definition>
                                            <paragraph>A sequence of strings providing the labels for each wedge</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>autopct</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | format string | format function ]</term>
                                        <definition>
                                            <paragraph>If not 
                                                <emphasis>None</emphasis>
                                                , is a string or function used to label the wedges
with their numeric value.  The label will be placed inside the
wedge.  If it is a format string, the label will be 
                                                <literal>fmt%pct</literal>
                                                .
If it is a function, it will be called.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>pctdistance</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The ratio between the center of each pie slice and the
start of the text generated by 
                                                <emphasis>autopct</emphasis>
                                                .  Ignored if

                                                <emphasis>autopct</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                ; default is 0.6.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>labeldistance</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The radial distance at which the pie labels are drawn</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>shadow</emphasis>: [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Draw a shadow beneath the pie.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>startangle</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Offset angle ]</term>
                                        <definition>
                                            <paragraph>If not 
                                                <emphasis>None</emphasis>
                                                , rotates the start of the pie chart by 
                                                <emphasis>angle</emphasis>
                                                degrees counterclockwise from the x-axis.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>radius</emphasis>: [ 
                                    <emphasis>None</emphasis>
                                    | scalar ]
The radius of the pie, if 
                                    <emphasis>radius</emphasis>
                                    is 
                                    <emphasis>None</emphasis>
                                    it will be set to 1.</paragraph>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>counterclock</emphasis>: [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Specify fractions direction, clockwise or counterclockwise.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>wedgeprops</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | dict of key value pairs ]</term>
                                        <definition>
                                            <paragraph>Dict of arguments passed to the wedge objects making the pie.
For example, you can pass in wedgeprops = { 'linewidth' : 3 }
to set the width of the wedge border lines equal to 3.
For more details, look at the doc/arguments of the wedge object.
By default 
                                                <literal classes="xref py py-obj">clip_on=False</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>textprops</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | dict of key value pairs ]</term>
                                        <definition>
                                            <paragraph>Dict of arguments to pass to the text objects.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>center</emphasis>: [ (0,0) | sequence of 2 scalars ]
Center position of the chart.</paragraph>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>frame</emphasis>: [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Plot axes frame with the chart.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>The pie chart will probably look best if the figure and axes are
square, or the Axes aspect is equal.  e.g.:</paragraph>
                            <literal_block xml:space="preserve">figure(figsize=(8,8))
ax = axes([0.1, 0.1, 0.8, 0.8])</literal_block>
                            <paragraph>or:</paragraph>
                            <literal_block xml:space="preserve">axes(aspect=1)</literal_block>
                            <definition_list>
                                <definition_list_item>
                                    <term>Return value:</term>
                                    <definition>
                                        <paragraph>If 
                                            <emphasis>autopct</emphasis>
                                            is 
                                            <emphasis>None</emphasis>
                                            , return the tuple (
                                            <emphasis>patches</emphasis>
                                            , 
                                            <emphasis>texts</emphasis>
                                            ):</paragraph>
                                        <block_quote>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <emphasis>patches</emphasis>is a sequence of

                                                        <reference internal="True" reftitle="matplotlib.patches.Wedge" refuri="patches_api#matplotlib.patches.Wedge">
                                                            <literal classes="xref py py-class">matplotlib.patches.Wedge</literal></reference>instances</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <emphasis>texts</emphasis>is a list of the label

                                                        <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                            <literal classes="xref py py-class">matplotlib.text.Text</literal></reference>instances.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                        <paragraph>If 
                                            <emphasis>autopct</emphasis>
                                            is not 
                                            <emphasis>None</emphasis>
                                            , return the tuple (
                                            <emphasis>patches</emphasis>
                                            ,

                                            <emphasis>texts</emphasis>
                                            , 
                                            <emphasis>autotexts</emphasis>
                                            ), where 
                                            <emphasis>patches</emphasis>
                                            and 
                                            <emphasis>texts</emphasis>
                                            are as
above, and 
                                            <emphasis>autotexts</emphasis>
                                            is a list of

                                            <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                <literal classes="xref py py-class">Text</literal></reference>instances for the numeric
labels.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'explode', 'x', 'colors', 'labels'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'plot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.plot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.plot" ids="matplotlib.axes.Axes.plot" module="matplotlib.axes" names="matplotlib.axes.Axes.plot">
                            <desc_name>plot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot lines and/or markers to the

                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-class">Axes</literal></reference>.  
                                <emphasis>args</emphasis>
                                is a variable length
argument, allowing for multiple 
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                pairs with an
optional format string.  For example, each of the following is
legal:</paragraph>
                            <literal_block xml:space="preserve">plot(x, y)        # plot x and y using default line style and color
plot(x, y, 'bo')  # plot x and y using blue circle markers
plot(y)           # plot y using x as index array 0..N-1
plot(y, 'r+')     # ditto, but with red plusses</literal_block>
                            <paragraph>If 
                                <emphasis>x</emphasis>
                                and/or 
                                <emphasis>y</emphasis>
                                is 2-dimensional, then the corresponding columns
will be plotted.</paragraph>
                            <paragraph>If used with labeled data, make sure that the color spec is not
included as an element in data, as otherwise the last case

                                <literal>plot(&quot;v&quot;,&quot;r&quot;, data={&quot;v&quot;:..., &quot;r&quot;:...)</literal>
                                can be interpreted as the first case which would do 
                                <literal>plot(v, r)</literal>
                                using the default line style and color.</paragraph>
                            <paragraph>If not used with labeled data (i.e., without a data argument),
an arbitrary number of 
                                <emphasis>x</emphasis>
                                , 
                                <emphasis>y</emphasis>
                                , 
                                <emphasis>fmt</emphasis>
                                groups can be specified, as in:</paragraph>
                            <literal_block xml:space="preserve">a.plot(x1, y1, 'g^', x2, y2, 'g-')</literal_block>
                            <paragraph>Return value is a list of lines that were added.</paragraph>
                            <paragraph>By default, each line is assigned a different style specified by a
'style cycle'.  To change this behavior, you can edit the
axes.prop_cycle rcParam.</paragraph>
                            <paragraph>The following format string characters are accepted to control
the line style or marker:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="16"/>
                                    <colspec colwidth="31"/>
                                    <thead>
                                        <row>
                                            <entry>
                                                <paragraph>character</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>description</paragraph>
                                            </entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'-'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>solid line style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'--'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>dashed line style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'-.'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>dash-dot line style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>':'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>dotted line style</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'.'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>point marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>','</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>pixel marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'o'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>circle marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'v'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>triangle_down marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'^'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>triangle_up marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'&lt;'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>triangle_left marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'&gt;'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>triangle_right marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'1'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>tri_down marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'2'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>tri_up marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'3'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>tri_left marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'4'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>tri_right marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'s'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>square marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'p'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>pentagon marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'*'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>star marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'h'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>hexagon1 marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'H'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>hexagon2 marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'+'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>plus marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'x'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>x marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'D'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>diamond marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'d'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>thin_diamond marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'|'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>vline marker</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>
                                                    <literal>'_'</literal>
                                                </paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>hline marker</paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <paragraph>The following color abbreviations are supported:</paragraph>
                            <table>
                                <tgroup cols="2">
                                    <colspec colwidth="10"/>
                                    <colspec colwidth="8"/>
                                    <thead>
                                        <row>
                                            <entry>
                                                <paragraph>character</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>color</paragraph>
                                            </entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <paragraph>'b'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>blue</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'g'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>green</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'r'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>red</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'c'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>cyan</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'m'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>magenta</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'y'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>yellow</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'k'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>black</paragraph>
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <paragraph>'w'</paragraph>
                                            </entry>
                                            <entry>
                                                <paragraph>white</paragraph>
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                            <paragraph>In addition, you can specify colors in many weird and
wonderful ways, including full names (
                                <literal>'green'</literal>
                                ), hex
strings (
                                <literal>'#008000'</literal>
                                ), RGB or RGBA tuples (
                                <literal>(0,1,0,1)</literal>
                                ) or
grayscale intensities as a string (
                                <literal>'0.8'</literal>
                                ).  Of these, the
string specifications can be used in place of a 
                                <literal>fmt</literal>
                                group,
but the tuple forms can be used only as 
                                <literal>kwargs</literal>
                                .</paragraph>
                            <paragraph>Line styles and colors are combined in a single format string, as in

                                <literal>'bo'</literal>
                                for blue circles.</paragraph>
                            <paragraph>The 
                                <emphasis>kwargs</emphasis>
                                can be used to set line properties (any property that has
a 
                                <literal>set_*</literal>
                                method).  You can use this to set a line label (for auto
legends), linewidth, anitialising, marker face color, etc.  Here is an
example:</paragraph>
                            <literal_block xml:space="preserve">plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)
plot([1,2,3], [1,4,9], 'rs',  label='line 2')
axis([0, 4, 0, 10])
legend()</literal_block>
                            <paragraph>If you make multiple lines with one plot command, the kwargs
apply to all those lines, e.g.:</paragraph>
                            <literal_block xml:space="preserve">plot(x1, y1, x2, y2, antialiased=False)</literal_block>
                            <paragraph>Neither line will be antialiased.</paragraph>
                            <paragraph>You do not need to use format strings, which are just
abbreviations.  All of the line properties can be controlled
by keyword arguments.  For example, you can set the color,
marker, linestyle, and markercolor with:</paragraph>
                            <literal_block xml:space="preserve">plot(x, y, color='green', linestyle='dashed', marker='o',
     markerfacecolor='blue', markersize=12).</literal_block>
                            <paragraph>See 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>for details.</paragraph>
                            <paragraph>The kwargs are 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>kwargs 
                                <emphasis>scalex</emphasis>
                                and 
                                <emphasis>scaley</emphasis>
                                , if defined, are passed on to

                                <reference internal="True" refid="matplotlib.axes.Axes.autoscale_view" reftitle="matplotlib.axes.Axes.autoscale_view">
                                    <literal classes="xref py py-meth">autoscale_view()</literal></reference>to determine
whether the 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                axes are autoscaled; the default is

                                <emphasis>True</emphasis>
                                .</paragraph>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'plot_date()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.plot_date',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.plot_date" ids="matplotlib.axes.Axes.plot_date" module="matplotlib.axes" names="matplotlib.axes.Axes.plot_date">
                            <desc_name>plot_date</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot with data with dates.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">plot_date(x, y, fmt='bo', tz=None, xdate=True,
          ydate=False, **kwargs)</literal_block>
                            <paragraph>Similar to the 
                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>command, except
the 
                                <emphasis>x</emphasis>
                                or 
                                <emphasis>y</emphasis>
                                (or both) data is considered to be dates, and the
axis is labeled accordingly.</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>and/or 
                                <emphasis>y</emphasis>
                                can be a sequence of dates represented as float
days since 0001-01-01 UTC.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fmt</emphasis>: string</term>
                                        <definition>
                                            <paragraph>The plot format string.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>tz</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | timezone string | 
                                            <literal classes="xref py py-class">tzinfo</literal>
                                            instance]</term>
                                        <definition>
                                            <paragraph>The time zone to use in labeling dates. If 
                                                <emphasis>None</emphasis>
                                                , defaults to rc
value.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xdate</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>True</emphasis>
                                                , the 
                                                <emphasis>x</emphasis>
                                                -axis will be labeled with dates.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>ydate</emphasis>: [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>True</emphasis>
                                                , the 
                                                <emphasis>y</emphasis>
                                                -axis will be labeled with dates.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note if you are using custom date tickers and formatters, it
may be necessary to set the formatters/locators after the call
to 
                                <literal classes="xref py py-meth">plot_date()</literal>
                                since 
                                <literal classes="xref py py-meth">plot_date()</literal>
                                will set the
default tick locator to

                                <reference internal="True" reftitle="matplotlib.dates.AutoDateLocator" refuri="dates_api#matplotlib.dates.AutoDateLocator">
                                    <literal classes="xref py py-class">matplotlib.dates.AutoDateLocator</literal></reference>(if the tick
locator is not already set to a

                                <reference internal="True" reftitle="matplotlib.dates.DateLocator" refuri="dates_api#matplotlib.dates.DateLocator">
                                    <literal classes="xref py py-class">matplotlib.dates.DateLocator</literal></reference>instance) and the
default tick formatter to

                                <reference internal="True" reftitle="matplotlib.dates.AutoDateFormatter" refuri="dates_api#matplotlib.dates.AutoDateFormatter">
                                    <literal classes="xref py py-class">matplotlib.dates.AutoDateFormatter</literal></reference>(if the tick
formatter is not already set to a

                                <reference internal="True" reftitle="matplotlib.dates.DateFormatter" refuri="dates_api#matplotlib.dates.DateFormatter">
                                    <literal classes="xref py py-class">matplotlib.dates.DateFormatter</literal></reference>instance).</paragraph>
                            <paragraph>Valid kwargs are 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <seealso>
                                <paragraph>
                                    <reference internal="True" reftitle="matplotlib.dates" refuri="dates_api#module-matplotlib.dates">
                                        <literal classes="xref py py-mod">dates</literal>
                                    </reference>for helper functions</paragraph>
                                <paragraph>
                                    <reference internal="True" reftitle="matplotlib.dates.date2num" refuri="dates_api#matplotlib.dates.date2num">
                                        <literal classes="xref py py-func">date2num()</literal>
                                    </reference>,

                                    <reference internal="True" reftitle="matplotlib.dates.num2date" refuri="dates_api#matplotlib.dates.num2date">
                                        <literal classes="xref py py-func">num2date()</literal></reference>and

                                    <reference internal="True" reftitle="matplotlib.dates.drange" refuri="dates_api#matplotlib.dates.drange">
                                        <literal classes="xref py py-func">drange()</literal></reference>for help on creating the required
floating point dates.</paragraph>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'properties()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.properties',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.properties" ids="matplotlib.axes.Axes.properties" module="matplotlib.axes" names="matplotlib.axes.Axes.properties">
                            <desc_name>properties</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>return a dictionary mapping property name -&gt; value for all Artist props</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'psd()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.psd',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.psd" ids="matplotlib.axes.Axes.psd" module="matplotlib.axes" names="matplotlib.axes.Axes.psd">
                            <desc_name>psd</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the power spectral density.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">psd(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
    window=mlab.window_hanning, noverlap=0, pad_to=None,
    sides='default', scale_by_freq=None, return_line=None, **kwargs)</literal_block>
                            <paragraph>The power spectral density 
                                <latex_math fontset="cm" latex="P_{xx}"/>
                                by Welch's average
periodogram method.  The vector 
                                <emphasis>x</emphasis>
                                is divided into 
                                <emphasis>NFFT</emphasis>
                                length
segments.  Each segment is detrended by function 
                                <emphasis>detrend</emphasis>
                                and
windowed by function 
                                <emphasis>window</emphasis>
                                .  
                                <emphasis>noverlap</emphasis>
                                gives the length of
the overlap between segments.  The 
                                <latex_math fontset="cm" latex="|\mathrm{fft}(i)|^2"/>
                                of each segment 
                                <latex_math fontset="cm" latex="i"/>
                                are averaged to compute 
                                <latex_math fontset="cm" latex="P_{xx}"/>
                                ,
with a scaling to correct for power loss due to windowing.</paragraph>
                            <paragraph>If len(
                                <emphasis>x</emphasis>
                                ) &lt; 
                                <emphasis>NFFT</emphasis>
                                , it will be zero padded to 
                                <emphasis>NFFT</emphasis>
                                .</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>x</emphasis>: 1-D array or sequence</term>
                                        <definition>
                                            <paragraph>Array or sequence containing the data</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of points to which the data segment is padded when
performing the FFT.  This can be different from 
                                            <emphasis>NFFT</emphasis>
                                            , which
specifies the number of data points used.  While not increasing
the actual resolution of the spectrum (the minimum distance between
resolvable peaks), this can give more points in the plot,
allowing for more detail. This corresponds to the 
                                            <emphasis>n</emphasis>
                                            parameter
in the call to fft(). The default is None, which sets 
                                            <emphasis>pad_to</emphasis>
                                            equal to 
                                            <emphasis>NFFT</emphasis></paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>NFFT</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of data points used in each block for the FFT.
A power 2 is most efficient.  The default value is 256.
This should 
                                            <emphasis>NOT</emphasis>
                                            be used to get zero padding, or the scaling of the
result will be incorrect. Use 
                                            <emphasis>pad_to</emphasis>
                                            for this instead.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>detrend</emphasis>: [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>callable</paragraph>
                                        </block_quote>
                                        <paragraph>The function applied to each segment before fft-ing,
designed to remove the mean or linear trend.  Unlike in
MATLAB, where the 
                                            <emphasis>detrend</emphasis>
                                            parameter is a vector, in
matplotlib is it a function.  The 
                                            <literal classes="xref py py-mod">pylab</literal>
                                            module defines 
                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            ,

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            , and

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            , but you can use
a custom function as well.  You can also use a string to choose
one of the functions.  'default', 'constant', and 'mean' call

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            .  'linear' calls

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            .  'none' calls

                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>scale_by_freq</emphasis>: boolean</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>Specifies whether the resulting density values should be scaled
by the scaling frequency, which gives density in units of Hz^-1.
This allows for integration over the returned frequency values.
The default is True for MATLAB compatibility.</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>noverlap</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The number of points of overlap between segments.
The default value is 0 (no overlap).</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>return_line</emphasis>: bool</term>
                                                <definition>
                                                    <paragraph>Whether to include the line object plotted in the returned values.
Default is False.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>If 
                                <emphasis>return_line</emphasis>
                                is False, returns the tuple (
                                <emphasis>Pxx</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                ).
If 
                                <emphasis>return_line</emphasis>
                                is True, returns the tuple (
                                <emphasis>Pxx</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                . 
                                <emphasis>line</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Pxx</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The values for the power spectrum 
                                                <literal classes="xref py py-obj">P_{xx}</literal>
                                                before scaling
(real valued)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the elements in 
                                                <emphasis>Pxx</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>line</emphasis>: a 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-class">Line2D</literal></reference>instance</term>
                                        <definition>
                                            <paragraph>The line created by this function.
Only returend if 
                                                <emphasis>return_line</emphasis>
                                                is True.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>For plotting, the power is plotted as

                                <latex_math fontset="cm" latex="10\log_{10}(P_{xx})"/>
                                for decibels, though 
                                <emphasis>Pxx</emphasis>
                                itself
is returned.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>References:</term>
                                    <definition>
                                        <paragraph>Bendat &amp; Piersol -- Random Data: Analysis and Measurement
Procedures, John Wiley &amp; Sons (1986)</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>kwargs control the 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">specgram()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">specgram()</literal>differs in the default overlap; in not
returning the mean of the segment periodograms; in  returning
the times of the segments; and in plotting a colormap instead
of a line.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">magnitude_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">magnitude_spectrum()</literal>plots the magnitude spectrum.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">csd()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">csd()</literal>plots the spectral density between two signals.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'quiver()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.quiver',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.quiver" ids="matplotlib.axes.Axes.quiver" module="matplotlib.axes" names="matplotlib.axes.Axes.quiver">
                            <desc_name>quiver</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a 2-D field of arrows.</paragraph>
                            <paragraph>call signatures:</paragraph>
                            <literal_block xml:space="preserve">quiver(U, V, **kw)
quiver(U, V, C, **kw)
quiver(X, Y, U, V, **kw)
quiver(X, Y, U, V, C, **kw)</literal_block>
                            <paragraph>Arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>X</emphasis>, 
                                            <emphasis>Y</emphasis>
                                            :</term>
                                        <definition>
                                            <paragraph>The x and y coordinates of the arrow locations (default is tail of
arrow; see 
                                                <emphasis>pivot</emphasis>
                                                kwarg)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>U</emphasis>, 
                                            <emphasis>V</emphasis>
                                            :</term>
                                        <definition>
                                            <paragraph>Give the x and y components of the arrow vectors</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>C</emphasis>:</term>
                                        <definition>
                                            <paragraph>An optional array used to map colors to the arrows</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>All arguments may be 1-D or 2-D arrays or sequences. If 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                are absent, they will be generated as a uniform grid.  If 
                                <emphasis>U</emphasis>
                                and 
                                <emphasis>V</emphasis>
                                are 2-D arrays but 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                are 1-D, and if 
                                <literal>len(X)</literal>
                                and 
                                <literal>len(Y)</literal>
                                match the column and row dimensions of 
                                <emphasis>U</emphasis>
                                , then 
                                <emphasis>X</emphasis>
                                and 
                                <emphasis>Y</emphasis>
                                will be
expanded with 
                                <literal classes="xref py py-func">numpy.meshgrid()</literal>
                                .</paragraph>
                            <paragraph>
                                <emphasis>U</emphasis>, 
                                <emphasis>V</emphasis>
                                , 
                                <emphasis>C</emphasis>
                                may be masked arrays, but masked 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                are not
supported at present.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>units</emphasis>: [ 'width' | 'height' | 'dots' | 'inches' | 'x' | 'y' | 'xy' ]</term>
                                        <definition>
                                            <paragraph>Arrow units; the arrow dimensions 
                                                <emphasis>except for length</emphasis>
                                                are in
multiples of this unit.</paragraph>
                                            <bullet_list bullet="*">
                                                <list_item>
                                                    <paragraph>'width' or 'height': the width or height of the axes</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>'dots' or 'inches': pixels or inches, based on the figure dpi</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>'x', 'y', or 'xy': 
                                                        <emphasis>X</emphasis>
                                                        , 
                                                        <emphasis>Y</emphasis>
                                                        , or sqrt(X^2+Y^2) data units</paragraph>
                                                </list_item>
                                            </bullet_list>
                                            <paragraph>The arrows scale differently depending on the units.  For
'x' or 'y', the arrows get larger as one zooms in; for other
units, the arrow size is independent of the zoom state.  For
'width or 'height', the arrow size increases with the width and
height of the axes, respectively, when the window is resized;
for 'dots' or 'inches', resizing does not change the arrows.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>angles</emphasis>: [ 'uv' | 'xy' | array ]</term>
                                        <definition>
                                            <paragraph>With the default 'uv', the arrow axis aspect ratio is 1, so that
if 
                                                <emphasis>U*==*V</emphasis>
                                                the orientation of the arrow on the plot is 45 degrees
CCW from the horizontal axis (positive to the right).
With 'xy', the arrow points from (x,y) to (x+u, y+v).
Use this for plotting a gradient field, for example.
Alternatively, arbitrary angles may be specified as an array
of values in degrees, CCW from the horizontal axis.
Note: inverting a data axis will correspondingly invert the
arrows 
                                                <emphasis>only</emphasis>
                                                with 
                                                <literal classes="xref py py-obj">angles='xy'</literal>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>scale</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | float ]</term>
                                        <definition>
                                            <paragraph>Data units per arrow length unit, e.g., m/s per plot width; a smaller
scale parameter makes the arrow longer.  If 
                                                <emphasis>None</emphasis>
                                                , a simple
autoscaling algorithm is used, based on the average vector length
and the number of vectors.  The arrow length unit is given by
the 
                                                <emphasis>scale_units</emphasis>
                                                parameter</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>scale_units</emphasis>: 
                                            <emphasis>None</emphasis>
                                            , or any of the 
                                            <emphasis>units</emphasis>
                                            options.</term>
                                        <definition>
                                            <paragraph>For example, if 
                                                <emphasis>scale_units</emphasis>
                                                is 'inches', 
                                                <emphasis>scale</emphasis>
                                                is 2.0, and

                                                <literal>(u,v) = (1,0)</literal>
                                                , then the vector will be 0.5 inches long.
If 
                                                <emphasis>scale_units</emphasis>
                                                is 'width', then the vector will be half the width
of the axes.</paragraph>
                                            <paragraph>If 
                                                <emphasis>scale_units</emphasis>
                                                is 'x' then the vector will be 0.5 x-axis
units.  To plot vectors in the x-y plane, with u and v having
the same units as x and y, use
&quot;angles='xy', scale_units='xy', scale=1&quot;.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>width</emphasis>:</term>
                                        <definition>
                                            <paragraph>Shaft width in arrow units; default depends on choice of units,
above, and number of vectors; a typical starting value is about
0.005 times the width of the plot.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>headwidth</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>Head width as multiple of shaft width, default is 3</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>headlength</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>Head length as multiple of shaft width, default is 5</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>headaxislength</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>Head length at shaft intersection, default is 4.5</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>minshaft</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>Length below which arrow scales, in units of head length. Do not
set this to less than 1, or small arrows will look terrible!
Default is 1</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>minlength</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>Minimum length as a multiple of shaft width; if an arrow length
is less than this, plot a dot (hexagon) of this diameter instead.
Default is 1.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>pivot</emphasis>: [ 'tail' | 'mid' | 'middle' | 'tip' ]</term>
                                        <definition>
                                            <paragraph>The part of the arrow that is at the grid point; the arrow rotates
about this point, hence the name 
                                                <emphasis>pivot</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>color</emphasis>: [ color | color sequence ]</term>
                                        <definition>
                                            <paragraph>This is a synonym for the

                                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                                    <literal classes="xref py py-class">PolyCollection</literal></reference>facecolor kwarg.
If 
                                                <emphasis>C</emphasis>
                                                has been set, 
                                                <emphasis>color</emphasis>
                                                has no effect.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>The defaults give a slightly swept-back arrow; to make the head a
triangle, make 
                                <emphasis>headaxislength</emphasis>
                                the same as 
                                <emphasis>headlength</emphasis>
                                . To make the
arrow more pointed, reduce 
                                <emphasis>headwidth</emphasis>
                                or increase 
                                <emphasis>headlength</emphasis>
                                and

                                <emphasis>headaxislength</emphasis>
                                . To make the head smaller relative to the shaft,
scale down all the head parameters. You will probably do best to leave
minshaft alone.</paragraph>
                            <paragraph>linewidths and edgecolors can be used to customize the arrow
outlines. Additional 
                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>keyword arguments:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="91"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_alpha" refuri="collections_api#matplotlib.collections.Collection.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or None</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_antialiased" refuri="collections_api#matplotlib.collections.Collection.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or antialiaseds</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Boolean or sequence of booleans</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_array" refuri="cm_api#matplotlib.cm.ScalarMappable.set_array">
                                                            <literal classes="xref py py-meth">array</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_clim" refuri="cm_api#matplotlib.cm.ScalarMappable.set_clim">
                                                            <literal classes="xref py py-meth">clim</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a length 2 sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_cmap" refuri="cm_api#matplotlib.cm.ScalarMappable.set_cmap">
                                                            <literal classes="xref py py-meth">cmap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a colormap or registered colormap name</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_color" refuri="collections_api#matplotlib.collections.Collection.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color arg or sequence of rgba tuples</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_edgecolor" refuri="collections_api#matplotlib.collections.Collection.set_edgecolor">
                                                            <literal classes="xref py py-meth">edgecolor</literal>
                                                        </reference>or edgecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_facecolor" refuri="collections_api#matplotlib.collections.Collection.set_facecolor">
                                                            <literal classes="xref py py-meth">facecolor</literal>
                                                        </reference>or facecolors</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>matplotlib color spec or sequence of specs</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_hatch" refuri="collections_api#matplotlib.collections.Collection.set_hatch">
                                                            <literal classes="xref py py-meth">hatch</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ '/' | '\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linestyle" refuri="collections_api#matplotlib.collections.Collection.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or linestyles or dashes</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_linewidth" refuri="collections_api#matplotlib.collections.Collection.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw or linewidths</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.cm.ScalarMappable.set_norm" refuri="cm_api#matplotlib.cm.ScalarMappable.set_norm">
                                                            <literal classes="xref py py-meth">norm</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offset_position" refuri="collections_api#matplotlib.collections.Collection.set_offset_position">
                                                            <literal classes="xref py py-meth">offset_position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_offsets" refuri="collections_api#matplotlib.collections.Collection.set_offsets">
                                                            <literal classes="xref py py-meth">offsets</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float or sequence of floats</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_pickradius" refuri="collections_api#matplotlib.collections.Collection.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.collections.Collection.set_urls" refuri="collections_api#matplotlib.collections.Collection.set_urls">
                                                            <literal classes="xref py py-meth">urls</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'quiverkey()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.quiverkey',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.quiverkey" ids="matplotlib.axes.Axes.quiverkey" module="matplotlib.axes" names="matplotlib.axes.Axes.quiverkey">
                            <desc_name>quiverkey</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kw</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a key to a quiver plot.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">quiverkey(Q, X, Y, U, label, **kw)</literal_block>
                            <paragraph>Arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Q</emphasis>:</term>
                                        <definition>
                                            <paragraph>The Quiver instance returned by a call to quiver.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>X</emphasis>, 
                                            <emphasis>Y</emphasis>
                                            :</term>
                                        <definition>
                                            <paragraph>The location of the key; additional explanation follows.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>U</emphasis>:</term>
                                        <definition>
                                            <paragraph>The length of the key</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>label</emphasis>:</term>
                                        <definition>
                                            <paragraph>A string with the length and units of the key</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>coordinates</emphasis>= [ 'axes' | 'figure' | 'data' | 'inches' ]</term>
                                        <definition>
                                            <paragraph>Coordinate system and units for 
                                                <emphasis>X</emphasis>
                                                , 
                                                <emphasis>Y</emphasis>
                                                : 'axes' and 'figure' are
normalized coordinate systems with 0,0 in the lower left and 1,1
in the upper right; 'data' are the axes data coordinates (used for
the locations of the vectors in the quiver plot itself); 'inches'
is position in the figure in inches, with 0,0 at the lower left
corner.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>color</emphasis>:</term>
                                        <definition>
                                            <paragraph>overrides face and edge colors from 
                                                <emphasis>Q</emphasis>
                                                .</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>labelpos</emphasis>= [ 'N' | 'S' | 'E' | 'W' ]</term>
                                        <definition>
                                            <paragraph>Position the label above, below, to the right, to the left of the
arrow, respectively.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>labelsep</emphasis>:</term>
                                        <definition>
                                            <paragraph>Distance in inches between the arrow and the label.  Default is
0.1</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>labelcolor</emphasis>:</term>
                                        <definition>
                                            <paragraph>defaults to default 
                                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                    <literal classes="xref py py-class">Text</literal></reference>color.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>fontproperties</emphasis>:</term>
                                        <definition>
                                            <paragraph>A dictionary with keyword arguments accepted by the

                                                <reference internal="True" reftitle="matplotlib.font_manager.FontProperties" refuri="font_manager_api#matplotlib.font_manager.FontProperties">
                                                    <literal classes="xref py py-class">FontProperties</literal></reference>initializer:

                                                <emphasis>family</emphasis>
                                                , 
                                                <emphasis>style</emphasis>
                                                , 
                                                <emphasis>variant</emphasis>
                                                , 
                                                <emphasis>size</emphasis>
                                                , 
                                                <emphasis>weight</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Any additional keyword arguments are used to override vector
properties taken from 
                                <emphasis>Q</emphasis>
                                .</paragraph>
                            <paragraph>The positioning of the key depends on 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                , 
                                <emphasis>coordinates</emphasis>
                                , and

                                <emphasis>labelpos</emphasis>
                                .  If 
                                <emphasis>labelpos</emphasis>
                                is 'N' or 'S', 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                give the position
of the middle of the key arrow.  If 
                                <emphasis>labelpos</emphasis>
                                is 'E', 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                positions the head, and if 
                                <emphasis>labelpos</emphasis>
                                is 'W', 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                positions the
tail; in either of these two cases, 
                                <emphasis>X</emphasis>
                                , 
                                <emphasis>Y</emphasis>
                                is somewhere in the
middle of the arrow+label key object.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'redraw_in_frame()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.redraw_in_frame',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.redraw_in_frame" ids="matplotlib.axes.Axes.redraw_in_frame" module="matplotlib.axes" names="matplotlib.axes.Axes.redraw_in_frame">
                            <desc_name>redraw_in_frame</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>This method can only be used after an initial draw which
caches the renderer.  It is used to efficiently update Axes
data (axis ticks, labels, etc are not updated)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'relim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.relim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.relim" ids="matplotlib.axes.Axes.relim" module="matplotlib.axes" names="matplotlib.axes.Axes.relim">
                            <desc_name>relim</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>visible_only=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Recompute the data limits based on current artists. If you want to
exclude invisible artists from the calculation, set

                                <literal>visible_only=True</literal></paragraph>
                            <paragraph>At present, 
                                <reference internal="True" reftitle="matplotlib.collections.Collection" refuri="collections_api#matplotlib.collections.Collection">
                                    <literal classes="xref py py-class">Collection</literal></reference>instances are not supported.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.remove',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.remove" ids="matplotlib.axes.Axes.remove" module="matplotlib.axes" names="matplotlib.axes.Axes.remove">
                            <desc_name>remove</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Remove the artist from the figure if possible.  The effect
will not be visible until the figure is redrawn, e.g., with

                                <literal classes="xref py py-meth">matplotlib.axes.Axes.draw_idle()</literal>
                                .  Call

                                <reference internal="True" refid="matplotlib.axes.Axes.relim" reftitle="matplotlib.axes.Axes.relim">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.relim()</literal></reference>to update the axes limits
if desired.</paragraph>
                            <paragraph>Note: 
                                <reference internal="True" refid="matplotlib.axes.Axes.relim" reftitle="matplotlib.axes.Axes.relim">
                                    <literal classes="xref py py-meth">relim()</literal></reference>will not see
collections even if the collection was added to axes with

                                <emphasis>autolim</emphasis>
                                = True.</paragraph>
                            <paragraph>Note: there is no support for removing the artist's legend entry.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'remove_callback()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.remove_callback',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.remove_callback" ids="matplotlib.axes.Axes.remove_callback" module="matplotlib.axes" names="matplotlib.axes.Axes.remove_callback">
                            <desc_name>remove_callback</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>oid</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Remove a callback based on its 
                                <emphasis>id</emphasis>
                                .</paragraph>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-meth">add_callback()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>For adding callbacks</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'reset_position()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.reset_position',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.reset_position" ids="matplotlib.axes.Axes.reset_position" module="matplotlib.axes" names="matplotlib.axes.Axes.reset_position">
                            <desc_name>reset_position</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make the original position the active position</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'scatter()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.scatter',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.scatter" ids="matplotlib.axes.Axes.scatter" module="matplotlib.axes" names="matplotlib.axes.Axes.scatter">
                            <desc_name>scatter</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a scatter plot of x vs y, where x and y are sequence like objects
of the same lengths.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x, y</strong>: array_like, shape (n, )</paragraph>
                                        <block_quote>
                                            <paragraph>Input data</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>s</strong>: scalar or array_like, shape (n, ), optional, default: 20</paragraph>
                                        <block_quote>
                                            <paragraph>size in points^2.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>c</strong>: color or sequence of color, optional, default</paragraph>
                                        <block_quote>
                                            <paragraph>
                                                <literal classes="xref py py-obj">c</literal>can be a single color format string, or a sequence of color
specifications of length 
                                                <literal classes="xref py py-obj">N</literal>
                                                , or a sequence of 
                                                <literal classes="xref py py-obj">N</literal>
                                                numbers to be
mapped to colors using the 
                                                <literal classes="xref py py-obj">cmap</literal>
                                                and 
                                                <literal classes="xref py py-obj">norm</literal>
                                                specified via kwargs
(see below). Note that 
                                                <literal classes="xref py py-obj">c</literal>
                                                should not be a single numeric RGB or
RGBA sequence because that is indistinguishable from an array of
values to be colormapped.  
                                                <literal classes="xref py py-obj">c</literal>
                                                can be a 2-D array in which the
rows are RGB or RGBA, however, including the case of a single
row to specify the same color for all points.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>marker</strong>: 
                                            <reference internal="True" reftitle="matplotlib.markers.MarkerStyle" refuri="markers_api#matplotlib.markers.MarkerStyle">
                                                <literal classes="xref py py-obj">MarkerStyle</literal></reference>, optional, default: 'o'</paragraph>
                                        <block_quote>
                                            <paragraph>See 
                                                <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                    <literal classes="xref py py-obj">markers</literal></reference>for more information on the different
styles of markers scatter supports. 
                                                <literal classes="xref py py-obj">marker</literal>
                                                can be either
an instance of the class or the text shorthand for a particular
marker.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>cmap</strong>: 
                                            <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                <literal classes="xref py py-obj">Colormap</literal></reference>, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-obj">Colormap</literal></reference>instance or registered name.

                                                <literal classes="xref py py-obj">cmap</literal>
                                                is only used if 
                                                <literal classes="xref py py-obj">c</literal>
                                                is an array of floats. If None,
defaults to rc 
                                                <literal classes="xref py py-obj">image.cmap</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>norm</strong>: 
                                            <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                <literal classes="xref py py-obj">Normalize</literal></reference>, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-obj">Normalize</literal></reference>instance is used to scale
luminance data to 0, 1. 
                                                <literal classes="xref py py-obj">norm</literal>
                                                is only used if 
                                                <literal classes="xref py py-obj">c</literal>
                                                is an array of
floats. If 
                                                <literal classes="xref py py-obj">None</literal>
                                                , use the default 
                                                <literal classes="xref py py-func">normalize()</literal>
                                                .</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>vmin, vmax</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>
                                                <literal classes="xref py py-obj">vmin</literal>and 
                                                <literal classes="xref py py-obj">vmax</literal>
                                                are used in conjunction with 
                                                <literal classes="xref py py-obj">norm</literal>
                                                to normalize
luminance data.  If either are 
                                                <literal classes="xref py py-obj">None</literal>
                                                , the min and max of the
color array is used.  Note if you pass a 
                                                <literal classes="xref py py-obj">norm</literal>
                                                instance, your
settings for 
                                                <literal classes="xref py py-obj">vmin</literal>
                                                and 
                                                <literal classes="xref py py-obj">vmax</literal>
                                                will be ignored.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>alpha</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>The alpha blending value, between 0 (transparent) and 1 (opaque)</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>linewidths</strong>: scalar or array_like, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>If None, defaults to (lines.linewidth,).</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>edgecolors</strong>: color or sequence of color, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>If None, defaults to (patch.edgecolor).
If 'face', the edge color will always be the same as
the face color.  If it is 'none', the patch boundary will not
be drawn.  For non-filled markers, the 
                                                <literal classes="xref py py-obj">edgecolors</literal>
                                                kwarg
is ignored; color is determined by 
                                                <literal classes="xref py py-obj">c</literal>
                                                .</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>paths</strong>: 
                                            <reference internal="True" reftitle="matplotlib.collections.PathCollection" refuri="collections_api#matplotlib.collections.PathCollection">
                                                <literal classes="xref py py-obj">PathCollection</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.collections.Collection" refuri="collections_api#matplotlib.collections.Collection">
                                                <literal classes="xref py py-obj">Collection</literal></reference>properties</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'edgecolors', 'c', 'facecolor', 'color', 'linewidths', 's', 'y', 'x', 'facecolors'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'semilogx()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.semilogx',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.semilogx" ids="matplotlib.axes.Axes.semilogx" module="matplotlib.axes" names="matplotlib.axes.Axes.semilogx">
                            <desc_name>semilogx</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a plot with log scaling on the 
                                <emphasis>x</emphasis>
                                axis.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">semilogx(*args, **kwargs)</literal_block>
                            <paragraph>
                                <literal classes="xref py py-func">semilogx()</literal>supports all the keyword arguments of

                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>and

                                <reference internal="True" refid="matplotlib.axes.Axes.set_xscale" reftitle="matplotlib.axes.Axes.set_xscale">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_xscale()</literal></reference>.</paragraph>
                            <paragraph>Notable keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>basex</emphasis>: scalar &gt; 1</term>
                                        <definition>
                                            <paragraph>Base of the 
                                                <emphasis>x</emphasis>
                                                logarithm</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>subsx</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | sequence ]</term>
                                        <definition>
                                            <paragraph>The location of the minor xticks; 
                                                <emphasis>None</emphasis>
                                                defaults to
autosubs, which depend on the number of decades in the
plot; see 
                                                <reference internal="True" refid="matplotlib.axes.Axes.set_xscale" reftitle="matplotlib.axes.Axes.set_xscale">
                                                    <literal classes="xref py py-meth">set_xscale()</literal></reference>for
details.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>nonposx</emphasis>: [ 'mask' | 'clip' ]</term>
                                        <definition>
                                            <paragraph>Non-positive values in 
                                                <emphasis>x</emphasis>
                                                can be masked as
invalid, or clipped to a very small positive number</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>The remaining valid kwargs are

                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-meth">loglog()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>For example code and figure</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'semilogy()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.semilogy',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.semilogy" ids="matplotlib.axes.Axes.semilogy" module="matplotlib.axes" names="matplotlib.axes.Axes.semilogy">
                            <desc_name>semilogy</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a plot with log scaling on the 
                                <emphasis>y</emphasis>
                                axis.</paragraph>
                            <paragraph>call signature:</paragraph>
                            <literal_block xml:space="preserve">semilogy(*args, **kwargs)</literal_block>
                            <paragraph>
                                <literal classes="xref py py-func">semilogy()</literal>supports all the keyword arguments of

                                <literal classes="xref py py-func">plot()</literal>
                                and

                                <reference internal="True" refid="matplotlib.axes.Axes.set_yscale" reftitle="matplotlib.axes.Axes.set_yscale">
                                    <literal classes="xref py py-meth">matplotlib.axes.Axes.set_yscale()</literal></reference>.</paragraph>
                            <paragraph>Notable keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>basey</emphasis>: scalar &gt; 1</term>
                                        <definition>
                                            <paragraph>Base of the 
                                                <emphasis>y</emphasis>
                                                logarithm</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>subsy</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | sequence ]</term>
                                        <definition>
                                            <paragraph>The location of the minor yticks; 
                                                <emphasis>None</emphasis>
                                                defaults to
autosubs, which depend on the number of decades in the
plot; see 
                                                <reference internal="True" refid="matplotlib.axes.Axes.set_yscale" reftitle="matplotlib.axes.Axes.set_yscale">
                                                    <literal classes="xref py py-meth">set_yscale()</literal></reference>for
details.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>nonposy</emphasis>: [ 'mask' | 'clip' ]</term>
                                        <definition>
                                            <paragraph>Non-positive values in 
                                                <emphasis>y</emphasis>
                                                can be masked as
invalid, or clipped to a very small positive number</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>The remaining valid kwargs are

                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="85"/>
                                        <colspec colwidth="143"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_antialiased" refuri="lines_api#matplotlib.lines.Line2D.set_antialiased">
                                                            <literal classes="xref py py-meth">antialiased</literal>
                                                        </reference>or aa</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_color" refuri="lines_api#matplotlib.lines.Line2D.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>or c</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_capstyle">
                                                            <literal classes="xref py py-meth">dash_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' | 'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dash_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_dash_joinstyle">
                                                            <literal classes="xref py py-meth">dash_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_dashes" refuri="lines_api#matplotlib.lines.Line2D.set_dashes">
                                                            <literal classes="xref py py-meth">dashes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>sequence of on/off ink in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_drawstyle" refuri="lines_api#matplotlib.lines.Line2D.set_drawstyle">
                                                            <literal classes="xref py py-meth">drawstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_fillstyle" refuri="lines_api#matplotlib.lines.Line2D.set_fillstyle">
                                                            <literal classes="xref py py-meth">fillstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linestyle" refuri="lines_api#matplotlib.lines.Line2D.set_linestyle">
                                                            <literal classes="xref py py-meth">linestyle</literal>
                                                        </reference>or ls</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | 
                                                        <literal>'-'</literal>
                                                        | 
                                                        <literal>'--'</literal>
                                                        | 
                                                        <literal>'-.'</literal>
                                                        | 
                                                        <literal>':'</literal>
                                                        | 
                                                        <literal>'None'</literal>
                                                        | 
                                                        <literal>' '</literal>
                                                        | 
                                                        <literal>''</literal>
                                                        ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_linewidth" refuri="lines_api#matplotlib.lines.Line2D.set_linewidth">
                                                            <literal classes="xref py py-meth">linewidth</literal>
                                                        </reference>or lw</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_marker" refuri="lines_api#matplotlib.lines.Line2D.set_marker">
                                                            <literal classes="xref py py-meth">marker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.markers" refuri="markers_api#module-matplotlib.markers">
                                                            <literal classes="xref py py-mod">A valid marker style</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgecolor">
                                                            <literal classes="xref py py-meth">markeredgecolor</literal>
                                                        </reference>or mec</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markeredgewidth" refuri="lines_api#matplotlib.lines.Line2D.set_markeredgewidth">
                                                            <literal classes="xref py py-meth">markeredgewidth</literal>
                                                        </reference>or mew</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float value in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecolor" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecolor">
                                                            <literal classes="xref py py-meth">markerfacecolor</literal>
                                                        </reference>or mfc</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markerfacecoloralt" refuri="lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt">
                                                            <literal classes="xref py py-meth">markerfacecoloralt</literal>
                                                        </reference>or mfcalt</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markersize" refuri="lines_api#matplotlib.lines.Line2D.set_markersize">
                                                            <literal classes="xref py py-meth">markersize</literal>
                                                        </reference>or ms</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_markevery" refuri="lines_api#matplotlib.lines.Line2D.set_markevery">
                                                            <literal classes="xref py py-meth">markevery</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_picker" refuri="lines_api#matplotlib.lines.Line2D.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points or callable pick function 
                                                        <literal>fn(artist, event)</literal></paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_pickradius" refuri="lines_api#matplotlib.lines.Line2D.set_pickradius">
                                                            <literal classes="xref py py-meth">pickradius</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float distance in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_capstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_capstyle">
                                                            <literal classes="xref py py-meth">solid_capstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['butt' | 'round' |  'projecting']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_solid_joinstyle" refuri="lines_api#matplotlib.lines.Line2D.set_solid_joinstyle">
                                                            <literal classes="xref py py-meth">solid_joinstyle</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['miter' | 'round' | 'bevel']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_transform" refuri="lines_api#matplotlib.lines.Line2D.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Transform</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_xdata" refuri="lines_api#matplotlib.lines.Line2D.set_xdata">
                                                            <literal classes="xref py py-meth">xdata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D.set_ydata" refuri="lines_api#matplotlib.lines.Line2D.set_ydata">
                                                            <literal classes="xref py py-meth">ydata</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>1D array</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-meth">loglog()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>For example code and figure</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set" ids="matplotlib.axes.Axes.set" module="matplotlib.axes" names="matplotlib.axes.Axes.set">
                            <desc_name>set</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>A property batch setter. Pass 
                                <emphasis>kwargs</emphasis>
                                to set properties.
Will handle property name collisions (e.g., if both
'color' and 'facecolor' are specified, the property
with higher priority gets set last).</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_adjustable()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_adjustable',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_adjustable" ids="matplotlib.axes.Axes.set_adjustable" module="matplotlib.axes" names="matplotlib.axes.Axes.set_adjustable">
                            <desc_name>set_adjustable</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>adjustable</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>ACCEPTS: [ 'box' | 'datalim' | 'box-forced']</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_agg_filter()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_agg_filter',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_agg_filter" ids="matplotlib.axes.Axes.set_agg_filter" module="matplotlib.axes" names="matplotlib.axes.Axes.set_agg_filter">
                            <desc_name>set_agg_filter</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>filter_func</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>set agg_filter fuction.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_alpha()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_alpha',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_alpha" ids="matplotlib.axes.Axes.set_alpha" module="matplotlib.axes" names="matplotlib.axes.Axes.set_alpha">
                            <desc_name>set_alpha</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>alpha</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the alpha value used for blending - not supported on
all backends.</paragraph>
                            <paragraph>ACCEPTS: float (0.0 transparent through 1.0 opaque)</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_anchor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_anchor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_anchor" ids="matplotlib.axes.Axes.set_anchor" module="matplotlib.axes" names="matplotlib.axes.Axes.set_anchor">
                            <desc_name>set_anchor</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>anchor</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>
                                <emphasis>anchor</emphasis>
                            </paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="5"/>
                                        <colspec colwidth="12"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>value</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>'C'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Center</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'SW'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>bottom left</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'S'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>bottom</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'SE'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>bottom right</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'E'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>right</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'NE'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>top right</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'N'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>top</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'NW'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>top left</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'W'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>left</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_animated()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_animated',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_animated" ids="matplotlib.axes.Axes.set_animated" module="matplotlib.axes" names="matplotlib.axes.Axes.set_animated">
                            <desc_name>set_animated</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the artist's animation state.</paragraph>
                            <paragraph>ACCEPTS: [True | False]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_aspect()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_aspect',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_aspect" ids="matplotlib.axes.Axes.set_aspect" module="matplotlib.axes" names="matplotlib.axes.Axes.set_aspect">
                            <desc_name>set_aspect</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>aspect</desc_parameter>
                                <desc_parameter>adjustable=None</desc_parameter>
                                <desc_parameter>anchor=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>
                                <emphasis>aspect</emphasis>
                            </paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="8"/>
                                        <colspec colwidth="48"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>value</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>'auto'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>automatic; fill position rectangle with data</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'normal'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>same as 'auto'; deprecated</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'equal'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>same scaling from data to plot units for x and y</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>num</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a circle will be stretched such that the height
is num times the width. aspect=1 is the same as
aspect='equal'.</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>
                                <emphasis>adjustable</emphasis>
                            </paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="12"/>
                                        <colspec colwidth="37"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>value</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>'box'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>change physical size of axes</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'datalim'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>change xlim or ylim</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'box-forced'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>same as 'box', but axes can be shared</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>'box' does not allow axes sharing, as this can cause
unintended side effect. For cases when sharing axes is
fine, use 'box-forced'.</paragraph>
                            <paragraph>
                                <emphasis>anchor</emphasis>
                            </paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="5"/>
                                        <colspec colwidth="21"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>value</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>'C'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>centered</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'SW'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>lower left corner</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'S'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>middle of bottom edge</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>'SE'</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>lower right corner</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>etc.</paragraph>
                                                </entry>
                                                <entry/>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <versionmodified type="deprecated" version="1.2">
                                <paragraph>
                                    <inline classes="versionmodified">Deprecated since version 1.2: </inline>the option 'normal' for aspect is deprecated. Use 'auto' instead.</paragraph>
                            </versionmodified>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_autoscale_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_autoscale_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_autoscale_on" ids="matplotlib.axes.Axes.set_autoscale_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_autoscale_on">
                            <desc_name>set_autoscale_on</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether autoscaling is applied on plot commands</paragraph>
                            <paragraph>accepts: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_autoscalex_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_autoscalex_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_autoscalex_on" ids="matplotlib.axes.Axes.set_autoscalex_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_autoscalex_on">
                            <desc_name>set_autoscalex_on</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether autoscaling for the x-axis is applied on plot commands</paragraph>
                            <paragraph>accepts: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_autoscaley_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_autoscaley_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_autoscaley_on" ids="matplotlib.axes.Axes.set_autoscaley_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_autoscaley_on">
                            <desc_name>set_autoscaley_on</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether autoscaling for the y-axis is applied on plot commands</paragraph>
                            <paragraph>accepts: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axes()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axes',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axes" ids="matplotlib.axes.Axes.set_axes" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axes">
                            <desc_name>set_axes</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>axes</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the 
                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-class">Axes</literal></reference>instance in which the
artist resides, if any.</paragraph>
                            <paragraph>This has been deprecated in mpl 1.5, please use the
axes property.  Will be removed in 1.7 or 2.0.</paragraph>
                            <paragraph>ACCEPTS: an 
                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axes_locator()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axes_locator',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axes_locator" ids="matplotlib.axes.Axes.set_axes_locator" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axes_locator">
                            <desc_name>set_axes_locator</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>locator</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>set axes_locator</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>ACCEPT: a callable object which takes an axes instance and renderer and</term>
                                    <definition>
                                        <paragraph>returns a bbox.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axis_bgcolor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axis_bgcolor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axis_bgcolor" ids="matplotlib.axes.Axes.set_axis_bgcolor" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axis_bgcolor">
                            <desc_name>set_axis_bgcolor</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>color</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>set the axes background color</paragraph>
                            <paragraph>ACCEPTS: any matplotlib color - see

                                <reference internal="True" reftitle="matplotlib.pyplot.colors" refuri="pyplot_api#matplotlib.pyplot.colors">
                                    <literal classes="xref py py-func">colors()</literal></reference>
                            </paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axis_off()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axis_off',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axis_off" ids="matplotlib.axes.Axes.set_axis_off" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axis_off">
                            <desc_name>set_axis_off</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>turn off the axis</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axis_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axis_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axis_on" ids="matplotlib.axes.Axes.set_axis_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axis_on">
                            <desc_name>set_axis_on</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>turn on the axis</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_axisbelow()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_axisbelow',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_axisbelow" ids="matplotlib.axes.Axes.set_axisbelow" module="matplotlib.axes" names="matplotlib.axes.Axes.set_axisbelow">
                            <desc_name>set_axisbelow</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether the axis ticks and gridlines are above or below most
artists</paragraph>
                            <paragraph>ACCEPTS: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_clip_box()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_clip_box',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_clip_box" ids="matplotlib.axes.Axes.set_clip_box" module="matplotlib.axes" names="matplotlib.axes.Axes.set_clip_box">
                            <desc_name>set_clip_box</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>clipbox</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the artist's clip 
                                <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                    <literal classes="xref py py-class">Bbox</literal></reference>.</paragraph>
                            <paragraph>ACCEPTS: a 
                                <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                    <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_clip_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_clip_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_clip_on" ids="matplotlib.axes.Axes.set_clip_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_clip_on">
                            <desc_name>set_clip_on</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether artist uses clipping.</paragraph>
                            <paragraph>When False artists will be visible out side of the axes which
can lead to unexpected results.</paragraph>
                            <paragraph>ACCEPTS: [True | False]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_clip_path()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_clip_path',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_clip_path" ids="matplotlib.axes.Axes.set_clip_path" module="matplotlib.axes" names="matplotlib.axes.Axes.set_clip_path">
                            <desc_name>set_clip_path</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>path</desc_parameter>
                                <desc_parameter>transform=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the artist's clip path, which may be:</paragraph>
                            <block_quote>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>a 
                                            <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                <literal classes="xref py py-class">Patch</literal></reference>(or subclass) instance</paragraph>
                                    </list_item>
                                    <list_item>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>a 
                                                    <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                        <literal classes="xref py py-class">Path</literal></reference>instance, in which case</term>
                                                <definition>
                                                    <paragraph>an optional 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>instance may be provided, which will be applied to the
path before using it for clipping.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </list_item>
                                    <list_item>
                                        <paragraph>
                                            <emphasis>None</emphasis>, to remove the clipping path</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>For efficiency, if the path happens to be an axis-aligned
rectangle, this method will set the clipping box to the
corresponding rectangle and set the clipping path to 
                                <emphasis>None</emphasis>
                                .</paragraph>
                            <paragraph>ACCEPTS: [ (
                                <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                    <literal classes="xref py py-class">Path</literal></reference>,

                                <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                    <literal classes="xref py py-class">Transform</literal></reference>) |

                                <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                    <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_color_cycle()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_color_cycle',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_color_cycle" ids="matplotlib.axes.Axes.set_color_cycle" module="matplotlib.axes" names="matplotlib.axes.Axes.set_color_cycle">
                            <desc_name>set_color_cycle</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>clist</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the color cycle for any future plot commands on this Axes.</paragraph>
                            <paragraph>
                                <emphasis>clist</emphasis>is a list of mpl color specifiers.</paragraph>
                            <versionmodified type="deprecated" version="1.5">
                                <paragraph>
                                    <inline classes="versionmodified">Deprecated since version 1.5.</inline>
                                </paragraph>
                            </versionmodified>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_contains()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_contains',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_contains" ids="matplotlib.axes.Axes.set_contains" module="matplotlib.axes" names="matplotlib.axes.Axes.set_contains">
                            <desc_name>set_contains</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>picker</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Replace the contains test used by this artist. The new picker
should be a callable function which determines whether the
artist is hit by the mouse event:</paragraph>
                            <literal_block xml:space="preserve">hit, props = picker(artist, mouseevent)</literal_block>
                            <paragraph>If the mouse event is over the artist, return 
                                <emphasis>hit</emphasis>
                                = 
                                <emphasis>True</emphasis>
                                and 
                                <emphasis>props</emphasis>
                                is a dictionary of properties you want returned
with the contains test.</paragraph>
                            <paragraph>ACCEPTS: a callable function</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_cursor_props()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_cursor_props',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_cursor_props" ids="matplotlib.axes.Axes.set_cursor_props" module="matplotlib.axes" names="matplotlib.axes.Axes.set_cursor_props">
                            <desc_name>set_cursor_props</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the cursor property as:</paragraph>
                            <literal_block xml:space="preserve">ax.set_cursor_props(linewidth, color)</literal_block>
                            <paragraph>or:</paragraph>
                            <literal_block xml:space="preserve">ax.set_cursor_props((linewidth, color))</literal_block>
                            <paragraph>ACCEPTS: a (
                                <emphasis>float</emphasis>
                                , 
                                <emphasis>color</emphasis>
                                ) tuple</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_figure()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_figure',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_figure" ids="matplotlib.axes.Axes.set_figure" module="matplotlib.axes" names="matplotlib.axes.Axes.set_figure">
                            <desc_name>set_figure</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>fig</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the class:
                                <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                    <literal classes="xref py py-obj">Axes</literal></reference>figure</paragraph>
                            <paragraph>accepts a class:
                                <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                    <literal classes="xref py py-obj">Figure</literal></reference>instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_frame_on()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_frame_on',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_frame_on" ids="matplotlib.axes.Axes.set_frame_on" module="matplotlib.axes" names="matplotlib.axes.Axes.set_frame_on">
                            <desc_name>set_frame_on</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether the axes rectangle patch is drawn</paragraph>
                            <paragraph>ACCEPTS: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_gid()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_gid',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_gid" ids="matplotlib.axes.Axes.set_gid" module="matplotlib.axes" names="matplotlib.axes.Axes.set_gid">
                            <desc_name>set_gid</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>gid</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets the (group) id for the artist</paragraph>
                            <paragraph>ACCEPTS: an id string</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_label()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_label',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_label" ids="matplotlib.axes.Axes.set_label" module="matplotlib.axes" names="matplotlib.axes.Axes.set_label">
                            <desc_name>set_label</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>s</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the label to 
                                <emphasis>s</emphasis>
                                for auto legend.</paragraph>
                            <paragraph>ACCEPTS: string or anything printable with '%s' conversion.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_navigate()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_navigate',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_navigate" ids="matplotlib.axes.Axes.set_navigate" module="matplotlib.axes" names="matplotlib.axes.Axes.set_navigate">
                            <desc_name>set_navigate</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set whether the axes responds to navigation toolbar commands</paragraph>
                            <paragraph>ACCEPTS: [ 
                                <emphasis>True</emphasis>
                                | 
                                <emphasis>False</emphasis>
                                ]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_navigate_mode()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_navigate_mode',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_navigate_mode" ids="matplotlib.axes.Axes.set_navigate_mode" module="matplotlib.axes" names="matplotlib.axes.Axes.set_navigate_mode">
                            <desc_name>set_navigate_mode</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the navigation toolbar button status;</paragraph>
                            <warning>
                                <paragraph>this is not a user-API function.</paragraph>
                            </warning>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_path_effects()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_path_effects',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_path_effects" ids="matplotlib.axes.Axes.set_path_effects" module="matplotlib.axes" names="matplotlib.axes.Axes.set_path_effects">
                            <desc_name>set_path_effects</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>path_effects</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>set path_effects, which should be a list of instances of
matplotlib.patheffect._Base class or its derivatives.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_picker()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_picker',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_picker" ids="matplotlib.axes.Axes.set_picker" module="matplotlib.axes" names="matplotlib.axes.Axes.set_picker">
                            <desc_name>set_picker</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>picker</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the epsilon for picking used by this artist</paragraph>
                            <paragraph>
                                <emphasis>picker</emphasis>can be one of the following:</paragraph>
                            <block_quote>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>
                                            <emphasis>None</emphasis>: picking is disabled for this artist (default)</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>A boolean: if 
                                            <emphasis>True</emphasis>
                                            then picking will be enabled and the
artist will fire a pick event if the mouse event is over
the artist</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>A float: if picker is a number it is interpreted as an
epsilon tolerance in points and the artist will fire
off an event if it's data is within epsilon of the mouse
event.  For some artists like lines and patch collections,
the artist may provide additional data to the pick event
that is generated, e.g., the indices of the data within
epsilon of the pick event</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>A function: if picker is callable, it is a user supplied
function which determines whether the artist is hit by the
mouse event:</paragraph>
                                        <literal_block xml:space="preserve">hit, props = picker(artist, mouseevent)</literal_block>
                                        <paragraph>to determine the hit test.  if the mouse event is over the
artist, return 
                                            <emphasis>hit=True</emphasis>
                                            and props is a dictionary of
properties you want added to the PickEvent attributes.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>ACCEPTS: [None|float|boolean|callable]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_position()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_position',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_position" ids="matplotlib.axes.Axes.set_position" module="matplotlib.axes" names="matplotlib.axes.Axes.set_position">
                            <desc_name>set_position</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>pos</desc_parameter>
                                <desc_parameter>which=u'both'</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the axes position with:</paragraph>
                            <literal_block xml:space="preserve">pos = [left, bottom, width, height]</literal_block>
                            <paragraph>in relative 0,1 coords, or 
                                <emphasis>pos</emphasis>
                                can be a

                                <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                    <literal classes="xref py py-class">Bbox</literal></reference>
                            </paragraph>
                            <paragraph>There are two position variables: one which is ultimately
used, but which may be modified by 
                                <literal classes="xref py py-meth">apply_aspect()</literal>
                                , and a
second which is the starting point for 
                                <literal classes="xref py py-meth">apply_aspect()</literal>
                                .</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>Optional keyword arguments:</term>
                                    <definition>
                                        <paragraph>
                                            <emphasis>which</emphasis>
                                        </paragraph>
                                        <block_quote>
                                            <table>
                                                <tgroup cols="2">
                                                    <colspec colwidth="10"/>
                                                    <colspec colwidth="20"/>
                                                    <thead>
                                                        <row>
                                                            <entry>
                                                                <paragraph>value</paragraph>
                                                            </entry>
                                                            <entry>
                                                                <paragraph>description</paragraph>
                                                            </entry>
                                                        </row>
                                                    </thead>
                                                    <tbody>
                                                        <row>
                                                            <entry>
                                                                <paragraph>'active'</paragraph>
                                                            </entry>
                                                            <entry>
                                                                <paragraph>to change the first</paragraph>
                                                            </entry>
                                                        </row>
                                                        <row>
                                                            <entry>
                                                                <paragraph>'original'</paragraph>
                                                            </entry>
                                                            <entry>
                                                                <paragraph>to change the second</paragraph>
                                                            </entry>
                                                        </row>
                                                        <row>
                                                            <entry>
                                                                <paragraph>'both'</paragraph>
                                                            </entry>
                                                            <entry>
                                                                <paragraph>to change both</paragraph>
                                                            </entry>
                                                        </row>
                                                    </tbody>
                                                </tgroup>
                                            </table>
                                        </block_quote>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_prop_cycle()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_prop_cycle',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_prop_cycle" ids="matplotlib.axes.Axes.set_prop_cycle" module="matplotlib.axes" names="matplotlib.axes.Axes.set_prop_cycle">
                            <desc_name>set_prop_cycle</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the property cycle for any future plot commands on this Axes.</paragraph>
                            <paragraph>set_prop_cycle(arg)
set_prop_cycle(label, itr)
set_prop_cycle(label1=itr1[, label2=itr2[, ...]])</paragraph>
                            <paragraph>Form 1 simply sets given 
                                <literal classes="xref py py-obj">Cycler</literal>
                                object.</paragraph>
                            <paragraph>Form 2 creates and sets  a 
                                <literal classes="xref py py-obj">Cycler</literal>
                                from a label and an iterable.</paragraph>
                            <paragraph>Form 3 composes and sets  a 
                                <literal classes="xref py py-obj">Cycler</literal>
                                as an inner product of the
pairs of keyword arguments. In other words, all of the
iterables are cycled simultaneously, as if through zip().</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>arg</strong>: Cycler</paragraph>
                                        <block_quote>
                                            <paragraph>Set the given Cycler.
Can also be 
                                                <literal classes="xref py py-obj">None</literal>
                                                to reset to the cycle defined by the
current style.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>label</strong>: str</paragraph>
                                        <block_quote>
                                            <paragraph>The property key. Must be a valid 
                                                <literal classes="xref py py-obj">Artist</literal>
                                                property.
For example, 'color' or 'linestyle'. Aliases are allowed,
such as 'c' for 'color' and 'lw' for 'linewidth'.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>itr</strong>: iterable</paragraph>
                                        <block_quote>
                                            <paragraph>Finite-length iterable of the property values. These values
are validated and will raise a ValueError if invalid.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_rasterization_zorder()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_rasterization_zorder',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_rasterization_zorder" ids="matplotlib.axes.Axes.set_rasterization_zorder" module="matplotlib.axes" names="matplotlib.axes.Axes.set_rasterization_zorder">
                            <desc_name>set_rasterization_zorder</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>z</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set zorder value below which artists will be rasterized.  Set
to 
                                <literal classes="xref py py-obj">None</literal>
                                to disable rasterizing of artists below a particular
zorder.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_rasterized()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_rasterized',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_rasterized" ids="matplotlib.axes.Axes.set_rasterized" module="matplotlib.axes" names="matplotlib.axes.Axes.set_rasterized">
                            <desc_name>set_rasterized</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>rasterized</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Force rasterized (bitmap) drawing in vector backend output.</paragraph>
                            <paragraph>Defaults to None, which implies the backend's default behavior</paragraph>
                            <paragraph>ACCEPTS: [True | False | None]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_sketch_params()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_sketch_params',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_sketch_params" ids="matplotlib.axes.Axes.set_sketch_params" module="matplotlib.axes" names="matplotlib.axes.Axes.set_sketch_params">
                            <desc_name>set_sketch_params</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>scale=None</desc_parameter>
                                <desc_parameter>length=None</desc_parameter>
                                <desc_parameter>randomness=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets the sketch parameters.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>scale</strong>: float, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The amplitude of the wiggle perpendicular to the source
line, in pixels.  If scale is 
                                                <literal classes="xref py py-obj">None</literal>
                                                , or not provided, no
sketch filter will be provided.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>length</strong>: float, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The length of the wiggle along the line, in pixels
(default 128.0)</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>randomness</strong>: float, optional</paragraph>
                                        <block_quote>
                                            <paragraph>The scale factor by which the length is shrunken or
expanded (default 16.0)</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_snap()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_snap',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_snap" ids="matplotlib.axes.Axes.set_snap" module="matplotlib.axes" names="matplotlib.axes.Axes.set_snap">
                            <desc_name>set_snap</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>snap</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets the snap setting which may be:</paragraph>
                            <block_quote>
                                <bullet_list bullet="*">
                                    <list_item>
                                        <paragraph>True: snap vertices to the nearest pixel center</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>False: leave vertices as-is</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>None: (auto) If the path contains only rectilinear line
segments, round to the nearest pixel center</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>Only supported by the Agg and MacOSX backends.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_title()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_title',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_title" ids="matplotlib.axes.Axes.set_title" module="matplotlib.axes" names="matplotlib.axes.Axes.set_title">
                            <desc_name>set_title</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>label</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>loc=u'center'</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set a title for the axes.</paragraph>
                            <paragraph>Set one of the three available axes titles. The available titles
are positioned above the axes in the center, flush with the left
edge, and flush with the right edge.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>label</strong>: str</paragraph>
                                        <block_quote>
                                            <paragraph>Text to use for the title</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>fontdict</strong>: dict</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary controlling the appearance of the title text,
the default 
                                                <literal classes="xref py py-obj">fontdict</literal>
                                                is:</paragraph>
                                            <literal_block xml:space="preserve">{'fontsize': rcParams['axes.titlesize'],
 'fontweight' : rcParams['axes.titleweight'],
 'verticalalignment': 'baseline',
 'horizontalalignment': loc}</literal_block>
                                        </block_quote>
                                        <paragraph>
                                            <strong>loc</strong>: {'center', 'left', 'right'}, str, optional</paragraph>
                                        <block_quote>
                                            <paragraph>Which title to set, defaults to 'center'</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>text</strong>: 
                                            <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                <literal classes="xref py py-class">Text</literal></reference>
                                        </paragraph>
                                        <block_quote>
                                            <paragraph>The matplotlib text instance representing the title</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: text properties</paragraph>
                                        <block_quote>
                                            <paragraph>Other keyword arguments are text properties, see

                                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                    <literal classes="xref py py-class">Text</literal></reference>for a list of valid text
properties.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_transform()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_transform',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_transform" ids="matplotlib.axes.Axes.set_transform" module="matplotlib.axes" names="matplotlib.axes.Axes.set_transform">
                            <desc_name>set_transform</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>t</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the 
                                <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                    <literal classes="xref py py-class">Transform</literal></reference>instance
used by this artist.</paragraph>
                            <paragraph>ACCEPTS: 
                                <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                    <literal classes="xref py py-class">Transform</literal></reference>instance</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_url()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_url',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_url" ids="matplotlib.axes.Axes.set_url" module="matplotlib.axes" names="matplotlib.axes.Axes.set_url">
                            <desc_name>set_url</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>url</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets the url for the artist</paragraph>
                            <paragraph>ACCEPTS: a url string</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_visible()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_visible',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_visible" ids="matplotlib.axes.Axes.set_visible" module="matplotlib.axes" names="matplotlib.axes.Axes.set_visible">
                            <desc_name>set_visible</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>b</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the artist's visiblity.</paragraph>
                            <paragraph>ACCEPTS: [True | False]</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xbound()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xbound',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xbound" ids="matplotlib.axes.Axes.set_xbound" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xbound">
                            <desc_name>set_xbound</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>lower=None</desc_parameter>
                                <desc_parameter>upper=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the lower and upper numerical bounds of the x-axis.
This method will honor axes inversion regardless of parameter order.
It will not change the _autoscaleXon attribute.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xlabel()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xlabel',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xlabel" ids="matplotlib.axes.Axes.set_xlabel" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xlabel">
                            <desc_name>set_xlabel</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>xlabel</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>labelpad=None</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the label for the xaxis.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>xlabel</strong>: string</paragraph>
                                        <block_quote>
                                            <paragraph>x label</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>labelpad</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>spacing in points between the label and the x-axis</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                <literal classes="xref py py-obj">Text</literal></reference>properties</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">text</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for information on how override and the optional args work</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xlim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xlim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xlim" ids="matplotlib.axes.Axes.set_xlim" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xlim">
                            <desc_name>set_xlim</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>left=None</desc_parameter>
                                <desc_parameter>right=None</desc_parameter>
                                <desc_parameter>emit=True</desc_parameter>
                                <desc_parameter>auto=False</desc_parameter>
                                <desc_parameter>**kw</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_xlim(self, *args, **kwargs):</literal_block>
                            <paragraph>Set the data limits for the xaxis</paragraph>
                            <paragraph>Examples:</paragraph>
                            <literal_block xml:space="preserve">set_xlim((left, right))
set_xlim(left, right)
set_xlim(left=1) # right unchanged
set_xlim(right=1) # left unchanged</literal_block>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>left</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The left xlim; 
                                                <emphasis>xmin</emphasis>
                                                , the previous name, may still be used</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>right</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The right xlim; 
                                                <emphasis>xmax</emphasis>
                                                , the previous name, may still be used</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>emit</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Notify observers of limit change</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>auto</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>None</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Turn 
                                                <emphasis>x</emphasis>
                                                autoscaling on (
                                                <emphasis>True</emphasis>
                                                ), off (
                                                <emphasis>False</emphasis>
                                                ; default),
or leave unchanged (
                                                <emphasis>None</emphasis>
                                                )</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note, the 
                                <emphasis>left</emphasis>
                                (formerly 
                                <emphasis>xmin</emphasis>
                                ) value may be greater than
the 
                                <emphasis>right</emphasis>
                                (formerly 
                                <emphasis>xmax</emphasis>
                                ).
For example, suppose 
                                <emphasis>x</emphasis>
                                is years before present.
Then one might use:</paragraph>
                            <literal_block xml:space="preserve">set_ylim(5000, 0)</literal_block>
                            <paragraph>so 5000 years ago is on the left of the plot and the
present is on the right.</paragraph>
                            <paragraph>Returns the current xlimits as a length 2 tuple</paragraph>
                            <paragraph>ACCEPTS: length 2 sequence of floats</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xmargin()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xmargin',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xmargin" ids="matplotlib.axes.Axes.set_xmargin" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xmargin">
                            <desc_name>set_xmargin</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>m</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set padding of X data limits prior to autoscaling.</paragraph>
                            <paragraph>
                                <emphasis>m</emphasis>times the data interval will be added to each
end of that interval before it is used in autoscaling.</paragraph>
                            <paragraph>accepts: float in range 0 to 1</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xscale()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xscale',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xscale" ids="matplotlib.axes.Axes.set_xscale" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xscale">
                            <desc_name>set_xscale</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>value</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_xscale(value)</literal_block>
                            <paragraph>Set the scaling of the x-axis: u'linear' | u'log' | u'logit' | u'symlog'</paragraph>
                            <paragraph>ACCEPTS: [u'linear' | u'log' | u'logit' | u'symlog']</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>Different kwargs are accepted, depending on the scale:</term>
                                    <definition>
                                        <paragraph>'linear'</paragraph>
                                        <paragraph>'log'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>basex</emphasis>/
                                                        <emphasis>basey</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The base of the logarithm</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>nonposx</emphasis>/
                                                        <emphasis>nonposy</emphasis>
                                                        : ['mask' | 'clip' ]</term>
                                                    <definition>
                                                        <paragraph>non-positive values in 
                                                            <emphasis>x</emphasis>
                                                            or 
                                                            <emphasis>y</emphasis>
                                                            can be masked as
invalid, or clipped to a very small positive number</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>subsx</emphasis>/
                                                        <emphasis>subsy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>Where to place the subticks between each major tick.
Should be a sequence of integers.  For example, in a log10
scale: 
                                                            <literal>[2, 3, 4, 5, 6, 7, 8, 9]</literal></paragraph>
                                                        <paragraph>will place 8 logarithmically spaced minor ticks between
each major tick.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                        <paragraph>'logit'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>nonpos</emphasis>: ['mask' | 'clip' ]</term>
                                                    <definition>
                                                        <paragraph>values beyond ]0, 1[ can be masked as invalid, or clipped to a number
very close to 0 or 1</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                        <paragraph>'symlog'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>basex</emphasis>/
                                                        <emphasis>basey</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The base of the logarithm</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>linthreshx</emphasis>/
                                                        <emphasis>linthreshy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The range (-
                                                            <emphasis>x</emphasis>
                                                            , 
                                                            <emphasis>x</emphasis>
                                                            ) within which the plot is linear (to
avoid having the plot go to infinity around zero).</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>subsx</emphasis>/
                                                        <emphasis>subsy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>Where to place the subticks between each major tick.
Should be a sequence of integers.  For example, in a log10
scale: 
                                                            <literal>[2, 3, 4, 5, 6, 7, 8, 9]</literal></paragraph>
                                                        <paragraph>will place 8 logarithmically spaced minor ticks between
each major tick.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>linscalex</emphasis>/
                                                        <emphasis>linscaley</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>This allows the linear range (-
                                                            <emphasis>linthresh</emphasis>
                                                            to 
                                                            <emphasis>linthresh</emphasis>
                                                            )
to be stretched relative to the logarithmic range.  Its
value is the number of decades to use for each half of the
linear range.  For example, when 
                                                            <emphasis>linscale</emphasis>
                                                            == 1.0 (the
default), the space used for the positive and negative
halves of the linear range will be equal to one decade in
the logarithmic range.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xticklabels" ids="matplotlib.axes.Axes.set_xticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xticklabels">
                            <desc_name>set_xticklabels</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>labels</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>minor=False</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_xticklabels(labels, fontdict=None, minor=False, **kwargs)</literal_block>
                            <paragraph>Set the xtick labels with list of strings 
                                <emphasis>labels</emphasis>
                                . Return a
list of axis text instances.</paragraph>
                            <paragraph>
                                <emphasis>kwargs</emphasis>set the 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>properties.
Valid properties are</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="83"/>
                                        <colspec colwidth="192"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_backgroundcolor" refuri="text_api#matplotlib.text.Text.set_backgroundcolor">
                                                            <literal classes="xref py py-meth">backgroundcolor</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_bbox" refuri="text_api#matplotlib.text.Text.set_bbox">
                                                            <literal classes="xref py py-meth">bbox</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>FancyBboxPatch prop dict</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_box" refuri="text_api#matplotlib.text.Text.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_on" refuri="text_api#matplotlib.text.Text.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_path" refuri="text_api#matplotlib.text.Text.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_color" refuri="text_api#matplotlib.text.Text.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_family" refuri="text_api#matplotlib.text.Text.set_family">
                                                            <literal classes="xref py py-meth">family</literal>
                                                        </reference>or fontfamily or fontname or name</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' | 'monospace' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_fontproperties" refuri="text_api#matplotlib.text.Text.set_fontproperties">
                                                            <literal classes="xref py py-meth">fontproperties</literal>
                                                        </reference>or font_properties</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.font_manager.FontProperties" refuri="font_manager_api#matplotlib.font_manager.FontProperties">
                                                            <literal classes="xref py py-class">matplotlib.font_manager.FontProperties</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_horizontalalignment" refuri="text_api#matplotlib.text.Text.set_horizontalalignment">
                                                            <literal classes="xref py py-meth">horizontalalignment</literal>
                                                        </reference>or ha</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'right' | 'left' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_linespacing" refuri="text_api#matplotlib.text.Text.set_linespacing">
                                                            <literal classes="xref py py-meth">linespacing</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (multiple of font size)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_multialignment" refuri="text_api#matplotlib.text.Text.set_multialignment">
                                                            <literal classes="xref py py-meth">multialignment</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['left' | 'right' | 'center' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_position" refuri="text_api#matplotlib.text.Text.set_position">
                                                            <literal classes="xref py py-meth">position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>(x,y)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation" refuri="text_api#matplotlib.text.Text.set_rotation">
                                                            <literal classes="xref py py-meth">rotation</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ angle in degrees | 'vertical' | 'horizontal' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation_mode" refuri="text_api#matplotlib.text.Text.set_rotation_mode">
                                                            <literal classes="xref py py-meth">rotation_mode</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_size" refuri="text_api#matplotlib.text.Text.set_size">
                                                            <literal classes="xref py py-meth">size</literal>
                                                        </reference>or fontsize</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[size in points | 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_stretch" refuri="text_api#matplotlib.text.Text.set_stretch">
                                                            <literal classes="xref py py-meth">stretch</literal>
                                                        </reference>or fontstretch</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_style" refuri="text_api#matplotlib.text.Text.set_style">
                                                            <literal classes="xref py py-meth">style</literal>
                                                        </reference>or fontstyle</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'italic' | 'oblique']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_text" refuri="text_api#matplotlib.text.Text.set_text">
                                                            <literal classes="xref py py-meth">text</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_usetex" refuri="text_api#matplotlib.text.Text.set_usetex">
                                                            <literal classes="xref py py-meth">usetex</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_variant" refuri="text_api#matplotlib.text.Text.set_variant">
                                                            <literal classes="xref py py-meth">variant</literal>
                                                        </reference>or fontvariant</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'small-caps' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_verticalalignment" refuri="text_api#matplotlib.text.Text.set_verticalalignment">
                                                            <literal classes="xref py py-meth">verticalalignment</literal>
                                                        </reference>or va or ma</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'top' | 'bottom' | 'baseline' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_weight" refuri="text_api#matplotlib.text.Text.set_weight">
                                                            <literal classes="xref py py-meth">weight</literal>
                                                        </reference>or fontweight</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultralight' | 'light' | 'normal' | 'regular' | 'book' | 'medium' | 'roman' | 'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' | 'extra bold' | 'black' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_wrap" refuri="text_api#matplotlib.text.Text.set_wrap">
                                                            <literal classes="xref py py-meth">wrap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_x" refuri="text_api#matplotlib.text.Text.set_x">
                                                            <literal classes="xref py py-meth">x</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_y" refuri="text_api#matplotlib.text.Text.set_y">
                                                            <literal classes="xref py py-meth">y</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>ACCEPTS: sequence of strings</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_xticks()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_xticks',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_xticks" ids="matplotlib.axes.Axes.set_xticks" module="matplotlib.axes" names="matplotlib.axes.Axes.set_xticks">
                            <desc_name>set_xticks</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ticks</desc_parameter>
                                <desc_parameter>minor=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the x ticks with list of 
                                <emphasis>ticks</emphasis></paragraph>
                            <paragraph>ACCEPTS: sequence of floats</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_ybound()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_ybound',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_ybound" ids="matplotlib.axes.Axes.set_ybound" module="matplotlib.axes" names="matplotlib.axes.Axes.set_ybound">
                            <desc_name>set_ybound</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>lower=None</desc_parameter>
                                <desc_parameter>upper=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the lower and upper numerical bounds of the y-axis.
This method will honor axes inversion regardless of parameter order.
It will not change the _autoscaleYon attribute.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_ylabel()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_ylabel',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_ylabel" ids="matplotlib.axes.Axes.set_ylabel" module="matplotlib.axes" names="matplotlib.axes.Axes.set_ylabel">
                            <desc_name>set_ylabel</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ylabel</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>labelpad=None</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the label for the yaxis</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>ylabel</strong>: string</paragraph>
                                        <block_quote>
                                            <paragraph>y label</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>labelpad</strong>: scalar, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>spacing in points between the label and the x-axis</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                <literal classes="xref py py-obj">Text</literal></reference>properties</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">text</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for information on how override and the optional args work</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_ylim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_ylim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_ylim" ids="matplotlib.axes.Axes.set_ylim" module="matplotlib.axes" names="matplotlib.axes.Axes.set_ylim">
                            <desc_name>set_ylim</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>bottom=None</desc_parameter>
                                <desc_parameter>top=None</desc_parameter>
                                <desc_parameter>emit=True</desc_parameter>
                                <desc_parameter>auto=False</desc_parameter>
                                <desc_parameter>**kw</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_ylim(self, *args, **kwargs):</literal_block>
                            <paragraph>Set the data limits for the yaxis</paragraph>
                            <paragraph>Examples:</paragraph>
                            <literal_block xml:space="preserve">set_ylim((bottom, top))
set_ylim(bottom, top)
set_ylim(bottom=1) # top unchanged
set_ylim(top=1) # bottom unchanged</literal_block>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>bottom</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The bottom ylim; the previous name, 
                                                <emphasis>ymin</emphasis>
                                                , may still be used</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>top</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The top ylim; the previous name, 
                                                <emphasis>ymax</emphasis>
                                                , may still be used</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>emit</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Notify observers of limit change</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>auto</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>None</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Turn 
                                                <emphasis>y</emphasis>
                                                autoscaling on (
                                                <emphasis>True</emphasis>
                                                ), off (
                                                <emphasis>False</emphasis>
                                                ; default),
or leave unchanged (
                                                <emphasis>None</emphasis>
                                                )</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note, the 
                                <emphasis>bottom</emphasis>
                                (formerly 
                                <emphasis>ymin</emphasis>
                                ) value may be greater than
the 
                                <emphasis>top</emphasis>
                                (formerly 
                                <emphasis>ymax</emphasis>
                                ).
For example, suppose 
                                <emphasis>y</emphasis>
                                is depth in the ocean.
Then one might use:</paragraph>
                            <literal_block xml:space="preserve">set_ylim(5000, 0)</literal_block>
                            <paragraph>so 5000 m depth is at the bottom of the plot and the
surface, 0 m, is at the top.</paragraph>
                            <paragraph>Returns the current ylimits as a length 2 tuple</paragraph>
                            <paragraph>ACCEPTS: length 2 sequence of floats</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_ymargin()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_ymargin',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_ymargin" ids="matplotlib.axes.Axes.set_ymargin" module="matplotlib.axes" names="matplotlib.axes.Axes.set_ymargin">
                            <desc_name>set_ymargin</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>m</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set padding of Y data limits prior to autoscaling.</paragraph>
                            <paragraph>
                                <emphasis>m</emphasis>times the data interval will be added to each
end of that interval before it is used in autoscaling.</paragraph>
                            <paragraph>accepts: float in range 0 to 1</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_yscale()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_yscale',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_yscale" ids="matplotlib.axes.Axes.set_yscale" module="matplotlib.axes" names="matplotlib.axes.Axes.set_yscale">
                            <desc_name>set_yscale</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>value</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_yscale(value)</literal_block>
                            <paragraph>Set the scaling of the y-axis: u'linear' | u'log' | u'logit' | u'symlog'</paragraph>
                            <paragraph>ACCEPTS: [u'linear' | u'log' | u'logit' | u'symlog']</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>Different kwargs are accepted, depending on the scale:</term>
                                    <definition>
                                        <paragraph>'linear'</paragraph>
                                        <paragraph>'log'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>basex</emphasis>/
                                                        <emphasis>basey</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The base of the logarithm</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>nonposx</emphasis>/
                                                        <emphasis>nonposy</emphasis>
                                                        : ['mask' | 'clip' ]</term>
                                                    <definition>
                                                        <paragraph>non-positive values in 
                                                            <emphasis>x</emphasis>
                                                            or 
                                                            <emphasis>y</emphasis>
                                                            can be masked as
invalid, or clipped to a very small positive number</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>subsx</emphasis>/
                                                        <emphasis>subsy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>Where to place the subticks between each major tick.
Should be a sequence of integers.  For example, in a log10
scale: 
                                                            <literal>[2, 3, 4, 5, 6, 7, 8, 9]</literal></paragraph>
                                                        <paragraph>will place 8 logarithmically spaced minor ticks between
each major tick.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                        <paragraph>'logit'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>nonpos</emphasis>: ['mask' | 'clip' ]</term>
                                                    <definition>
                                                        <paragraph>values beyond ]0, 1[ can be masked as invalid, or clipped to a number
very close to 0 or 1</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                        <paragraph>'symlog'</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>basex</emphasis>/
                                                        <emphasis>basey</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The base of the logarithm</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>linthreshx</emphasis>/
                                                        <emphasis>linthreshy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>The range (-
                                                            <emphasis>x</emphasis>
                                                            , 
                                                            <emphasis>x</emphasis>
                                                            ) within which the plot is linear (to
avoid having the plot go to infinity around zero).</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>subsx</emphasis>/
                                                        <emphasis>subsy</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>Where to place the subticks between each major tick.
Should be a sequence of integers.  For example, in a log10
scale: 
                                                            <literal>[2, 3, 4, 5, 6, 7, 8, 9]</literal></paragraph>
                                                        <paragraph>will place 8 logarithmically spaced minor ticks between
each major tick.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>
                                                        <emphasis>linscalex</emphasis>/
                                                        <emphasis>linscaley</emphasis>
                                                        :</term>
                                                    <definition>
                                                        <paragraph>This allows the linear range (-
                                                            <emphasis>linthresh</emphasis>
                                                            to 
                                                            <emphasis>linthresh</emphasis>
                                                            )
to be stretched relative to the logarithmic range.  Its
value is the number of decades to use for each half of the
linear range.  For example, when 
                                                            <emphasis>linscale</emphasis>
                                                            == 1.0 (the
default), the space used for the positive and negative
halves of the linear range will be equal to one decade in
the logarithmic range.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_yticklabels()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_yticklabels',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_yticklabels" ids="matplotlib.axes.Axes.set_yticklabels" module="matplotlib.axes" names="matplotlib.axes.Axes.set_yticklabels">
                            <desc_name>set_yticklabels</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>labels</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>minor=False</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">set_yticklabels(labels, fontdict=None, minor=False, **kwargs)</literal_block>
                            <paragraph>Set the y tick labels with list of strings 
                                <emphasis>labels</emphasis>
                                .  Return a list of

                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>instances.</paragraph>
                            <paragraph>
                                <emphasis>kwargs</emphasis>set 
                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                    <literal classes="xref py py-class">Text</literal></reference>properties for the labels.
Valid properties are</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="83"/>
                                        <colspec colwidth="192"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_backgroundcolor" refuri="text_api#matplotlib.text.Text.set_backgroundcolor">
                                                            <literal classes="xref py py-meth">backgroundcolor</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_bbox" refuri="text_api#matplotlib.text.Text.set_bbox">
                                                            <literal classes="xref py py-meth">bbox</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>FancyBboxPatch prop dict</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_box" refuri="text_api#matplotlib.text.Text.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_on" refuri="text_api#matplotlib.text.Text.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_clip_path" refuri="text_api#matplotlib.text.Text.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_color" refuri="text_api#matplotlib.text.Text.set_color">
                                                            <literal classes="xref py py-meth">color</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any matplotlib color</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_family" refuri="text_api#matplotlib.text.Text.set_family">
                                                            <literal classes="xref py py-meth">family</literal>
                                                        </reference>or fontfamily or fontname or name</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' | 'monospace' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_fontproperties" refuri="text_api#matplotlib.text.Text.set_fontproperties">
                                                            <literal classes="xref py py-meth">fontproperties</literal>
                                                        </reference>or font_properties</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.font_manager.FontProperties" refuri="font_manager_api#matplotlib.font_manager.FontProperties">
                                                            <literal classes="xref py py-class">matplotlib.font_manager.FontProperties</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_horizontalalignment" refuri="text_api#matplotlib.text.Text.set_horizontalalignment">
                                                            <literal classes="xref py py-meth">horizontalalignment</literal>
                                                        </reference>or ha</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'right' | 'left' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_linespacing" refuri="text_api#matplotlib.text.Text.set_linespacing">
                                                            <literal classes="xref py py-meth">linespacing</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (multiple of font size)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_multialignment" refuri="text_api#matplotlib.text.Text.set_multialignment">
                                                            <literal classes="xref py py-meth">multialignment</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>['left' | 'right' | 'center' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_position" refuri="text_api#matplotlib.text.Text.set_position">
                                                            <literal classes="xref py py-meth">position</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>(x,y)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation" refuri="text_api#matplotlib.text.Text.set_rotation">
                                                            <literal classes="xref py py-meth">rotation</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ angle in degrees | 'vertical' | 'horizontal' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_rotation_mode" refuri="text_api#matplotlib.text.Text.set_rotation_mode">
                                                            <literal classes="xref py py-meth">rotation_mode</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_size" refuri="text_api#matplotlib.text.Text.set_size">
                                                            <literal classes="xref py py-meth">size</literal>
                                                        </reference>or fontsize</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[size in points | 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_stretch" refuri="text_api#matplotlib.text.Text.set_stretch">
                                                            <literal classes="xref py py-meth">stretch</literal>
                                                        </reference>or fontstretch</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_style" refuri="text_api#matplotlib.text.Text.set_style">
                                                            <literal classes="xref py py-meth">style</literal>
                                                        </reference>or fontstyle</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'italic' | 'oblique']</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_text" refuri="text_api#matplotlib.text.Text.set_text">
                                                            <literal classes="xref py py-meth">text</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_usetex" refuri="text_api#matplotlib.text.Text.set_usetex">
                                                            <literal classes="xref py py-meth">usetex</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_variant" refuri="text_api#matplotlib.text.Text.set_variant">
                                                            <literal classes="xref py py-meth">variant</literal>
                                                        </reference>or fontvariant</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'normal' | 'small-caps' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_verticalalignment" refuri="text_api#matplotlib.text.Text.set_verticalalignment">
                                                            <literal classes="xref py py-meth">verticalalignment</literal>
                                                        </reference>or va or ma</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'center' | 'top' | 'bottom' | 'baseline' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_weight" refuri="text_api#matplotlib.text.Text.set_weight">
                                                            <literal classes="xref py py-meth">weight</literal>
                                                        </reference>or fontweight</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[a numeric value in range 0-1000 | 'ultralight' | 'light' | 'normal' | 'regular' | 'book' | 'medium' | 'roman' | 'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' | 'extra bold' | 'black' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_wrap" refuri="text_api#matplotlib.text.Text.set_wrap">
                                                            <literal classes="xref py py-meth">wrap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_x" refuri="text_api#matplotlib.text.Text.set_x">
                                                            <literal classes="xref py py-meth">x</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.text.Text.set_y" refuri="text_api#matplotlib.text.Text.set_y">
                                                            <literal classes="xref py py-meth">y</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>ACCEPTS: sequence of strings</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_yticks()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_yticks',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_yticks" ids="matplotlib.axes.Axes.set_yticks" module="matplotlib.axes" names="matplotlib.axes.Axes.set_yticks">
                            <desc_name>set_yticks</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ticks</desc_parameter>
                                <desc_parameter>minor=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the y ticks with list of 
                                <emphasis>ticks</emphasis></paragraph>
                            <paragraph>ACCEPTS: sequence of floats</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>minor</emphasis>: [ 
                                            <emphasis>False</emphasis>
                                            | 
                                            <emphasis>True</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>Sets the minor ticks if 
                                                <emphasis>True</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'set_zorder()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.set_zorder',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.set_zorder" ids="matplotlib.axes.Axes.set_zorder" module="matplotlib.axes" names="matplotlib.axes.Axes.set_zorder">
                            <desc_name>set_zorder</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>level</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Set the zorder for the artist.  Artists with lower zorder
values are drawn first.</paragraph>
                            <paragraph>ACCEPTS: any number</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'specgram()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.specgram',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.specgram" ids="matplotlib.axes.Axes.specgram" module="matplotlib.axes" names="matplotlib.axes.Axes.specgram">
                            <desc_name>specgram</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot a spectrogram.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
         window=mlab.window_hanning, noverlap=128,
         cmap=None, xextent=None, pad_to=None, sides='default',
         scale_by_freq=None, mode='default', scale='default',
         **kwargs)</literal_block>
                            <paragraph>Compute and plot a spectrogram of data in 
                                <emphasis>x</emphasis>
                                .  Data are split into

                                <emphasis>NFFT</emphasis>
                                length segments and the spectrum of each section is
computed.  The windowing function 
                                <emphasis>window</emphasis>
                                is applied to each
segment, and the amount of overlap of each segment is
specified with 
                                <emphasis>noverlap</emphasis>
                                . The spectrogram is plotted as a colormap
(using imshow).</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>x</emphasis>: 1-D array or sequence</term>
                                    <definition>
                                        <paragraph>Array or sequence containing the data</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>Fs</emphasis>: scalar</term>
                                        <definition>
                                            <paragraph>The sampling frequency (samples per time unit).  It is used
to calculate the Fourier frequencies, freqs, in cycles per time
unit. The default value is 2.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>window</emphasis>: callable or ndarray</term>
                                        <definition>
                                            <paragraph>A function or a vector of length 
                                                <emphasis>NFFT</emphasis>
                                                . To create window
vectors see 
                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                , 
                                                <literal classes="xref py py-func">window_none()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.blackman()</literal>
                                                , 
                                                <literal classes="xref py py-func">numpy.hamming()</literal>
                                                ,

                                                <literal classes="xref py py-func">numpy.bartlett()</literal>
                                                , 
                                                <literal classes="xref py py-func">scipy.signal()</literal>
                                                ,

                                                <literal classes="xref py py-func">scipy.signal.get_window()</literal>
                                                , etc. The default is

                                                <literal classes="xref py py-func">window_hanning()</literal>
                                                .  If a function is passed as the
argument, it must take a data segment as an argument and
return the windowed version of the segment.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>sides</emphasis>: [ 'default' | 'onesided' | 'twosided' ]</term>
                                        <definition>
                                            <paragraph>Specifies which sides of the spectrum to return.  Default gives the
default behavior, which returns one-sided for real data and both
for complex data.  'onesided' forces the return of a one-sided
spectrum, while 'twosided' forces two-sided.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad_to</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of points to which the data segment is padded when
performing the FFT.  This can be different from 
                                            <emphasis>NFFT</emphasis>
                                            , which
specifies the number of data points used.  While not increasing
the actual resolution of the spectrum (the minimum distance between
resolvable peaks), this can give more points in the plot,
allowing for more detail. This corresponds to the 
                                            <emphasis>n</emphasis>
                                            parameter
in the call to fft(). The default is None, which sets 
                                            <emphasis>pad_to</emphasis>
                                            equal to 
                                            <emphasis>NFFT</emphasis></paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>NFFT</emphasis>: integer</term>
                                    <definition>
                                        <paragraph>The number of data points used in each block for the FFT.
A power 2 is most efficient.  The default value is 256.
This should 
                                            <emphasis>NOT</emphasis>
                                            be used to get zero padding, or the scaling of the
result will be incorrect. Use 
                                            <emphasis>pad_to</emphasis>
                                            for this instead.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>detrend</emphasis>: [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>callable</paragraph>
                                        </block_quote>
                                        <paragraph>The function applied to each segment before fft-ing,
designed to remove the mean or linear trend.  Unlike in
MATLAB, where the 
                                            <emphasis>detrend</emphasis>
                                            parameter is a vector, in
matplotlib is it a function.  The 
                                            <literal classes="xref py py-mod">pylab</literal>
                                            module defines 
                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            ,

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            , and

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            , but you can use
a custom function as well.  You can also use a string to choose
one of the functions.  'default', 'constant', and 'mean' call

                                            <literal classes="xref py py-func">detrend_mean()</literal>
                                            .  'linear' calls

                                            <literal classes="xref py py-func">detrend_linear()</literal>
                                            .  'none' calls

                                            <literal classes="xref py py-func">detrend_none()</literal>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>scale_by_freq</emphasis>: boolean</term>
                                    <definition>
                                        <block_quote>
                                            <paragraph>Specifies whether the resulting density values should be scaled
by the scaling frequency, which gives density in units of Hz^-1.
This allows for integration over the returned frequency values.
The default is True for MATLAB compatibility.</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>mode</emphasis>: [ 'default' | 'psd' | 'magnitude' | 'angle' | 'phase' ]</term>
                                                <definition>
                                                    <paragraph>What sort of spectrum to use.  Default is 'psd'. which takes
the power spectral density.  'complex' returns the complex-valued
frequency spectrum.  'magnitude' returns the magnitude spectrum.
'angle' returns the phase spectrum without unwrapping.  'phase'
returns the phase spectrum with unwrapping.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>noverlap</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The number of points of overlap between blocks.  The
default value is 128.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>scale</emphasis>: [ 'default' | 'linear' | 'dB' ]</term>
                                                <definition>
                                                    <paragraph>The scaling of the values in the 
                                                        <emphasis>spec</emphasis>
                                                        .  'linear' is no scaling.
'dB' returns the values in dB scale.  When 
                                                        <emphasis>mode</emphasis>
                                                        is 'psd',
this is dB power (10 * log10).  Otherwise this is dB amplitude
(20 * log10). 'default' is 'dB' if 
                                                        <emphasis>mode</emphasis>
                                                        is 'psd' or
'magnitude' and 'linear' otherwise.  This must be 'linear'
if 
                                                        <emphasis>mode</emphasis>
                                                        is 'angle' or 'phase'.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>Fc</emphasis>: integer</term>
                                                <definition>
                                                    <paragraph>The center frequency of 
                                                        <emphasis>x</emphasis>
                                                        (defaults to 0), which offsets
the x extents of the plot to reflect the frequency range used
when a signal is acquired and then filtered and downsampled to
baseband.</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>cmap</emphasis>:</term>
                                                <definition>
                                                    <paragraph>A 
                                                        <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                            <literal classes="xref py py-class">matplotlib.colors.Colormap</literal></reference>instance; if 
                                                        <emphasis>None</emphasis>
                                                        , use
default determined by rc</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>xextent</emphasis>:</term>
                                                <definition>
                                                    <paragraph>The image extent along the x-axis. xextent = (xmin,xmax)
The default is (0,max(bins)), where bins is the return
value from 
                                                        <reference internal="True" reftitle="matplotlib.mlab.specgram" refuri="mlab_api#matplotlib.mlab.specgram">
                                                            <literal classes="xref py py-func">specgram()</literal></reference>
                                                    </paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>
                                                    <emphasis>kwargs</emphasis>:</term>
                                                <definition>
                                                    <paragraph>Additional kwargs are passed on to imshow which makes the
specgram image</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <note>
                                <paragraph>
                                    <emphasis>detrend</emphasis>and 
                                    <emphasis>scale_by_freq</emphasis>
                                    only apply when 
                                    <emphasis>mode</emphasis>
                                    is set to
'psd'</paragraph>
                            </note>
                            <paragraph>Returns the tuple (
                                <emphasis>spectrum</emphasis>
                                , 
                                <emphasis>freqs</emphasis>
                                , 
                                <emphasis>t</emphasis>
                                , 
                                <emphasis>im</emphasis>
                                ):</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>spectrum</emphasis>: 2-D array</term>
                                        <definition>
                                            <paragraph>columns are the periodograms of successive segments</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>freqs</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The frequencies corresponding to the rows in 
                                                <emphasis>spectrum</emphasis></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>t</emphasis>: 1-D array</term>
                                        <definition>
                                            <paragraph>The times corresponding to midpoints of segments (i.e the columns
in 
                                                <emphasis>spectrum</emphasis>
                                                )</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>im</emphasis>: instance of class 
                                            <reference internal="True" reftitle="matplotlib.image.AxesImage" refuri="image_api#matplotlib.image.AxesImage">
                                                <literal classes="xref py py-class">AxesImage</literal></reference>
                                        </term>
                                        <definition>
                                            <paragraph>The image created by imshow containing the spectrogram</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">psd()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>
                                                <literal classes="xref py py-func">psd()</literal>differs in the default overlap; in returning
the mean of the segment periodograms; in not returning
times; and in generating a line plot instead of colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">magnitude_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>A single spectrum, similar to having a single segment when

                                                <emphasis>mode</emphasis>
                                                is 'magnitude'.  Plots a line instead of a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">angle_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>A single spectrum, similar to having a single segment when

                                                <emphasis>mode</emphasis>
                                                is 'angle'.  Plots a line instead of a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-func">phase_spectrum()</literal>
                                        </term>
                                        <definition>
                                            <paragraph>A single spectrum, similar to having a single segment when

                                                <emphasis>mode</emphasis>
                                                is 'phase'.  Plots a line instead of a colormap.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'spy()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.spy',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.spy" ids="matplotlib.axes.Axes.spy" module="matplotlib.axes" names="matplotlib.axes.Axes.spy">
                            <desc_name>spy</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>Z</desc_parameter>
                                <desc_parameter>precision=0</desc_parameter>
                                <desc_parameter>marker=None</desc_parameter>
                                <desc_parameter>markersize=None</desc_parameter>
                                <desc_parameter>aspect=u'equal'</desc_parameter>
                                <desc_parameter>origin=u'upper'</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the sparsity pattern on a 2-D array.</paragraph>
                            <paragraph>
                                <literal>spy(Z)</literal>plots the sparsity pattern of the 2-D array 
                                <emphasis>Z</emphasis>
                                .</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>Z</strong>: sparse array (n, m)</paragraph>
                                        <block_quote>
                                            <paragraph>The array to be plotted.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>precision</strong>: float, optional, default: 0</paragraph>
                                        <block_quote>
                                            <paragraph>If 
                                                <emphasis>precision</emphasis>
                                                is 0, any non-zero value will be plotted; else,
values of 
                                                <latex_math fontset="cm" latex="|Z| &gt; precision"/>
                                                will be plotted.</paragraph>
                                            <paragraph>For 
                                                <literal classes="xref py py-class">scipy.sparse.spmatrix</literal>
                                                instances, there is a special
case: if 
                                                <emphasis>precision</emphasis>
                                                is 'present', any value present in the array
will be plotted, even if it is identically zero.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>origin</strong>: [&quot;upper&quot;, &quot;lower&quot;], optional, default: &quot;upper&quot;</paragraph>
                                        <block_quote>
                                            <paragraph>Place the [0,0] index of the array in the upper left or lower left
corner of the axes.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>aspect</strong>: ['auto' | 'equal' | scalar], optional, default: &quot;equal&quot;</paragraph>
                                        <block_quote>
                                            <paragraph>If 'equal', and 
                                                <literal classes="xref py py-obj">extent</literal>
                                                is None, changes the axes aspect ratio to
match that of the image. If 
                                                <literal classes="xref py py-obj">extent</literal>
                                                is not 
                                                <literal classes="xref py py-obj">None</literal>
                                                , the axes
aspect ratio is changed to match that of the extent.</paragraph>
                                            <paragraph>If 'auto', changes the image aspect ratio to match that of the
axes.</paragraph>
                                            <paragraph>If None, default to rc 
                                                <literal>image.aspect</literal>
                                                value.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>Two plotting styles are available: image or marker. Both</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>are available for full arrays, but only the marker style</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>works for :class:`scipy.sparse.spmatrix` instances.</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>If *marker* and *markersize* are *None*, an image will be</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>returned and any remaining kwargs are passed to</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>:func:`~matplotlib.pyplot.imshow`; else, a</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>:class:`~matplotlib.lines.Line2D` object will be returned with</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>the value of marker determining the marker type, and any</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>remaining kwargs passed to the</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>:meth:`~matplotlib.axes.Axes.plot` method.</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>If *marker* and *markersize* are *None*, useful kwargs include:</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>* *cmap*</strong>
                                        </paragraph>
                                        <paragraph>
                                            <strong>* *alpha*</strong>
                                        </paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">imshow</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for image options.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">plot</literal>
                                        </term>
                                        <definition>
                                            <paragraph>for plotting options</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stackplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.stackplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.stackplot" ids="matplotlib.axes.Axes.stackplot" module="matplotlib.axes" names="matplotlib.axes.Axes.stackplot">
                            <desc_name>stackplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draws a stacked area plot.</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>: 1d array of dimension N</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>y</emphasis>
                                    </term>
                                    <classifier>2d array of dimension MxN, OR any number 1d arrays each of dimension</classifier>
                                    <definition>
                                        <paragraph>1xN. The data is assumed to be unstacked. Each of the following
calls is legal:</paragraph>
                                        <literal_block xml:space="preserve">stackplot(x, y)               # where y is MxN
stackplot(x, y1, y2, y3, y4)  # where y1, y2, y3, y4, are all 1xNm</literal_block>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Keyword arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>baseline</emphasis>
                                    </term>
                                    <classifier>['zero', 'sym', 'wiggle', 'weighted_wiggle']</classifier>
                                    <definition>
                                        <paragraph>Method used to calculate the baseline. 'zero' is just a
simple stacked plot. 'sym' is symmetric around zero and
is sometimes called 
                                            <literal classes="xref py py-obj">ThemeRiver</literal>
                                            .  'wiggle' minimizes the
sum of the squared slopes. 'weighted_wiggle' does the
same but weights to account for size of each layer.
It is also called 
                                            <literal classes="xref py py-obj">Streamgraph</literal>
                                            -layout. More details
can be found at 
                                            <reference refuri="http://www.leebyron.com/else/streamgraph/">http://www.leebyron.com/else/streamgraph/</reference>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>
                                <emphasis>labels</emphasis>: A list or tuple of labels to assign to each data series.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>colors</emphasis>
                                    </term>
                                    <classifier>A list or tuple of colors. These will be cycled through and</classifier>
                                    <definition>
                                        <paragraph>used to colour the stacked areas.
All other keyword arguments are passed to

                                            <literal classes="xref py py-func">fill_between()</literal></paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns 
                                <emphasis>r</emphasis>
                                : A list of

                                <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                    <literal classes="xref py py-class">PolyCollection</literal></reference>, one for each
element in the stacked area plot.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stale\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.stale',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.stale" ids="matplotlib.axes.Axes.stale" module="matplotlib.axes" names="matplotlib.axes.Axes.stale">
                            <desc_name>stale</desc_name>
                        </desc_signature>
                        <desc_content>
                            <paragraph>If the artist is 'stale' and needs to be re-drawn for the output to
match the internal state of the artist.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'start_pan()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.start_pan',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.start_pan" ids="matplotlib.axes.Axes.start_pan" module="matplotlib.axes" names="matplotlib.axes.Axes.start_pan">
                            <desc_name>start_pan</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                                <desc_parameter>button</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Called when a pan operation has started.</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>, 
                                <emphasis>y</emphasis>
                                are the mouse coordinates in display coords.
button is the mouse button number:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>1: LEFT</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>2: MIDDLE</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>3: RIGHT</paragraph>
                                </list_item>
                            </bullet_list>
                            <note>
                                <paragraph>Intended to be overridden by new projection types.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'stem()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.stem',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.stem" ids="matplotlib.axes.Axes.stem" module="matplotlib.axes" names="matplotlib.axes.Axes.stem">
                            <desc_name>stem</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Create a stem plot.</paragraph>
                            <paragraph>Call signatures:</paragraph>
                            <literal_block xml:space="preserve">stem(y, linefmt='b-', markerfmt='bo', basefmt='r-')
stem(x, y, linefmt='b-', markerfmt='bo', basefmt='r-')</literal_block>
                            <paragraph>A stem plot plots vertical lines (using 
                                <emphasis>linefmt</emphasis>
                                ) at each 
                                <emphasis>x</emphasis>
                                location from the baseline to 
                                <emphasis>y</emphasis>
                                , and places a marker there
using 
                                <emphasis>markerfmt</emphasis>
                                .  A horizontal line at 0 is is plotted using

                                <emphasis>basefmt</emphasis>
                                .</paragraph>
                            <paragraph>If no 
                                <emphasis>x</emphasis>
                                values are provided, the default is (0, 1, ..., len(y) - 1)</paragraph>
                            <paragraph>Return value is a tuple (
                                <emphasis>markerline</emphasis>
                                , 
                                <emphasis>stemlines</emphasis>
                                ,

                                <emphasis>baseline</emphasis>
                                ).</paragraph>
                            <seealso>
                                <paragraph>This

                                    <reference name="document" refuri="http://www.mathworks.com/help/techdoc/ref/stem.html">document</reference>
                                    <target ids="document" names="document" refuri="http://www.mathworks.com/help/techdoc/ref/stem.html"/>
                                    for details.</paragraph>
                            </seealso>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All positional and all keyword arguments.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'step()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.step',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.step" ids="matplotlib.axes.Axes.step" module="matplotlib.axes" names="matplotlib.axes.Axes.step">
                            <desc_name>step</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a step plot.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">step(x, y, *args, **kwargs)</literal_block>
                            <paragraph>Additional keyword args to 
                                <literal classes="xref py py-func">step()</literal>
                                are the same as those
for 
                                <reference internal="True" reftitle="matplotlib.pyplot.plot" refuri="pyplot_api#matplotlib.pyplot.plot">
                                    <literal classes="xref py py-func">plot()</literal></reference>.</paragraph>
                            <paragraph>
                                <emphasis>x</emphasis>and 
                                <emphasis>y</emphasis>
                                must be 1-D sequences, and it is assumed, but not checked,
that 
                                <emphasis>x</emphasis>
                                is uniformly increasing.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>where</emphasis>: [ 'pre' | 'post' | 'mid'  ]</term>
                                    <definition>
                                        <paragraph>If 'pre' (the default), the interval from x[i] to x[i+1] has level
y[i+1].</paragraph>
                                        <paragraph>If 'post', that interval has level y[i].</paragraph>
                                        <paragraph>If 'mid', the jumps in 
                                            <emphasis>y</emphasis>
                                            occur half-way between the

                                            <emphasis>x</emphasis>
                                            -values.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Return value is a list of lines that were added.</paragraph>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'streamplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.streamplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.streamplot" ids="matplotlib.axes.Axes.streamplot" module="matplotlib.axes" names="matplotlib.axes.Axes.streamplot">
                            <desc_name>streamplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draws streamlines of a vector flow.</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>x</emphasis>, 
                                        <emphasis>y</emphasis></term>
                                    <classifier>1d arrays</classifier>
                                    <definition>
                                        <paragraph>an 
                                            <emphasis>evenly spaced</emphasis>
                                            grid.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>u</emphasis>, 
                                        <emphasis>v</emphasis></term>
                                    <classifier>2d arrays</classifier>
                                    <definition>
                                        <paragraph>x and y-velocities. Number of rows should match length of y, and
the number of columns should match x.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>density</emphasis>
                                    </term>
                                    <classifier>float or 2-tuple</classifier>
                                    <definition>
                                        <paragraph>Controls the closeness of streamlines. When 
                                            <literal classes="xref py py-obj">density = 1</literal>
                                            , the domain
is divided into a 30x30 grid---
                                            <emphasis>density</emphasis>
                                            linearly scales this grid.
Each cell in the grid can have, at most, one traversing streamline.
For different densities in each direction, use [density_x, density_y].</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>linewidth</emphasis>
                                    </term>
                                    <classifier>numeric or 2d array</classifier>
                                    <definition>
                                        <paragraph>vary linewidth when given a 2d array with the same shape as velocities.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>color</emphasis>
                                    </term>
                                    <classifier>matplotlib color code, or 2d array</classifier>
                                    <definition>
                                        <paragraph>Streamline color. When given an array with the same shape as
velocities, 
                                            <emphasis>color</emphasis>
                                            values are converted to colors using 
                                            <emphasis>cmap</emphasis>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>cmap</emphasis>
                                    </term>
                                    <classifier>
                                        <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                            <literal classes="xref py py-class">Colormap</literal>
                                        </reference>
                                    </classifier>
                                    <definition>
                                        <paragraph>Colormap used to plot streamlines and arrows. Only necessary when using
an array input for 
                                            <emphasis>color</emphasis>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>norm</emphasis>
                                    </term>
                                    <classifier>
                                        <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                            <literal classes="xref py py-class">Normalize</literal>
                                        </reference>
                                    </classifier>
                                    <definition>
                                        <paragraph>Normalize object used to scale luminance data to 0, 1. If None, stretch
(min, max) to (0, 1). Only necessary when 
                                            <emphasis>color</emphasis>
                                            is an array.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>arrowsize</emphasis>
                                    </term>
                                    <classifier>float</classifier>
                                    <definition>
                                        <paragraph>Factor scale arrow size.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>arrowstyle</emphasis>
                                    </term>
                                    <classifier>str</classifier>
                                    <definition>
                                        <paragraph>Arrow style specification.
See 
                                            <reference internal="True" reftitle="matplotlib.patches.FancyArrowPatch" refuri="patches_api#matplotlib.patches.FancyArrowPatch">
                                                <literal classes="xref py py-class">FancyArrowPatch</literal></reference>.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>minlength</emphasis>
                                    </term>
                                    <classifier>float</classifier>
                                    <definition>
                                        <paragraph>Minimum length of streamline in axes coordinates.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>start_points</emphasis>: Nx2 array</term>
                                    <definition>
                                        <paragraph>Coordinates of starting points for the streamlines.
In data coordinates, the same as the 
                                            <literal>x</literal>
                                            and 
                                            <literal>y</literal>
                                            arrays.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>zorder</emphasis>
                                    </term>
                                    <classifier>int</classifier>
                                    <definition>
                                        <paragraph>any number</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Returns:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>stream_container</emphasis>
                                        </term>
                                        <classifier>StreamplotSet</classifier>
                                        <definition>
                                            <paragraph>Container object with attributes</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>lines: 
                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-obj">matplotlib.collections.LineCollection</literal></reference>of streamlines</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>arrows: collection of 
                                                            <reference internal="True" reftitle="matplotlib.patches.FancyArrowPatch" refuri="patches_api#matplotlib.patches.FancyArrowPatch">
                                                                <literal classes="xref py py-obj">matplotlib.patches.FancyArrowPatch</literal></reference>objects representing arrows half-way along stream
lines.</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                            <paragraph>This container will probably change in the future to allow changes
to the colormap, alpha, etc. for both lines and arrows, but these
changes should be backward compatible.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'table()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.table',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.table" ids="matplotlib.axes.Axes.table" module="matplotlib.axes" names="matplotlib.axes.Axes.table">
                            <desc_name>table</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add a table to the current axes.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">table(cellText=None, cellColours=None,
      cellLoc='right', colWidths=None,
      rowLabels=None, rowColours=None, rowLoc='left',
      colLabels=None, colColours=None, colLoc='center',
      loc='bottom', bbox=None):</literal_block>
                            <paragraph>Returns a 
                                <literal classes="xref py py-class">matplotlib.table.Table</literal>
                                instance.  For finer
grained control over tables, use the

                                <literal classes="xref py py-class">Table</literal>
                                class and add it to the axes
with 
                                <reference internal="True" refid="matplotlib.axes.Axes.add_table" reftitle="matplotlib.axes.Axes.add_table">
                                    <literal classes="xref py py-meth">add_table()</literal></reference>.</paragraph>
                            <paragraph>Thanks to John Gill for providing the class and table.</paragraph>
                            <paragraph>kwargs control the 
                                <literal classes="xref py py-class">Table</literal>
                                properties:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="66"/>
                                        <colspec colwidth="124"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Property</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_agg_filter" refuri="artist_api#matplotlib.artist.Artist.set_agg_filter">
                                                            <literal classes="xref py py-meth">agg_filter</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_alpha" refuri="artist_api#matplotlib.artist.Artist.set_alpha">
                                                            <literal classes="xref py py-meth">alpha</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>float (0.0 transparent through 1.0 opaque)</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_animated" refuri="artist_api#matplotlib.artist.Artist.set_animated">
                                                            <literal classes="xref py py-meth">animated</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_axes" refuri="artist_api#matplotlib.artist.Artist.set_axes">
                                                            <literal classes="xref py py-meth">axes</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an 
                                                        <reference internal="True" refid="matplotlib.axes.Axes" reftitle="matplotlib.axes.Axes">
                                                            <literal classes="xref py py-class">Axes</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_box" refuri="artist_api#matplotlib.artist.Artist.set_clip_box">
                                                            <literal classes="xref py py-meth">clip_box</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                                            <literal classes="xref py py-class">matplotlib.transforms.Bbox</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_on" refuri="artist_api#matplotlib.artist.Artist.set_clip_on">
                                                            <literal classes="xref py py-meth">clip_on</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_clip_path" refuri="artist_api#matplotlib.artist.Artist.set_clip_path">
                                                            <literal classes="xref py py-meth">clip_path</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ (
                                                        <reference internal="True" reftitle="matplotlib.path.Path" refuri="path_api#matplotlib.path.Path">
                                                            <literal classes="xref py py-class">Path</literal></reference>, 
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal></reference>) | 
                                                        <reference internal="True" reftitle="matplotlib.patches.Patch" refuri="patches_api#matplotlib.patches.Patch">
                                                            <literal classes="xref py py-class">Patch</literal></reference>| None ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_contains" refuri="artist_api#matplotlib.artist.Artist.set_contains">
                                                            <literal classes="xref py py-meth">contains</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a callable function</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_figure" refuri="artist_api#matplotlib.artist.Artist.set_figure">
                                                            <literal classes="xref py py-meth">figure</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a 
                                                        <reference internal="True" reftitle="matplotlib.figure.Figure" refuri="figure_api#matplotlib.figure.Figure">
                                                            <literal classes="xref py py-class">matplotlib.figure.Figure</literal></reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <literal classes="xref py py-meth">fontsize</literal>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a float in points</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_gid" refuri="artist_api#matplotlib.artist.Artist.set_gid">
                                                            <literal classes="xref py py-meth">gid</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>an id string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_label" refuri="artist_api#matplotlib.artist.Artist.set_label">
                                                            <literal classes="xref py py-meth">label</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>string or anything printable with '%s' conversion.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_path_effects" refuri="artist_api#matplotlib.artist.Artist.set_path_effects">
                                                            <literal classes="xref py py-meth">path_effects</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_picker" refuri="artist_api#matplotlib.artist.Artist.set_picker">
                                                            <literal classes="xref py py-meth">picker</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[None|float|boolean|callable]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_rasterized" refuri="artist_api#matplotlib.artist.Artist.set_rasterized">
                                                            <literal classes="xref py py-meth">rasterized</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | None]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_sketch_params" refuri="artist_api#matplotlib.artist.Artist.set_sketch_params">
                                                            <literal classes="xref py py-meth">sketch_params</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_snap" refuri="artist_api#matplotlib.artist.Artist.set_snap">
                                                            <literal classes="xref py py-meth">snap</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>unknown</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_transform" refuri="artist_api#matplotlib.artist.Artist.set_transform">
                                                            <literal classes="xref py py-meth">transform</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.transforms.Transform" refuri="../devel/transformations#matplotlib.transforms.Transform">
                                                            <literal classes="xref py py-class">Transform</literal>
                                                        </reference>instance</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_url" refuri="artist_api#matplotlib.artist.Artist.set_url">
                                                            <literal classes="xref py py-meth">url</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>a url string</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_visible" refuri="artist_api#matplotlib.artist.Artist.set_visible">
                                                            <literal classes="xref py py-meth">visible</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <reference internal="True" reftitle="matplotlib.artist.Artist.set_zorder" refuri="artist_api#matplotlib.artist.Artist.set_zorder">
                                                            <literal classes="xref py py-meth">zorder</literal>
                                                        </reference>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>any number</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'text()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.text',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.text" ids="matplotlib.axes.Axes.text" module="matplotlib.axes" names="matplotlib.axes.Axes.text">
                            <desc_name>text</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                                <desc_parameter>s</desc_parameter>
                                <desc_parameter>fontdict=None</desc_parameter>
                                <desc_parameter>withdash=False</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Add text to the axes.</paragraph>
                            <paragraph>Add text in string 
                                <literal classes="xref py py-obj">s</literal>
                                to axis at location 
                                <literal classes="xref py py-obj">x</literal>
                                , 
                                <literal classes="xref py py-obj">y</literal>
                                , data
coordinates.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x, y</strong>: scalars</paragraph>
                                        <block_quote>
                                            <paragraph>data coordinates</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>s</strong>: string</paragraph>
                                        <block_quote>
                                            <paragraph>text</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>fontdict</strong>: dictionary, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary to override the default text properties. If fontdict
is None, the defaults are determined by your rc parameters.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>withdash</strong>: boolean, optional, default: False</paragraph>
                                        <block_quote>
                                            <paragraph>Creates a 
                                                <reference internal="True" reftitle="matplotlib.text.TextWithDash" refuri="text_api#matplotlib.text.TextWithDash">
                                                    <literal classes="xref py py-obj">TextWithDash</literal></reference>instance instead of a

                                                <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                    <literal classes="xref py py-obj">Text</literal></reference>instance.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.text.Text" refuri="text_api#matplotlib.text.Text">
                                                <literal classes="xref py py-obj">Text</literal></reference>properties.</paragraph>
                                        <block_quote>
                                            <paragraph>Other miscellaneous text parameters.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Examples</rubric>
                            <paragraph>Individual keyword arguments can be used to override any given
parameter:</paragraph>
                            <literal_block xml:space="preserve">&gt;&gt;&gt; text(x, y, s, fontsize=12)</literal_block>
                            <paragraph>The default transform specifies that text is in data coords,
alternatively, you can specify text in axis coords (0,0 is
lower-left and 1,1 is upper-right).  The example below places
text in the center of the axes:</paragraph>
                            <literal_block xml:space="preserve">&gt;&gt;&gt; text(0.5, 0.5,'matplotlib', horizontalalignment='center',
...      verticalalignment='center',
...      transform=ax.transAxes)</literal_block>
                            <paragraph>You can put a rectangular box around the text instance (e.g., to
set a background color) by using the keyword 
                                <literal classes="xref py py-obj">bbox</literal>
                                .  
                                <literal classes="xref py py-obj">bbox</literal>
                                is
a dictionary of 
                                <reference internal="True" reftitle="matplotlib.patches.Rectangle" refuri="patches_api#matplotlib.patches.Rectangle">
                                    <literal classes="xref py py-obj">Rectangle</literal></reference>properties.  For example:</paragraph>
                            <literal_block xml:space="preserve">&gt;&gt;&gt; text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))</literal_block>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tick_params()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.tick_params',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.tick_params" ids="matplotlib.axes.Axes.tick_params" module="matplotlib.axes" names="matplotlib.axes.Axes.tick_params">
                            <desc_name>tick_params</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>axis=u'both'</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Change the appearance of ticks and tick labels.</paragraph>
                            <paragraph>Keyword arguments:</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        <emphasis>axis</emphasis>
                                    </term>
                                    <classifier>['x' | 'y' | 'both']</classifier>
                                    <definition>
                                        <paragraph>Axis on which to operate; default is 'both'.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>reset</emphasis>
                                    </term>
                                    <classifier>[True | False]</classifier>
                                    <definition>
                                        <paragraph>If 
                                            <emphasis>True</emphasis>
                                            , set all parameters to defaults
before processing other keyword arguments.  Default is

                                            <emphasis>False</emphasis>
                                            .</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>which</emphasis>
                                    </term>
                                    <classifier>['major' | 'minor' | 'both']</classifier>
                                    <definition>
                                        <paragraph>Default is 'major'; apply arguments to 
                                            <emphasis>which</emphasis>
                                            ticks.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>direction</emphasis>
                                    </term>
                                    <classifier>['in' | 'out' | 'inout']</classifier>
                                    <definition>
                                        <paragraph>Puts ticks inside the axes, outside the axes, or both.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>length</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick length in points.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>width</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick width in points.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>color</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick color; accepts any mpl color spec.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>pad</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Distance in points between tick and label.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>labelsize</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick label font size in points or as a string (e.g., 'large').</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>labelcolor</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick label color; mpl color spec.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>colors</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Changes the tick color and the label color to the same value:
mpl color spec.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>zorder</emphasis>
                                    </term>
                                    <definition>
                                        <paragraph>Tick and label zorder.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>bottom</emphasis>, 
                                        <emphasis>top</emphasis>
                                        , 
                                        <emphasis>left</emphasis>
                                        , 
                                        <emphasis>right</emphasis></term>
                                    <classifier>[bool | 'on' | 'off']</classifier>
                                    <definition>
                                        <paragraph>controls whether to draw the respective ticks.</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>
                                        <emphasis>labelbottom</emphasis>, 
                                        <emphasis>labeltop</emphasis>
                                        , 
                                        <emphasis>labelleft</emphasis>
                                        , 
                                        <emphasis>labelright</emphasis></term>
                                    <definition>
                                        <paragraph>Boolean or ['on' | 'off'], controls whether to draw the
respective tick labels.</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>Example:</paragraph>
                            <literal_block xml:space="preserve">ax.tick_params(direction='out', length=6, width=2, colors='r')</literal_block>
                            <paragraph>This will make all major ticks be red, pointing out of the box,
and with dimensions 6 points by 2 points.  Tick labels will
also be red.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'ticklabel_format()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.ticklabel_format',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.ticklabel_format" ids="matplotlib.axes.Axes.ticklabel_format" module="matplotlib.axes" names="matplotlib.axes.Axes.ticklabel_format">
                            <desc_name>ticklabel_format</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Change the 
                                <reference internal="True" reftitle="matplotlib.ticker.ScalarFormatter" refuri="ticker_api#matplotlib.ticker.ScalarFormatter">
                                    <literal classes="xref py py-obj">ScalarFormatter</literal></reference>used by
default for linear axes.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <table>
                                    <tgroup cols="2">
                                        <colspec colwidth="12"/>
                                        <colspec colwidth="41"/>
                                        <thead>
                                            <row>
                                                <entry>
                                                    <paragraph>Keyword</paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>Description</paragraph>
                                                </entry>
                                            </row>
                                        </thead>
                                        <tbody>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>style</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'sci' (or 'scientific') | 'plain' ]
plain turns off scientific notation</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>scilimits</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>(m, n), pair of integers; if 
                                                        <emphasis>style</emphasis>
                                                        is 'sci', scientific notation will
be used for numbers outside the range
10`m`:sup: to 10`n`:sup:.
Use (0,0) to include all numbers.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>useOffset</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[True | False | offset]; if True,
the offset will be calculated as needed;
if False, no offset will be used; if a
numeric offset is specified, it will be
used.</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>axis</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>[ 'x' | 'y' | 'both' ]</paragraph>
                                                </entry>
                                            </row>
                                            <row>
                                                <entry>
                                                    <paragraph>
                                                        <emphasis>useLocale</emphasis>
                                                    </paragraph>
                                                </entry>
                                                <entry>
                                                    <paragraph>If True, format the number according to
the current locale.  This affects things
such as the character used for the
decimal separator.  If False, use
C-style (English) formatting.  The
default setting is controlled by the
axes.formatter.use_locale rcparam.</paragraph>
                                                </entry>
                                            </row>
                                        </tbody>
                                    </tgroup>
                                </table>
                            </block_quote>
                            <paragraph>Only the major ticks are affected.
If the method is called when the

                                <reference internal="True" reftitle="matplotlib.ticker.ScalarFormatter" refuri="ticker_api#matplotlib.ticker.ScalarFormatter">
                                    <literal classes="xref py py-class">ScalarFormatter</literal></reference>is not the

                                <reference internal="True" reftitle="matplotlib.ticker.Formatter" refuri="ticker_api#matplotlib.ticker.Formatter">
                                    <literal classes="xref py py-class">Formatter</literal></reference>being used, an

                                <literal classes="xref py py-exc">AttributeError</literal>
                                will be raised.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tricontour()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.tricontour',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.tricontour" ids="matplotlib.axes.Axes.tricontour" module="matplotlib.axes" names="matplotlib.axes.Axes.tricontour">
                            <desc_name>tricontour</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draw contours on an unstructured triangular grid.

                                <reference internal="True" reftitle="matplotlib.pyplot.tricontour" refuri="pyplot_api#matplotlib.pyplot.tricontour">
                                    <literal classes="xref py py-func">tricontour()</literal></reference>and

                                <reference internal="True" reftitle="matplotlib.pyplot.tricontourf" refuri="pyplot_api#matplotlib.pyplot.tricontourf">
                                    <literal classes="xref py py-func">tricontourf()</literal></reference>draw contour lines and
filled contours, respectively.  Except as noted, function
signatures and return values are the same for both versions.</paragraph>
                            <paragraph>The triangulation can be specified in one of two ways; either:</paragraph>
                            <literal_block xml:space="preserve">tricontour(triangulation, ...)</literal_block>
                            <paragraph>where triangulation is a 
                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">matplotlib.tri.Triangulation</literal></reference>object, or</paragraph>
                            <literal_block xml:space="preserve">tricontour(x, y, ...)
tricontour(x, y, triangles, ...)
tricontour(x, y, triangles=triangles, ...)
tricontour(x, y, mask=mask, ...)
tricontour(x, y, triangles, mask=mask, ...)</literal_block>
                            <paragraph>in which case a Triangulation object will be created.  See

                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">Triangulation</literal></reference>for a explanation of
these possibilities.</paragraph>
                            <paragraph>The remaining arguments may be:</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z)</literal_block>
                            <paragraph>where 
                                <emphasis>Z</emphasis>
                                is the array of values to contour, one per point
in the triangulation.  The level values are chosen
automatically.</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z, N)</literal_block>
                            <paragraph>contour 
                                <emphasis>N</emphasis>
                                automatically-chosen levels.</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z, V)</literal_block>
                            <paragraph>draw contour lines at the values specified in sequence 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">tricontourf(..., Z, V)</literal_block>
                            <paragraph>fill the (len(
                                <emphasis>V</emphasis>
                                )-1) regions between the values in 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">tricontour(Z, **kwargs)</literal_block>
                            <paragraph>Use keyword args to control colors, linewidth, origin, cmap ... see
below for more details.</paragraph>
                            <paragraph>
                                <literal>C = tricontour(...)</literal>returns a

                                <literal classes="xref py py-class">TriContourSet</literal>
                                object.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | string | (mpl_colors) ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the colormap specified by cmap will be used.</paragraph>
                                            <paragraph>If a string, like 'r' or 'red', all levels will be plotted in this
color.</paragraph>
                                            <paragraph>If a tuple of matplotlib color args (string, float, rgb, etc),
different levels will be plotted in different colors in the order
specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: float</term>
                                        <definition>
                                            <paragraph>The alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A cm 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">Colormap</literal></reference>instance or

                                                <emphasis>None</emphasis>
                                                . If 
                                                <emphasis>cmap</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and 
                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , a
default Colormap is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance for
scaling data values to colors. If 
                                                <emphasis>norm</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and

                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default linear scaling is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>levels</emphasis>[level0, level1, ..., leveln]</term>
                                        <definition>
                                            <paragraph>A list of floating point numbers indicating the level
curves to draw, in increasing order; e.g., to draw just
the zero contour pass 
                                                <literal>levels=[0]</literal></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>origin</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'upper' | 'lower' | 'image' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the first value of 
                                                <emphasis>Z</emphasis>
                                                will correspond to the
lower left corner, location (0,0). If 'image', the rc
value for 
                                                <literal>image.origin</literal>
                                                will be used.</paragraph>
                                            <paragraph>This keyword is not active if 
                                                <emphasis>X</emphasis>
                                                and 
                                                <emphasis>Y</emphasis>
                                                are specified in
the call to contour.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>extent</emphasis>: [ 
                                    <emphasis>None</emphasis>
                                    | (x0,x1,y0,y1) ]</paragraph>
                                <block_quote>
                                    <paragraph>If 
                                        <emphasis>origin</emphasis>
                                        is not 
                                        <emphasis>None</emphasis>
                                        , then 
                                        <emphasis>extent</emphasis>
                                        is interpreted as
in 
                                        <reference internal="True" reftitle="matplotlib.pyplot.imshow" refuri="pyplot_api#matplotlib.pyplot.imshow">
                                            <literal classes="xref py py-func">matplotlib.pyplot.imshow()</literal></reference>: it gives the outer
pixel boundaries. In this case, the position of Z[0,0]
is the center of the pixel, not a corner. If 
                                        <emphasis>origin</emphasis>
                                        is

                                        <emphasis>None</emphasis>
                                        , then (
                                        <emphasis>x0</emphasis>
                                        , 
                                        <emphasis>y0</emphasis>
                                        ) is the position of Z[0,0], and
(
                                        <emphasis>x1</emphasis>
                                        , 
                                        <emphasis>y1</emphasis>
                                        ) is the position of Z[-1,-1].</paragraph>
                                    <paragraph>This keyword is not active if 
                                        <emphasis>X</emphasis>
                                        and 
                                        <emphasis>Y</emphasis>
                                        are specified in
the call to contour.</paragraph>
                                </block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>locator</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | ticker.Locator subclass ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>locator</emphasis>
                                                is None, the default

                                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator" refuri="ticker_api#matplotlib.ticker.MaxNLocator">
                                                    <literal classes="xref py py-class">MaxNLocator</literal></reference>is used. The
locator is used to determine the contour levels if they
are not given explicitly via the 
                                                <emphasis>V</emphasis>
                                                argument.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>extend</emphasis>: [ 'neither' | 'both' | 'min' | 'max' ]</term>
                                        <definition>
                                            <paragraph>Unless this is 'neither', contour levels are automatically
added to one or both ends of the range so that all data
are included. These added ranges are then mapped to the
special colormap values which default to the ends of the
colormap range, but can be set via

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_under" refuri="colors_api#matplotlib.colors.Colormap.set_under">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_under()</literal></reference>and

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_over" refuri="colors_api#matplotlib.colors.Colormap.set_over">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_over()</literal></reference>methods.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xunits</emphasis>, 
                                            <emphasis>yunits</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | registered units ]</term>
                                        <definition>
                                            <paragraph>Override axis units by specifying an instance of a

                                                <reference internal="True" reftitle="matplotlib.units.ConversionInterface" refuri="units_api#matplotlib.units.ConversionInterface">
                                                    <literal classes="xref py py-class">matplotlib.units.ConversionInterface</literal></reference>.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>tricontour-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linewidths</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | number | tuple of numbers ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linewidths</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default width in

                                                <literal>lines.linewidth</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                is used.</paragraph>
                                            <paragraph>If a number, all levels will be plotted with this linewidth.</paragraph>
                                            <paragraph>If a tuple, different levels will be plotted with different
linewidths in the order specified</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linestyles</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linestyles</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the 'solid' is used.</paragraph>
                                            <paragraph>
                                                <emphasis>linestyles</emphasis>can also be an iterable of the above strings
specifying a set of linestyles to be used. If this
iterable is shorter than the number of contour levels
it will be repeated as necessary.</paragraph>
                                            <paragraph>If contour is using a monochrome colormap and the contour
level is less than 0, then the linestyle specified
in 
                                                <literal>contour.negative_linestyle</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                will be used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>tricontourf-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>antialiased</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>enable antialiasing</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note: tricontourf fills intervals that are closed at the top; that
is, for boundaries 
                                <emphasis>z1</emphasis>
                                and 
                                <emphasis>z2</emphasis>
                                , the filled region is:</paragraph>
                            <literal_block xml:space="preserve">z1 &lt; z &lt;= z2</literal_block>
                            <paragraph>There is one exception: if the lowest boundary coincides with
the minimum value of the 
                                <emphasis>z</emphasis>
                                array, then that minimum value
will be included in the lowest interval.</paragraph>
                            <paragraph>
                                <strong>Examples:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tricontourf()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.tricontourf',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.tricontourf" ids="matplotlib.axes.Axes.tricontourf" module="matplotlib.axes" names="matplotlib.axes.Axes.tricontourf">
                            <desc_name>tricontourf</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draw contours on an unstructured triangular grid.

                                <reference internal="True" reftitle="matplotlib.pyplot.tricontour" refuri="pyplot_api#matplotlib.pyplot.tricontour">
                                    <literal classes="xref py py-func">tricontour()</literal></reference>and

                                <reference internal="True" reftitle="matplotlib.pyplot.tricontourf" refuri="pyplot_api#matplotlib.pyplot.tricontourf">
                                    <literal classes="xref py py-func">tricontourf()</literal></reference>draw contour lines and
filled contours, respectively.  Except as noted, function
signatures and return values are the same for both versions.</paragraph>
                            <paragraph>The triangulation can be specified in one of two ways; either:</paragraph>
                            <literal_block xml:space="preserve">tricontour(triangulation, ...)</literal_block>
                            <paragraph>where triangulation is a 
                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">matplotlib.tri.Triangulation</literal></reference>object, or</paragraph>
                            <literal_block xml:space="preserve">tricontour(x, y, ...)
tricontour(x, y, triangles, ...)
tricontour(x, y, triangles=triangles, ...)
tricontour(x, y, mask=mask, ...)
tricontour(x, y, triangles, mask=mask, ...)</literal_block>
                            <paragraph>in which case a Triangulation object will be created.  See

                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">Triangulation</literal></reference>for a explanation of
these possibilities.</paragraph>
                            <paragraph>The remaining arguments may be:</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z)</literal_block>
                            <paragraph>where 
                                <emphasis>Z</emphasis>
                                is the array of values to contour, one per point
in the triangulation.  The level values are chosen
automatically.</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z, N)</literal_block>
                            <paragraph>contour 
                                <emphasis>N</emphasis>
                                automatically-chosen levels.</paragraph>
                            <literal_block xml:space="preserve">tricontour(..., Z, V)</literal_block>
                            <paragraph>draw contour lines at the values specified in sequence 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">tricontourf(..., Z, V)</literal_block>
                            <paragraph>fill the (len(
                                <emphasis>V</emphasis>
                                )-1) regions between the values in 
                                <emphasis>V</emphasis>
                                ,
which must be in increasing order.</paragraph>
                            <literal_block xml:space="preserve">tricontour(Z, **kwargs)</literal_block>
                            <paragraph>Use keyword args to control colors, linewidth, origin, cmap ... see
below for more details.</paragraph>
                            <paragraph>
                                <literal>C = tricontour(...)</literal>returns a

                                <literal classes="xref py py-class">TriContourSet</literal>
                                object.</paragraph>
                            <paragraph>Optional keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>colors</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | string | (mpl_colors) ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the colormap specified by cmap will be used.</paragraph>
                                            <paragraph>If a string, like 'r' or 'red', all levels will be plotted in this
color.</paragraph>
                                            <paragraph>If a tuple of matplotlib color args (string, float, rgb, etc),
different levels will be plotted in different colors in the order
specified.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>alpha</emphasis>: float</term>
                                        <definition>
                                            <paragraph>The alpha blending value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>cmap</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Colormap ]</term>
                                        <definition>
                                            <paragraph>A cm 
                                                <reference internal="True" reftitle="matplotlib.colors.Colormap" refuri="colors_api#matplotlib.colors.Colormap">
                                                    <literal classes="xref py py-class">Colormap</literal></reference>instance or

                                                <emphasis>None</emphasis>
                                                . If 
                                                <emphasis>cmap</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and 
                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , a
default Colormap is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>norm</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | Normalize ]</term>
                                        <definition>
                                            <paragraph>A 
                                                <reference internal="True" reftitle="matplotlib.colors.Normalize" refuri="colors_api#matplotlib.colors.Normalize">
                                                    <literal classes="xref py py-class">matplotlib.colors.Normalize</literal></reference>instance for
scaling data values to colors. If 
                                                <emphasis>norm</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                and

                                                <emphasis>colors</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default linear scaling is used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>levels</emphasis>[level0, level1, ..., leveln]</term>
                                        <definition>
                                            <paragraph>A list of floating point numbers indicating the level
curves to draw, in increasing order; e.g., to draw just
the zero contour pass 
                                                <literal>levels=[0]</literal></paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>origin</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'upper' | 'lower' | 'image' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>None</emphasis>
                                                , the first value of 
                                                <emphasis>Z</emphasis>
                                                will correspond to the
lower left corner, location (0,0). If 'image', the rc
value for 
                                                <literal>image.origin</literal>
                                                will be used.</paragraph>
                                            <paragraph>This keyword is not active if 
                                                <emphasis>X</emphasis>
                                                and 
                                                <emphasis>Y</emphasis>
                                                are specified in
the call to contour.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>
                                    <emphasis>extent</emphasis>: [ 
                                    <emphasis>None</emphasis>
                                    | (x0,x1,y0,y1) ]</paragraph>
                                <block_quote>
                                    <paragraph>If 
                                        <emphasis>origin</emphasis>
                                        is not 
                                        <emphasis>None</emphasis>
                                        , then 
                                        <emphasis>extent</emphasis>
                                        is interpreted as
in 
                                        <reference internal="True" reftitle="matplotlib.pyplot.imshow" refuri="pyplot_api#matplotlib.pyplot.imshow">
                                            <literal classes="xref py py-func">matplotlib.pyplot.imshow()</literal></reference>: it gives the outer
pixel boundaries. In this case, the position of Z[0,0]
is the center of the pixel, not a corner. If 
                                        <emphasis>origin</emphasis>
                                        is

                                        <emphasis>None</emphasis>
                                        , then (
                                        <emphasis>x0</emphasis>
                                        , 
                                        <emphasis>y0</emphasis>
                                        ) is the position of Z[0,0], and
(
                                        <emphasis>x1</emphasis>
                                        , 
                                        <emphasis>y1</emphasis>
                                        ) is the position of Z[-1,-1].</paragraph>
                                    <paragraph>This keyword is not active if 
                                        <emphasis>X</emphasis>
                                        and 
                                        <emphasis>Y</emphasis>
                                        are specified in
the call to contour.</paragraph>
                                </block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>locator</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | ticker.Locator subclass ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>locator</emphasis>
                                                is None, the default

                                                <reference internal="True" reftitle="matplotlib.ticker.MaxNLocator" refuri="ticker_api#matplotlib.ticker.MaxNLocator">
                                                    <literal classes="xref py py-class">MaxNLocator</literal></reference>is used. The
locator is used to determine the contour levels if they
are not given explicitly via the 
                                                <emphasis>V</emphasis>
                                                argument.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>extend</emphasis>: [ 'neither' | 'both' | 'min' | 'max' ]</term>
                                        <definition>
                                            <paragraph>Unless this is 'neither', contour levels are automatically
added to one or both ends of the range so that all data
are included. These added ranges are then mapped to the
special colormap values which default to the ends of the
colormap range, but can be set via

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_under" refuri="colors_api#matplotlib.colors.Colormap.set_under">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_under()</literal></reference>and

                                                <reference internal="True" reftitle="matplotlib.colors.Colormap.set_over" refuri="colors_api#matplotlib.colors.Colormap.set_over">
                                                    <literal classes="xref py py-meth">matplotlib.colors.Colormap.set_over()</literal></reference>methods.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>xunits</emphasis>, 
                                            <emphasis>yunits</emphasis>
                                            : [ 
                                            <emphasis>None</emphasis>
                                            | registered units ]</term>
                                        <definition>
                                            <paragraph>Override axis units by specifying an instance of a

                                                <reference internal="True" reftitle="matplotlib.units.ConversionInterface" refuri="units_api#matplotlib.units.ConversionInterface">
                                                    <literal classes="xref py py-class">matplotlib.units.ConversionInterface</literal></reference>.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>tricontour-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linewidths</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | number | tuple of numbers ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linewidths</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the default width in

                                                <literal>lines.linewidth</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                is used.</paragraph>
                                            <paragraph>If a number, all levels will be plotted with this linewidth.</paragraph>
                                            <paragraph>If a tuple, different levels will be plotted with different
linewidths in the order specified</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>linestyles</emphasis>: [ 
                                            <emphasis>None</emphasis>
                                            | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]</term>
                                        <definition>
                                            <paragraph>If 
                                                <emphasis>linestyles</emphasis>
                                                is 
                                                <emphasis>None</emphasis>
                                                , the 'solid' is used.</paragraph>
                                            <paragraph>
                                                <emphasis>linestyles</emphasis>can also be an iterable of the above strings
specifying a set of linestyles to be used. If this
iterable is shorter than the number of contour levels
it will be repeated as necessary.</paragraph>
                                            <paragraph>If contour is using a monochrome colormap and the contour
level is less than 0, then the linestyle specified
in 
                                                <literal>contour.negative_linestyle</literal>
                                                in 
                                                <literal>matplotlibrc</literal>
                                                will be used.</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>tricontourf-only keyword arguments:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <emphasis>antialiased</emphasis>: [ 
                                            <emphasis>True</emphasis>
                                            | 
                                            <emphasis>False</emphasis>
                                            ]</term>
                                        <definition>
                                            <paragraph>enable antialiasing</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                            <paragraph>Note: tricontourf fills intervals that are closed at the top; that
is, for boundaries 
                                <emphasis>z1</emphasis>
                                and 
                                <emphasis>z2</emphasis>
                                , the filled region is:</paragraph>
                            <literal_block xml:space="preserve">z1 &lt; z &lt;= z2</literal_block>
                            <paragraph>There is one exception: if the lowest boundary coincides with
the minimum value of the 
                                <emphasis>z</emphasis>
                                array, then that minimum value
will be included in the lowest interval.</paragraph>
                            <paragraph>
                                <strong>Examples:</strong>
                            </paragraph>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'tripcolor()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.tripcolor',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.tripcolor" ids="matplotlib.axes.Axes.tripcolor" module="matplotlib.axes" names="matplotlib.axes.Axes.tripcolor">
                            <desc_name>tripcolor</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Create a pseudocolor plot of an unstructured triangular grid.</paragraph>
                            <paragraph>The triangulation can be specified in one of two ways; either:</paragraph>
                            <literal_block xml:space="preserve">tripcolor(triangulation, ...)</literal_block>
                            <paragraph>where triangulation is a 
                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">matplotlib.tri.Triangulation</literal></reference>object, or</paragraph>
                            <literal_block xml:space="preserve">tripcolor(x, y, ...)
tripcolor(x, y, triangles, ...)
tripcolor(x, y, triangles=triangles, ...)
tripcolor(x, y, mask=mask, ...)
tripcolor(x, y, triangles, mask=mask, ...)</literal_block>
                            <paragraph>in which case a Triangulation object will be created.  See

                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">Triangulation</literal></reference>for a explanation of these
possibilities.</paragraph>
                            <paragraph>The next argument must be 
                                <emphasis>C</emphasis>
                                , the array of color values, either
one per point in the triangulation if color values are defined at
points, or one per triangle in the triangulation if color values
are defined at triangles. If there are the same number of points
and triangles in the triangulation it is assumed that color
values are defined at points; to force the use of color values at
triangles use the kwarg 
                                <emphasis>facecolors*=C instead of just *C</emphasis>
                                .</paragraph>
                            <paragraph>
                                <emphasis>shading</emphasis>may be 'flat' (the default) or 'gouraud'. If 
                                <emphasis>shading</emphasis>
                                is 'flat' and C values are defined at points, the color values
used for each triangle are from the mean C of the triangle's
three points. If 
                                <emphasis>shading</emphasis>
                                is 'gouraud' then color values must be
defined at points.</paragraph>
                            <paragraph>The remaining kwargs are the same as for

                                <reference internal="True" refid="matplotlib.axes.Axes.pcolor" reftitle="matplotlib.axes.Axes.pcolor">
                                    <literal classes="xref py py-meth">pcolor()</literal></reference>.</paragraph>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <block_quote>
                                <comment xml:space="preserve"/>
                                <comment xml:space="preserve"/>
                                <comment xml:space="preserve"/>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'triplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.triplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.triplot" ids="matplotlib.axes.Axes.triplot" module="matplotlib.axes" names="matplotlib.axes.Axes.triplot">
                            <desc_name>triplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Draw a unstructured triangular grid as lines and/or markers.</paragraph>
                            <paragraph>The triangulation to plot can be specified in one of two ways;
either:</paragraph>
                            <literal_block xml:space="preserve">triplot(triangulation, ...)</literal_block>
                            <paragraph>where triangulation is a 
                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">matplotlib.tri.Triangulation</literal></reference>object, or</paragraph>
                            <literal_block xml:space="preserve">triplot(x, y, ...)
triplot(x, y, triangles, ...)
triplot(x, y, triangles=triangles, ...)
triplot(x, y, mask=mask, ...)
triplot(x, y, triangles, mask=mask, ...)</literal_block>
                            <paragraph>in which case a Triangulation object will be created.  See

                                <reference internal="True" reftitle="matplotlib.tri.Triangulation" refuri="tri_api#matplotlib.tri.Triangulation">
                                    <literal classes="xref py py-class">Triangulation</literal></reference>for a explanation of these
possibilities.</paragraph>
                            <paragraph>The remaining args and kwargs are the same as for

                                <reference internal="True" refid="matplotlib.axes.Axes.plot" reftitle="matplotlib.axes.Axes.plot">
                                    <literal classes="xref py py-meth">plot()</literal></reference>.</paragraph>
                            <paragraph>Return a list of 2 
                                <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                    <literal classes="xref py py-class">Line2D</literal></reference>containing
respectively:</paragraph>
                            <block_quote>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>the lines plotted for triangles edges</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>the markers plotted for triangles nodes</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                            <paragraph>
                                <strong>Example:</strong>
                            </paragraph>
                            <block_quote>
                                <comment xml:space="preserve"/>
                                <comment xml:space="preserve"/>
                                <comment xml:space="preserve"/>
                            </block_quote>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'twinx()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.twinx',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.twinx" ids="matplotlib.axes.Axes.twinx" module="matplotlib.axes" names="matplotlib.axes.Axes.twinx">
                            <desc_name>twinx</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">ax = twinx()</literal_block>
                            <paragraph>create a twin of Axes for generating a plot with a sharex
x-axis but independent y axis.  The y-axis of self will have
ticks on left and the returned axes will have ticks on the
right.</paragraph>
                            <note>
                                <paragraph>For those who are 'picking' artists while using twinx, pick
events are only called for the artists in the top-most axes.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'twiny()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.twiny',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.twiny" ids="matplotlib.axes.Axes.twiny" module="matplotlib.axes" names="matplotlib.axes.Axes.twiny">
                            <desc_name>twiny</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">ax = twiny()</literal_block>
                            <paragraph>create a twin of Axes for generating a plot with a shared
y-axis but independent x axis.  The x-axis of self will have
ticks on bottom and the returned axes will have ticks on the
top.</paragraph>
                            <note>
                                <paragraph>For those who are 'picking' artists while using twiny, pick
events are only called for the artists in the top-most axes.</paragraph>
                            </note>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.update',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.update" ids="matplotlib.axes.Axes.update" module="matplotlib.axes" names="matplotlib.axes.Axes.update">
                            <desc_name>update</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>props</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Update the properties of this 
                                <literal classes="xref py py-class">Artist</literal>
                                from the
dictionary 
                                <emphasis>prop</emphasis>
                                .</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_datalim()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.update_datalim',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.update_datalim" ids="matplotlib.axes.Axes.update_datalim" module="matplotlib.axes" names="matplotlib.axes.Axes.update_datalim">
                            <desc_name>update_datalim</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>xys</desc_parameter>
                                <desc_parameter>updatex=True</desc_parameter>
                                <desc_parameter>updatey=True</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Update the data lim bbox with seq of xy tups or equiv. 2-D array</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_datalim_bounds()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.update_datalim_bounds',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.update_datalim_bounds" ids="matplotlib.axes.Axes.update_datalim_bounds" module="matplotlib.axes" names="matplotlib.axes.Axes.update_datalim_bounds">
                            <desc_name>update_datalim_bounds</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>bounds</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Update the datalim to include the given

                                <reference internal="True" reftitle="matplotlib.transforms.Bbox" refuri="../devel/transformations#matplotlib.transforms.Bbox">
                                    <literal classes="xref py py-class">Bbox</literal></reference>
                                <emphasis>bounds</emphasis>
                            </paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_datalim_numerix()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.update_datalim_numerix',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.update_datalim_numerix" ids="matplotlib.axes.Axes.update_datalim_numerix" module="matplotlib.axes" names="matplotlib.axes.Axes.update_datalim_numerix">
                            <desc_name>update_datalim_numerix</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>x</desc_parameter>
                                <desc_parameter>y</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Update the data lim bbox with seq of xy tups</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'update_from()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.update_from',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.update_from" ids="matplotlib.axes.Axes.update_from" module="matplotlib.axes" names="matplotlib.axes.Axes.update_from">
                            <desc_name>update_from</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>other</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Copy properties from 
                                <emphasis>other</emphasis>
                                to 
                                <emphasis>self</emphasis>
                                .</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'violin()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.violin',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.violin" ids="matplotlib.axes.Axes.violin" module="matplotlib.axes" names="matplotlib.axes.Axes.violin">
                            <desc_name>violin</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>vpstats</desc_parameter>
                                <desc_parameter>positions=None</desc_parameter>
                                <desc_parameter>vert=True</desc_parameter>
                                <desc_parameter>widths=0.5</desc_parameter>
                                <desc_parameter>showmeans=False</desc_parameter>
                                <desc_parameter>showextrema=True</desc_parameter>
                                <desc_parameter>showmedians=False</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Drawing function for violin plots.</paragraph>
                            <paragraph>Call signature:</paragraph>
                            <literal_block xml:space="preserve">violin(vpstats, positions=None, vert=True, widths=0.5,
       showmeans=False, showextrema=True, showmedians=False):</literal_block>
                            <paragraph>Draw a violin plot for each column of 
                                <literal classes="xref py py-obj">vpstats</literal>
                                . Each filled area
extends to represent the entire data range, with optional lines at the
mean, the median, the minimum, and the maximum.</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>vpstats</strong>: list of dicts</paragraph>
                                        <block_quote>
                                            <paragraph>A list of dictionaries containing stats for each violin plot.
Required keys are:</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal>coords</literal>: A list of scalars containing the coordinates that
the violin's kernel density estimate were evaluated at.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>vals</literal>: A list of scalars containing the values of the
kernel density estimate at each of the coordinates given
in 
                                                        <emphasis>coords</emphasis>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>mean</literal>: The mean value for this violin's dataset.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>median</literal>: The median value for this violin's dataset.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>min</literal>: The minimum value for this violin's dataset.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal>max</literal>: The maximum value for this violin's dataset.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                        <paragraph>
                                            <strong>positions</strong>: array-like, default = [1, 2, ..., n]</paragraph>
                                        <block_quote>
                                            <paragraph>Sets the positions of the violins. The ticks and limits are
automatically set to match the positions.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>vert</strong>: bool, default = True.</paragraph>
                                        <block_quote>
                                            <paragraph>If true, plots the violins veritcally.
Otherwise, plots the violins horizontally.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>widths</strong>: array-like, default = 0.5</paragraph>
                                        <block_quote>
                                            <paragraph>Either a scalar or a vector that sets the maximal width of
each violin. The default is 0.5, which uses about half of the
available horizontal space.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showmeans</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If true, will toggle rendering of the means.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showextrema</strong>: bool, default = True</paragraph>
                                        <block_quote>
                                            <paragraph>If true, will toggle rendering of the extrema.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>showmedians</strong>: bool, default = False</paragraph>
                                        <block_quote>
                                            <paragraph>If true, will toggle rendering of the medians.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>result</strong>: dict</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary mapping each component of the violinplot to a
list of the corresponding collection instances created. The
dictionary has the following keys:</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>bodies</literal>: A list of the

                                                            <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.PolyCollection</literal></reference>instances
containing the filled area of each violin.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmeans</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the mean values of each of the
violin's distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmins</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the bottom of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmaxes</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the top of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cbars</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the centers of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmedians</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the median values of each of the
violin's distribution.</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'violinplot()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.violinplot',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.violinplot" ids="matplotlib.axes.Axes.violinplot" module="matplotlib.axes" names="matplotlib.axes.Axes.violinplot">
                            <desc_name>violinplot</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Make a violin plot.</paragraph>
                            <block_quote>
                                <paragraph>Call signature:</paragraph>
                                <literal_block xml:space="preserve">violinplot(dataset, positions=None, vert=True, widths=0.5,
           showmeans=False, showextrema=True, showmedians=False,
           points=100, bw_method=None):</literal_block>
                                <paragraph>Make a violin plot for each column of 
                                    <emphasis>dataset</emphasis>
                                    or each vector in
sequence 
                                    <emphasis>dataset</emphasis>
                                    .  Each filled area extends to represent the
entire data range, with optional lines at the mean, the median,
the minimum, and the maximum.</paragraph>
                            </block_quote>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>dataset</strong>: Array or a sequence of vectors.</paragraph>
                                        <block_quote>
                                            <block_quote>
                                                <paragraph>The input data.</paragraph>
                                            </block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>positions</term>
                                                    <classifier>array-like, default = [1, 2, ..., n]</classifier>
                                                    <definition>
                                                        <paragraph>Sets the positions of the violins. The ticks and limits are
automatically set to match the positions.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>vert</term>
                                                    <classifier>bool, default = True.</classifier>
                                                    <definition>
                                                        <paragraph>If true, creates a vertical violin plot.
Otherwise, creates a horizontal violin plot.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>widths</term>
                                                    <classifier>array-like, default = 0.5</classifier>
                                                    <definition>
                                                        <paragraph>Either a scalar or a vector that sets the maximal width of
each violin. The default is 0.5, which uses about half of the
available horizontal space.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>showmeans</term>
                                                    <classifier>bool, default = False</classifier>
                                                    <definition>
                                                        <paragraph>If 
                                                            <literal classes="xref py py-obj">True</literal>
                                                            , will toggle rendering of the means.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>showextrema</term>
                                                    <classifier>bool, default = True</classifier>
                                                    <definition>
                                                        <paragraph>If 
                                                            <literal classes="xref py py-obj">True</literal>
                                                            , will toggle rendering of the extrema.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>showmedians</term>
                                                    <classifier>bool, default = False</classifier>
                                                    <definition>
                                                        <paragraph>If 
                                                            <literal classes="xref py py-obj">True</literal>
                                                            , will toggle rendering of the medians.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>points</term>
                                                    <classifier>scalar, default = 100</classifier>
                                                    <definition>
                                                        <paragraph>Defines the number of points to evaluate each of the
gaussian kernel density estimations at.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>bw_method</term>
                                                    <classifier>str, scalar or callable, optional</classifier>
                                                    <definition>
                                                        <paragraph>The method used to calculate the estimator bandwidth.  This can be
'scott', 'silverman', a scalar constant or a callable.  If a
scalar, this will be used directly as 
                                                            <literal classes="xref py py-obj">kde.factor</literal>
                                                            .  If a
callable, it should take a 
                                                            <literal classes="xref py py-obj">GaussianKDE</literal>
                                                            instance as its only
parameter and return a scalar. If None (default), 'scott' is used.</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>result</strong>: dict</paragraph>
                                        <block_quote>
                                            <paragraph>A dictionary mapping each component of the violinplot to a
list of the corresponding collection instances created. The
dictionary has the following keys:</paragraph>
                                            <block_quote>
                                                <bullet_list bullet="-">
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>bodies</literal>: A list of the

                                                            <reference internal="True" reftitle="matplotlib.collections.PolyCollection" refuri="collections_api#matplotlib.collections.PolyCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.PolyCollection</literal></reference>instances
containing the filled area of each violin.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmeans</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the mean values of each of the
violin's distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmins</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the bottom of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmaxes</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the top of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cbars</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the centers of each violin's
distribution.</paragraph>
                                                    </list_item>
                                                    <list_item>
                                                        <paragraph>
                                                            <literal>cmedians</literal>: A

                                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                                <literal classes="xref py py-class">matplotlib.collections.LineCollection</literal></reference>instance
created to identify the median values of each of the
violin's distribution.</paragraph>
                                                    </list_item>
                                                </bullet_list>
                                            </block_quote>
                                        </block_quote>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'dataset'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'vlines()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.vlines',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.vlines" ids="matplotlib.axes.Axes.vlines" module="matplotlib.axes" names="matplotlib.axes.Axes.vlines">
                            <desc_name>vlines</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot vertical lines.</paragraph>
                            <paragraph>Plot vertical lines at each 
                                <literal classes="xref py py-obj">x</literal>
                                from 
                                <literal classes="xref py py-obj">ymin</literal>
                                to 
                                <literal classes="xref py py-obj">ymax</literal>
                                .</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: scalar or 1D array_like</paragraph>
                                        <block_quote>
                                            <paragraph>x-indexes where to plot the lines.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>ymin, ymax</strong>: scalar or 1D array_like</paragraph>
                                        <block_quote>
                                            <paragraph>Respective beginning and end of each line. If scalars are
provided, all lines will have same length.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>colors</strong>: array_like of colors, optional, default: 'k'</paragraph>
                                        <paragraph>
                                            <strong>linestyles</strong>: ['solid' | 'dashed' | 'dashdot' | 'dotted'], optional</paragraph>
                                        <paragraph>
                                            <strong>label</strong>: string, optional, default: ''</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>lines</strong>: 
                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                <literal classes="xref py py-obj">LineCollection</literal></reference>
                                        </paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>kwargs</strong>: 
                                            <reference internal="True" reftitle="matplotlib.collections.LineCollection" refuri="collections_api#matplotlib.collections.LineCollection">
                                                <literal classes="xref py py-obj">LineCollection</literal></reference>properties.</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <seealso>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            <literal classes="xref py py-obj">hlines</literal>
                                        </term>
                                        <definition>
                                            <paragraph>horizontal lines</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </seealso>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'x', 'colors', 'ymin', 'ymax'.</paragraph>
                                </list_item>
                            </bullet_list>
                            <rubric>Examples</rubric>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                            <comment xml:space="preserve"/>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'xaxis_date()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.xaxis_date',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.xaxis_date" ids="matplotlib.axes.Axes.xaxis_date" module="matplotlib.axes" names="matplotlib.axes.Axes.xaxis_date">
                            <desc_name>xaxis_date</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>tz=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets up x-axis ticks and labels that treat the x data as dates.</paragraph>
                            <paragraph>
                                <emphasis>tz</emphasis>is a timezone string or 
                                <literal classes="xref py py-class">tzinfo</literal>
                                instance.
Defaults to rc value.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'xaxis_inverted()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.xaxis_inverted',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.xaxis_inverted" ids="matplotlib.axes.Axes.xaxis_inverted" module="matplotlib.axes" names="matplotlib.axes.Axes.xaxis_inverted">
                            <desc_name>xaxis_inverted</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns 
                                <emphasis>True</emphasis>
                                if the x-axis is inverted.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'xcorr()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.xcorr',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.xcorr" ids="matplotlib.axes.Axes.xcorr" module="matplotlib.axes" names="matplotlib.axes.Axes.xcorr">
                            <desc_name>xcorr</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>ax</desc_parameter>
                                <desc_parameter>*args</desc_parameter>
                                <desc_parameter>**kwargs</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Plot the cross correlation between 
                                <emphasis>x</emphasis>
                                and 
                                <emphasis>y</emphasis>
                                .</paragraph>
                            <field_list>
                                <field>
                                    <field_name>Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>x</strong>: sequence of scalars of length n</paragraph>
                                        <paragraph>
                                            <strong>y</strong>: sequence of scalars of length n</paragraph>
                                        <paragraph>
                                            <strong>hold</strong>: boolean, optional, default: True</paragraph>
                                        <paragraph>
                                            <strong>detrend</strong>: callable, optional, default: 
                                            <literal classes="xref py py-obj">mlab.detrend_none</literal></paragraph>
                                        <block_quote>
                                            <paragraph>x is detrended by the 
                                                <literal classes="xref py py-obj">detrend</literal>
                                                callable. Default is no
normalization.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>normed</strong>: boolean, optional, default: True</paragraph>
                                        <block_quote>
                                            <paragraph>if True, normalize the data by the autocorrelation at the 0-th
lag.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>usevlines</strong>: boolean, optional, default: True</paragraph>
                                        <block_quote>
                                            <paragraph>if True, Axes.vlines is used to plot the vertical lines from the
origin to the acorr. Otherwise, Axes.plot is used.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>maxlags</strong>: integer, optional, default: 10</paragraph>
                                        <block_quote>
                                            <paragraph>number of lags to show. If None, will return all 2 * len(x) - 1
lags.</paragraph>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Returns</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>(lags, c, line, b)</strong>: where:</paragraph>
                                        <block_quote>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">lags</literal>are a length 2`maxlags+1 lag vector.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">c</literal>is the 2`maxlags+1 auto correlation vectorI</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">line</literal>is a 
                                                        <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                            <literal classes="xref py py-obj">Line2D</literal></reference>instance returned by

                                                        <literal classes="xref py py-obj">plot</literal>
                                                        .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>
                                                        <literal classes="xref py py-obj">b</literal>is the x-axis (none, if plot is used).</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </block_quote>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>Other Parameters</field_name>
                                    <field_body>
                                        <paragraph>
                                            <strong>linestyle</strong>: 
                                            <reference internal="True" reftitle="matplotlib.lines.Line2D" refuri="lines_api#matplotlib.lines.Line2D">
                                                <literal classes="xref py py-obj">Line2D</literal></reference>prop, optional, default: None</paragraph>
                                        <block_quote>
                                            <paragraph>Only used if usevlines is False.</paragraph>
                                        </block_quote>
                                        <paragraph>
                                            <strong>marker</strong>: string, optional, default: 'o'</paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                            <rubric>Notes</rubric>
                            <paragraph>In addition to the above described arguments, this function can take a

                                <strong>data</strong>
                                keyword argument. If such a 
                                <strong>data</strong>
                                argument is given, the
following arguments are replaced by 
                                <strong>data[&lt;arg&gt;]</strong>
                                :</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>All arguments with the following names: 'y', 'x'.</paragraph>
                                </list_item>
                            </bullet_list>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'yaxis_date()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.yaxis_date',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.yaxis_date" ids="matplotlib.axes.Axes.yaxis_date" module="matplotlib.axes" names="matplotlib.axes.Axes.yaxis_date">
                            <desc_name>yaxis_date</desc_name>
                            <desc_parameterlist>
                                <desc_parameter>tz=None</desc_parameter>
                            </desc_parameterlist>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Sets up y-axis ticks and labels that treat the y data as dates.</paragraph>
                            <paragraph>
                                <emphasis>tz</emphasis>is a timezone string or 
                                <literal classes="xref py py-class">tzinfo</literal>
                                instance.
Defaults to rc value.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'yaxis_inverted()\ (matplotlib.axes.Axes\ method)',\ u'matplotlib.axes.Axes.yaxis_inverted',\ '']"/>
                    <desc desctype="method" domain="py" noindex="False" objtype="method">
                        <desc_signature class="Axes" first="False" fullname="Axes.yaxis_inverted" ids="matplotlib.axes.Axes.yaxis_inverted" module="matplotlib.axes" names="matplotlib.axes.Axes.yaxis_inverted">
                            <desc_name>yaxis_inverted</desc_name>
                            <desc_parameterlist/>
                        </desc_signature>
                        <desc_content>
                            <paragraph>Returns 
                                <emphasis>True</emphasis>
                                if the y-axis is inverted.</paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ u'zorder\ (matplotlib.axes.Axes\ attribute)',\ u'matplotlib.axes.Axes.zorder',\ '']"/>
                    <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                        <desc_signature class="Axes" first="False" fullname="Axes.zorder" ids="matplotlib.axes.Axes.zorder" module="matplotlib.axes" names="matplotlib.axes.Axes.zorder">
                            <desc_name>zorder</desc_name>
                            <desc_annotation>= 0</desc_annotation>
                        </desc_signature>
                        <desc_content/>
                    </desc>
                </desc_content>
            </desc>
            <substitution_definition names="minimum_numpy_version">1.6</substitution_definition>
        </section>
    </section>
</document>
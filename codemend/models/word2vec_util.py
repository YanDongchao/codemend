import numpy as np
import struct

def load_vectors_from_binary_file(filename):
  """
  Read word2vec vectors
  Input: a binary file of vectors generated by word2vec
  Output: (words, vector_matrix)
  """
  with open(filename, 'rb') as reader:
    line = reader.readline()
    fs = line.strip().split()
    assert len(fs) == 2
    N = int(fs[0])  # vocab size in vector file
    k = int(fs[1])  # vector dimension
    M = np.zeros((N, k))
    words = []

    for i in range(N):
      # read a word from this binary file
      # following word2vec procedure
      # assuming space to be the boundary of the word
      chars = []
      while True:
        ch = reader.read(1)
        if ch == '\n' or ch == '\r':  # carriage return
          continue
        if ch == ' ':
          break
        chars.append(ch)
      word = ''.join(chars)

      for j in range(k):
        (M[i, j],) = struct.unpack('f', reader.read(4))

      words.append(word)

  return words, M

def load_gensim_from_binary_file(filename):
  from gensim.models.word2vec import Vocab, Word2Vec
  words, M = load_vectors_from_binary_file(filename)
  N, k = M.shape
  assert N == len(words)

  model = Word2Vec(size=k)
  model.syn0 = M
  model.index2word = words
  model.vocab = dict((w, Vocab(index=idx, count=N-idx))
                     for (idx, w) in enumerate(words))
  return model

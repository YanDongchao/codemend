import struct

# Reader of word2vec vectors
# Input: a binary file of vectors generated by word2vec
# Output: (words, M, N, k)
def load_vectors_from_binary_file(filename):
  with open(filename, 'rb') as reader:
    line = reader.readline()
    fs = line.strip().split()
    assert len(fs) == 2
    N = int(fs[0])  # vocab size in vector file
    k = int(fs[1])  # vector dimension
    M = [0.0] * (N * k)
    words = []
    
    for i in range(N):
      # read a word from this binary file
      # following word2vec procedure
      # assuming space to be the boundary of the word
      chars = []
      while True:
        ch = reader.read(1)
        if ch == '\n' or ch == '\r':  # carriage return
          continue
        if ch == ' ':
          break
        chars.append(ch)
      word = ''.join(chars)

      for j in range(k):
        (M[i * k + j],) = struct.unpack('f', reader.read(4))

      words.append(word)

  return (words, M, N, k)
